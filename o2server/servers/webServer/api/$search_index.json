{"global.html":{"id":"global.html","url":"global.html","title":"Global","kind":"","body":" Global --> Type Definitions ViewFilter ViewFilter 视图过滤条件 Type Object Properties logic String 可选值：“and”或者“or”，表示和前一个条件的逻辑运算关系。 path String 要过滤的data数据的路径。 comparison String 比较运算符，可选值： equals 或 == 或：表示等于。 notEquals 或 != ：表示不等于。 greaterThan 或 > ：表示大于。 greaterThanOrEqualTo 或 => ：表示大于或等于。 lessThan 或 ：表示小于。 lessThanOrEqualTo 或 ：表示小于等于。 like ：表示部分匹配。 notLike ：表示不匹配。 range ：表示一定的范围。 in ：表示在某几个特定的值当中。 formatType String 过滤数据的数据类型，可选值： textValue ：文本。 numberValue ：数字。 dateTimeValue ：日期时间。 booleanValue ：布尔值。 value String | Number | Boolean 过滤的值，根据formatType提供匹配的数据类型的值，如果是dateTimeValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD HH:MM:SS”。当comparison值为“range”时，此值表示范围中的第一个值。当comparison值为“in”时，多个值用半角逗号&quot;,&quot;分开。 otherValue String | Number | Boolean 当comparison值为“range”时，此值表示范围中的第二个值。当comparison值不为“range”时，忽略此值。 Example { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } Source o2_core/o2/xScript/ViewEnvironment.js, line 8 StatementFilter StatementFilter 查询视图的过滤条件 Type Object Properties path String 要过滤的data数据的路径，形式为查询语句中的&quot;表别名.字段名&quot;，如&quot;o.title&quot;。 comparison String 比较运算符，可选值： equals 或 == 或：表示等于。 notEquals 或 != ：表示不等于。 greaterThan 或 > ：表示大于。 greaterThanOrEqualTo 或 => ：表示大于或等于。 lessThan 或 ：表示小于。 lessThanOrEqualTo 或 ：表示小于等于。 like ：表示部分匹配。 notLike ：表示不匹配。 formatType String 过滤数据的数据类型，可选值： textValue ：文本。 numberValue ：数字。 dateTimeValue ：日期时间。 dateValue ：仅日期。 timeValue ：仅时间。 booleanValue ：布尔值。 value String | Number | Boolean 过滤的值，根据formatType提供匹配的数据类型的值。如果是dateTimeValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD HH:MM:SS”。 如果是dateValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD”。如果是timeValue数据类型，则提供时间格式的字符串，格式如“HH:MM:SS”。 Example { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } Source o2_core/o2/xScript/ViewEnvironment.js, line 45 StatementParameter StatementParameter 查询视图的过滤条件值参数，对查询语句where语句的形如&quot;:person&quot;的参数部分进行赋值 有以下规则： 1、参数名称为下列值时，后台自动赋值：person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组)。 2、如果对比的是日期，需要传入 Date 类型。 3、如果运算符用的是 like, noLike，模糊查询，值为 &quot;%{value}%&quot;。 Type Object Example { 'person' : '', 'startTime' : (new Date('2020-01-01')), 'applicationName' : '%test%', 'processName' : 'test流程' //其他写确定的值 } Source o2_core/o2/xScript/ViewEnvironment.js, line 80 GroupFlag 在本API的this.org模块中，当使用群组作为检索参数的时候，允许使用群组的distinguishedName、name、id、unique属性值，或者包含这些属性值的对象。 Type String | Object Example //以下均为合法参数 //群组属性值 '工作汇报读者@ReportReader@G' //群组识别名 'cce8bc22-225a-4f85-8132-7374d546886e' //id 'ReportReader' //群组unique '工作汇报读者' //群组名称 //包含下列属性的对象 { 'distinguishedName': '工作汇报读者@ReportReader@G' } //群组识别名 { 'unique': 'cce8bc22-225a-4f85-8132-7374d546886e' } //群组id { 'unique': 'ReportReader' } //群组unique { 'name': '工作汇报读者' } //群组名称 Source o2_core/o2/xScript/ViewEnvironment.js, line 98 PersonFlag 在本API的this.org模块中，当使用人员(个人)作为检索参数的时候，允许使用人员的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //人员属性值 '李四@lisi@P' //人员识别名 'cce8bc22-225a-4f85-8132-7374d546886e' //人员id 'lisi' //人员unique '李四' //人员名称，不重名时才有效 //包含下列属性的对象 { 'distinguishedName': '李四@lisi@P' } //人员识别名 { 'id': 'cce8bc22-225a-4f85-8132-7374d546886e' } //人员id { 'unique': 'lisi' } //人员unique { 'name': '李四' } //人员名称，不重名时才有效 Source o2_core/o2/xScript/ViewEnvironment.js, line 118 RoleFlag 在本API的this.org模块中，当使用角色作为检索参数的时候，允许使用角色的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //角色属性值 'PersonManager@PersonManagerSystemRole@R' //角色识别名 '85874fbc-9af0-4a07-bc2f-0ab899cc4c7d' //角色id 'PersonManagerSystemRole' //角色unique 'PersonManager' //角色名称 //包含下列属性的对象 { 'distinguishedName': 'PersonManager@PersonManagerSystemRole@R' } //角色识别名 { 'id': '85874fbc-9af0-4a07-bc2f-0ab899cc4c7d' } //角色id { 'unique': 'PersonManagerSystemRole' } //角色unique { 'name': 'PersonManager' } //角色名称 Source o2_core/o2/xScript/ViewEnvironment.js, line 137 IdentityFlag 在本API的this.org模块中，当使用身份作为检索参数的时候，允许使用身份的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //角色属性值 '张三@903dbb04-085c-4bb1-9c24-3009bd5f7372@I' //身份识别名 '903dbb04-085c-4bb1-9c24-3009bd5f7372' //身份id '903dbb04-085c-4bb1-9c24-3009bd5f7372' //身份unique，系统默认的unique和id一致 '张三' //身份名称，有可能存在重名，需要精确匹配的请不要使用 //包含下列属性的对象 { 'distinguishedName': '张三@903dbb04-085c-4bb1-9c24-3009bd5f7372@I' } //身份识别名 { 'id': '903dbb04-085c-4bb1-9c24-3009bd5f7372' } //身份id { 'unique': '903dbb04-085c-4bb1-9c24-3009bd5f7372' } //身份unique，系统默认的unique和id一致 { 'name': '张三' } //身份名称，有可能存在重名，需要精确匹配的请不要使用 Source o2_core/o2/xScript/ViewEnvironment.js, line 156 UnitFlag 在本API的this.org模块中，当使用组织作为检索参数的时候，允许使用组织的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //组织属性值 '开发部@kfb@U' //组织标识名 'cce8bc22-225a-4f85-8132-7374d546886e' //组织id 'kfb' //组织unique '开发部' //组织名称，有可能存在重名，需要精确匹配的请不要使用 //包含下列属性的对象 { 'distinguishedName': '开发部@kfb@U' } //组织标识名 { 'id': 'cce8bc22-225a-4f85-8132-7374d546886e' } //身份id { 'unique': 'kfb' } //组织unique { 'name': '开发部' } //组织名称，有可能存在重名，需要精确匹配的请不要使用 Source o2_core/o2/xScript/ViewEnvironment.js, line 175 DatagridData 数据网格数据结构. Type Object Properties data Array 数据网格列表数据 total Object 统计数据 Example { 'data': [ //数据网格条目 { 'datagrid_datagrid$Title': { //数据网格第1列title标识 'org_20': { //数据网格第1列字段标识，人员组件单个对象，存的是对象 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' } }, 'datagrid_datagrid$Title1': { //数据网格第2列title标识 'org_21': [{ //数据网格第2列字段标识，人员组件多个对象，存的是数组 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' },{ 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }] }, 'datagrid_datagrid$Title_2': { //数据网格第2列title标识 'number': '111' //数据网格第3列字段标识和值 }, 'datagrid_datagrid$Title_3': { //数据网格第3列title标识 'textfield_2': '杭州' //数据网格第4列字段标识和值 }, 'datagrid_datagrid$Title_4': { //数据网格第4列title标识 'attachment_1': [ //数据网格第5列字段标识 { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] } }, ... ], 'total': { //统计数据，列title设置了总计 'datagrid_datagrid$Title_2': '333', //总计列2 'datagrid_datagrid$Title_3': '2' //总计列3 } } Source x_component_process_Xform/DatagridPC.js, line 1 DatatableData 数据表格数据结构. Type Array Example { //数据表格数据条目 'data': [ { 'org': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'org_1': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }, { 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'number': '111', 'textfield': '杭州', 'attachment': [ { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] } ... ], 'total': { 'number': 222, //总计采用字段id 'textfield': 2 } } Source x_component_process_Xform/DatatablePC.js, line 1 DatatemplateData 数据模板数据结构. Type Array Example [ //数据模板数据条目 { 'org': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'org_1': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }, { 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'number': '111', 'textfield': '杭州', 'attachment': [ { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] }, ... ] Source x_component_process_Xform/Datatemplate.js, line 1 TreeData 树组件数据结构 Type Object Example [ { 'expand': true, //是否默认展开 'title': '', //鼠标移上叶子节点的文字 'text': '根节点', //叶子节点的文字 'action': '', //执行的脚本 'default': true, //是否默认选中 'icon': 'folder.png', //图标 'sub': [ //该节点的子节点 { 'expand': true, 'title': '', 'text': '[none]', 'action': '', 'default': false, 'icon': 'folder.png', 'sub': [] }, ... ] } ] Source x_component_process_Xform/Tree.js, line 2 Global --> Type Definitions ViewFilter ViewFilter 视图过滤条件 Type Object Properties logic String 可选值：“and”或者“or”，表示和前一个条件的逻辑运算关系。 path String 要过滤的data数据的路径。 comparison String 比较运算符，可选值： equals 或 == 或：表示等于。 notEquals 或 != ：表示不等于。 greaterThan 或 > ：表示大于。 greaterThanOrEqualTo 或 => ：表示大于或等于。 lessThan 或 ：表示小于。 lessThanOrEqualTo 或 ：表示小于等于。 like ：表示部分匹配。 notLike ：表示不匹配。 range ：表示一定的范围。 in ：表示在某几个特定的值当中。 formatType String 过滤数据的数据类型，可选值： textValue ：文本。 numberValue ：数字。 dateTimeValue ：日期时间。 booleanValue ：布尔值。 value String | Number | Boolean 过滤的值，根据formatType提供匹配的数据类型的值，如果是dateTimeValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD HH:MM:SS”。当comparison值为“range”时，此值表示范围中的第一个值。当comparison值为“in”时，多个值用半角逗号&quot;,&quot;分开。 otherValue String | Number | Boolean 当comparison值为“range”时，此值表示范围中的第二个值。当comparison值不为“range”时，忽略此值。 Example { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } Source o2_core/o2/xScript/ViewEnvironment.js, line 8 StatementFilter StatementFilter 查询视图的过滤条件 Type Object Properties path String 要过滤的data数据的路径，形式为查询语句中的&quot;表别名.字段名&quot;，如&quot;o.title&quot;。 comparison String 比较运算符，可选值： equals 或 == 或：表示等于。 notEquals 或 != ：表示不等于。 greaterThan 或 > ：表示大于。 greaterThanOrEqualTo 或 => ：表示大于或等于。 lessThan 或 ：表示小于。 lessThanOrEqualTo 或 ：表示小于等于。 like ：表示部分匹配。 notLike ：表示不匹配。 formatType String 过滤数据的数据类型，可选值： textValue ：文本。 numberValue ：数字。 dateTimeValue ：日期时间。 dateValue ：仅日期。 timeValue ：仅时间。 booleanValue ：布尔值。 value String | Number | Boolean 过滤的值，根据formatType提供匹配的数据类型的值。如果是dateTimeValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD HH:MM:SS”。 如果是dateValue数据类型，则提供日期格式的字符串，格式如“YYYY-MM-DD”。如果是timeValue数据类型，则提供时间格式的字符串，格式如“HH:MM:SS”。 Example { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } Source o2_core/o2/xScript/ViewEnvironment.js, line 45 StatementParameter StatementParameter 查询视图的过滤条件值参数，对查询语句where语句的形如&quot;:person&quot;的参数部分进行赋值 有以下规则： 1、参数名称为下列值时，后台自动赋值：person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组)。 2、如果对比的是日期，需要传入 Date 类型。 3、如果运算符用的是 like, noLike，模糊查询，值为 &quot;%{value}%&quot;。 Type Object Example { 'person' : '', 'startTime' : (new Date('2020-01-01')), 'applicationName' : '%test%', 'processName' : 'test流程' //其他写确定的值 } Source o2_core/o2/xScript/ViewEnvironment.js, line 80 GroupFlag 在本API的this.org模块中，当使用群组作为检索参数的时候，允许使用群组的distinguishedName、name、id、unique属性值，或者包含这些属性值的对象。 Type String | Object Example //以下均为合法参数 //群组属性值 '工作汇报读者@ReportReader@G' //群组识别名 'cce8bc22-225a-4f85-8132-7374d546886e' //id 'ReportReader' //群组unique '工作汇报读者' //群组名称 //包含下列属性的对象 { 'distinguishedName': '工作汇报读者@ReportReader@G' } //群组识别名 { 'unique': 'cce8bc22-225a-4f85-8132-7374d546886e' } //群组id { 'unique': 'ReportReader' } //群组unique { 'name': '工作汇报读者' } //群组名称 Source o2_core/o2/xScript/ViewEnvironment.js, line 98 PersonFlag 在本API的this.org模块中，当使用人员(个人)作为检索参数的时候，允许使用人员的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //人员属性值 '李四@lisi@P' //人员识别名 'cce8bc22-225a-4f85-8132-7374d546886e' //人员id 'lisi' //人员unique '李四' //人员名称，不重名时才有效 //包含下列属性的对象 { 'distinguishedName': '李四@lisi@P' } //人员识别名 { 'id': 'cce8bc22-225a-4f85-8132-7374d546886e' } //人员id { 'unique': 'lisi' } //人员unique { 'name': '李四' } //人员名称，不重名时才有效 Source o2_core/o2/xScript/ViewEnvironment.js, line 118 RoleFlag 在本API的this.org模块中，当使用角色作为检索参数的时候，允许使用角色的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //角色属性值 'PersonManager@PersonManagerSystemRole@R' //角色识别名 '85874fbc-9af0-4a07-bc2f-0ab899cc4c7d' //角色id 'PersonManagerSystemRole' //角色unique 'PersonManager' //角色名称 //包含下列属性的对象 { 'distinguishedName': 'PersonManager@PersonManagerSystemRole@R' } //角色识别名 { 'id': '85874fbc-9af0-4a07-bc2f-0ab899cc4c7d' } //角色id { 'unique': 'PersonManagerSystemRole' } //角色unique { 'name': 'PersonManager' } //角色名称 Source o2_core/o2/xScript/ViewEnvironment.js, line 137 IdentityFlag 在本API的this.org模块中，当使用身份作为检索参数的时候，允许使用身份的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //角色属性值 '张三@903dbb04-085c-4bb1-9c24-3009bd5f7372@I' //身份识别名 '903dbb04-085c-4bb1-9c24-3009bd5f7372' //身份id '903dbb04-085c-4bb1-9c24-3009bd5f7372' //身份unique，系统默认的unique和id一致 '张三' //身份名称，有可能存在重名，需要精确匹配的请不要使用 //包含下列属性的对象 { 'distinguishedName': '张三@903dbb04-085c-4bb1-9c24-3009bd5f7372@I' } //身份识别名 { 'id': '903dbb04-085c-4bb1-9c24-3009bd5f7372' } //身份id { 'unique': '903dbb04-085c-4bb1-9c24-3009bd5f7372' } //身份unique，系统默认的unique和id一致 { 'name': '张三' } //身份名称，有可能存在重名，需要精确匹配的请不要使用 Source o2_core/o2/xScript/ViewEnvironment.js, line 156 UnitFlag 在本API的this.org模块中，当使用组织作为检索参数的时候，允许使用组织的distinguishedName、name、id、unique属性值或包含这些属性的对象。 Type String | Object Example //以下均为合法参数 //组织属性值 '开发部@kfb@U' //组织标识名 'cce8bc22-225a-4f85-8132-7374d546886e' //组织id 'kfb' //组织unique '开发部' //组织名称，有可能存在重名，需要精确匹配的请不要使用 //包含下列属性的对象 { 'distinguishedName': '开发部@kfb@U' } //组织标识名 { 'id': 'cce8bc22-225a-4f85-8132-7374d546886e' } //身份id { 'unique': 'kfb' } //组织unique { 'name': '开发部' } //组织名称，有可能存在重名，需要精确匹配的请不要使用 Source o2_core/o2/xScript/ViewEnvironment.js, line 175 DatagridData 数据网格数据结构. Type Object Properties data Array 数据网格列表数据 total Object 统计数据 Example { 'data': [ //数据网格条目 { 'datagrid_datagrid$Title': { //数据网格第1列title标识 'org_20': { //数据网格第1列字段标识，人员组件单个对象，存的是对象 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' } }, 'datagrid_datagrid$Title1': { //数据网格第2列title标识 'org_21': [{ //数据网格第2列字段标识，人员组件多个对象，存的是数组 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' },{ 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }] }, 'datagrid_datagrid$Title_2': { //数据网格第2列title标识 'number': '111' //数据网格第3列字段标识和值 }, 'datagrid_datagrid$Title_3': { //数据网格第3列title标识 'textfield_2': '杭州' //数据网格第4列字段标识和值 }, 'datagrid_datagrid$Title_4': { //数据网格第4列title标识 'attachment_1': [ //数据网格第5列字段标识 { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] } }, ... ], 'total': { //统计数据，列title设置了总计 'datagrid_datagrid$Title_2': '333', //总计列2 'datagrid_datagrid$Title_3': '2' //总计列3 } } Source x_component_process_Xform/DatagridPC.js, line 1 DatatableData 数据表格数据结构. Type Array Example { //数据表格数据条目 'data': [ { 'org': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'org_1': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }, { 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'number': '111', 'textfield': '杭州', 'attachment': [ { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] } ... ], 'total': { 'number': 222, //总计采用字段id 'textfield': 2 } } Source x_component_process_Xform/DatatablePC.js, line 1 DatatemplateData 数据模板数据结构. Type Array Example [ //数据模板数据条目 { 'org': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'org_1': [{ 'distinguishedName': '张三@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '张三', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }, { 'distinguishedName': '李四@bf007525-99a3-4178-a474-32865bdddec8@I', 'id': 'bf007525-99a3-4178-a474-32865bdddec8', 'name': '李四', 'person': '0c828550-d8ab-479e-9880-09a59332f1ed', 'unit': '9e6ce205-86f6-4d84-96e1-83147567aa8d', 'unitLevelName': '兰德纵横/市场营销部', 'unitName': '市场营销部' }], 'number': '111', 'textfield': '杭州', 'attachment': [ { 'activityName': '拟稿', 'extension': 'jpg', 'id': '9514758e-9e28-4bfe-87d7-824f2811f173', 'lastUpdateTime': '2020-12-09 21:48:03', 'length': 452863.0, 'name': '111.jpg', 'person': '李四@lisi@P' } ] }, ... ] Source x_component_process_Xform/Datatemplate.js, line 1 TreeData 树组件数据结构 Type Object Example [ { 'expand': true, //是否默认展开 'title': '', //鼠标移上叶子节点的文字 'text': '根节点', //叶子节点的文字 'action': '', //执行的脚本 'default': true, //是否默认选中 'icon': 'folder.png', //图标 'sub': [ //该节点的子节点 { 'expand': true, 'title': '', 'text': '[none]', 'action': '', 'default': false, 'icon': 'folder.png', 'sub': [] }, ... ] } ] Source x_component_process_Xform/Tree.js, line 2 "},"index.html":{"id":"index.html","url":"index.html","title":"Index","kind":"","body":" O2OA前台API (6.2.0.java8-406770663) 简介 O2OA 是一个高度可定制化的企业级办公平台，您可以通过脚本语言扩展平台功能。 O2OA 前端脚本基于您使用的浏览器的Javascript引擎，使用Javascript语法。 本API是O2OA前台脚本的编写说明，您可以通过脚本访问和操作平台内的各种对象。 API总览 Modules 为脚本封装的对象、方法和类 业务数据 - data 流程实例 - workContext 内容管理实例 - documentContext 组织查询 - org 流程及内容管理表单 - form 门户页面 - page 视图 - queryView 视图执行 - view 数据字典 - Dict 查询视图 - queryStatement 查询视图执行 - statement 服务调用 - Actions 脚本引用 - include 方法定义 - define 当前用户 - session 平台移动APP API - o2m 表单等待 - wait 导入数据 - importer FormComponent FormComponent为表单组件，可以通过this.form.get(&quot;fieldId&quot;)获取。 Process 流程表单组件 表单 - Form 文本 - Label 文本字段 - Textfield 数字字段 - Number 人员组织 - Org 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 组合框 - Combox 意见框 - Opinion 按钮 - Button 地址 - Address 操作条 - Actionbar 侧边操作条 - Sidebar 图片 - Image 图片编辑 - ImageClipper 附件 - Attachment 容器 - Div 表格 - Table 单元格 - Table$Td 数据网格PC端(过时) - DatagridPC 数据网格移动端(过时) - DatagridMobile 子表单 - Subform 选择视图 - ViewSelector 嵌入视图 - View 嵌入统计 - Stat 通用元素 - Common 分页 - Tab 树 - Tree 流程记录 - Log 流程监控 - Monitor Iframe - Iframe 公文编辑器 - Documenteditor HTML编辑器 - Htmleditor Office控件 - Office 选择查询视图 - StatementSelector 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer CMS 内容管理表单组件 内容管理表单 - CMSForm 文本 - Label 文本字段 - Textfield 数字字段 - Number 人员组织 - Org 读者 - Reader 作者 - Author 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 组合框 - Combox 按钮 - Button 地址 - Address 操作条 - Actionbar 图片 - Image 图片编辑 - ImageClipper 附件 - Attachment 容器 - Div 表格 - Table 单元格 - Table$Td 数据网格PC端(过时) - DatagridPC 数据网格移动端(过时) - DatagridMobile 子表单 - Subform 选择视图 - ViewSelector 嵌入视图 - View 嵌入统计 - Stat 通用元素 - Common 分页 - Tab 树 - Tree Iframe - Iframe HTML编辑器 - Htmleditor 阅读记录 - CMSLog Office控件 - Office 评论 - Comment 选择查询视图 - StatementSelector 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer Portal 门户页面组件 页面 - PortalPage 容器 - Div 文本 - Label 数据源 - Source 子数据源 - SubSource 数据文本 - SourceText 表格 - Table 单元格 - Table$Td 分页 - Tab 图片 - Image 按钮 - Button Iframe - Iframe 通用元素 - Common 树 - Tree 嵌入视图 - View 嵌入统计 - Stat 文本字段 - Textfield 人员组织 - Org 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 部件 - Widget 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer 服务 服务是O2OA后台提供的一系列restful服务。 x_processplatform_assemble_surface 流程平台相关服务 x_portal_assemble_surface 门户平台相关服务 x_cms_assemble_control 内容管理平台相关服务 x_query_assemble_surface 数据平台相关服务 x_organization_assemble_express 组织架构相关服务 x_file_assemble_control 云文件相关服务 x_meeting_assemble_control 会议管理相关服务 x_bbs_assemble_control 论坛相关服务 x_calendar_assemble_control 日程管理相关服务 x_hotpic_assemble_control 热点信息相关服务 x_mind_assemble_control 脑图模块相关服务 x_organization_assemble_personal 个人设置相关服务 x_attendance_assemble_control 考勤模块相关服务 使用范围 O2OA 可在多个位置嵌入脚本代码，用于扩展平台和实现自定义功能。嵌入脚本代码分为前端执行代码和服务端执行代码，两者语法一致，本文档指前台脚本。 脚本: 流程平台、门户平台和内容管理平台中，都有脚本设计元素，可以在此创建自己的脚本库。如下图： 表单、页面、视图、查询视图及其组件事件： 流程平台和内容平台的表单、门户平台的页面、数据平台的视图和查询视图中，每个设计组件包含多种事件，包括DOM对象原生事件和O2平台扩展事件。如下图： 表单、页面可编辑组件默认值： 流程平台和内容平台的表单和门户平台的页面中，可编辑组件或文本组件的默认值可以通过脚本指定。如下图： 表单、页面、视图、查询视图的部分属性： 流程平台和内容平台的表单、门户平台的页面、数据平台的视图和查询视图中，有许多组件的相关属性可以通过脚本来定义。 如：下拉框、单选多选按钮的可选值、人员字段的选择范围、区段依据等。如下图： 表单及可编辑组件校验： 流程平台和内容管理的表单中，可编辑的字段可以通过脚本进行有效性校验，校验通过返回true，不通过返回提示信息。如下图： 流程路由属性的扩展附签和选择附签下的脚本： 样例 这是一个简单的样例，用于展现脚本如何编写和运行。 本例中我们要实现一个表单中，两个下拉框从配置数据中获取可选数据，以及实现联动。 我们需要创建一个流程应用，一个表单以及一个数据字典。在表单中创建两个下拉列表框。 先在表单中创建两个下拉框 在category1和category2两个下拉框的属性中，选择通过“脚本”编辑可选值。 category1脚本: category2脚本: 在category1和category2两个下拉框的可选值脚本如下： category1的可选值脚本: var dict = new this.Dict(&quot;category&quot;); //获取名为category的数据字典 var categoryList = dict.get(); //获取数据字典 var options = Object.keys(categoryList); //获取大类，赋值给options变量 options.unshift(&quot;(请选择大类)|&quot;); //在options数组首位插入提示选项，并将“”作为value，“(请选择大类)”作为text return options; //返回列表，作为列表框的可选值 category2的可选值脚本: var dict = new this.Dict(&quot;category&quot;); //获取名为category的数据字典 var categoryList = dict.get(this.data.category1); //获取数据字典,以下拉框category1的值为关键字的数据值（数组） return categoryList; //返回列表，作为列表框的可选值 在category1的change事件中添加如下代码： //获category2下拉框，并刷新可选项 this.form.get(&quot;category2&quot;).resetOption(); 设计数据字典如下图，并命名为：&quot;分类配置&quot;，别名为：“category”。 预览表单，即可看到大类下拉框中选项为数据字典中的第一层数据，选择不同的大类可与小类下拉框实现联动。 O2OA前台API (6.2.0.java8-406770663) 简介 O2OA 是一个高度可定制化的企业级办公平台，您可以通过脚本语言扩展平台功能。 O2OA 前端脚本基于您使用的浏览器的Javascript引擎，使用Javascript语法。 本API是O2OA前台脚本的编写说明，您可以通过脚本访问和操作平台内的各种对象。 API总览 Modules 为脚本封装的对象、方法和类 业务数据 - data 流程实例 - workContext 内容管理实例 - documentContext 组织查询 - org 流程及内容管理表单 - form 门户页面 - page 视图 - queryView 视图执行 - view 数据字典 - Dict 查询视图 - queryStatement 查询视图执行 - statement 服务调用 - Actions 脚本引用 - include 方法定义 - define 当前用户 - session 平台移动APP API - o2m 表单等待 - wait 导入数据 - importer FormComponent FormComponent为表单组件，可以通过this.form.get(&quot;fieldId&quot;)获取。 Process 流程表单组件 表单 - Form 文本 - Label 文本字段 - Textfield 数字字段 - Number 人员组织 - Org 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 组合框 - Combox 意见框 - Opinion 按钮 - Button 地址 - Address 操作条 - Actionbar 侧边操作条 - Sidebar 图片 - Image 图片编辑 - ImageClipper 附件 - Attachment 容器 - Div 表格 - Table 单元格 - Table$Td 数据网格PC端(过时) - DatagridPC 数据网格移动端(过时) - DatagridMobile 子表单 - Subform 选择视图 - ViewSelector 嵌入视图 - View 嵌入统计 - Stat 通用元素 - Common 分页 - Tab 树 - Tree 流程记录 - Log 流程监控 - Monitor Iframe - Iframe 公文编辑器 - Documenteditor HTML编辑器 - Htmleditor Office控件 - Office 选择查询视图 - StatementSelector 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer CMS 内容管理表单组件 内容管理表单 - CMSForm 文本 - Label 文本字段 - Textfield 数字字段 - Number 人员组织 - Org 读者 - Reader 作者 - Author 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 组合框 - Combox 按钮 - Button 地址 - Address 操作条 - Actionbar 图片 - Image 图片编辑 - ImageClipper 附件 - Attachment 容器 - Div 表格 - Table 单元格 - Table$Td 数据网格PC端(过时) - DatagridPC 数据网格移动端(过时) - DatagridMobile 子表单 - Subform 选择视图 - ViewSelector 嵌入视图 - View 嵌入统计 - Stat 通用元素 - Common 分页 - Tab 树 - Tree Iframe - Iframe HTML编辑器 - Htmleditor 阅读记录 - CMSLog Office控件 - Office 评论 - Comment 选择查询视图 - StatementSelector 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer Portal 门户页面组件 页面 - PortalPage 容器 - Div 文本 - Label 数据源 - Source 子数据源 - SubSource 数据文本 - SourceText 表格 - Table 单元格 - Table$Td 分页 - Tab 图片 - Image 按钮 - Button Iframe - Iframe 通用元素 - Common 树 - Tree 嵌入视图 - View 嵌入统计 - Stat 文本字段 - Textfield 人员组织 - Org 日期选择 - Calendar 多行文本 - Textarea 下拉框 - Select 单选框 - Radio 多选框 - Checkbox 部件 - Widget 嵌入查询视图 - Statement 数据模板 - Datatemplate 数据表格PC端 - DatatablePC 数据表格移动端 - DatatableMobile 数据导入 - Importer 服务 服务是O2OA后台提供的一系列restful服务。 x_processplatform_assemble_surface 流程平台相关服务 x_portal_assemble_surface 门户平台相关服务 x_cms_assemble_control 内容管理平台相关服务 x_query_assemble_surface 数据平台相关服务 x_organization_assemble_express 组织架构相关服务 x_file_assemble_control 云文件相关服务 x_meeting_assemble_control 会议管理相关服务 x_bbs_assemble_control 论坛相关服务 x_calendar_assemble_control 日程管理相关服务 x_hotpic_assemble_control 热点信息相关服务 x_mind_assemble_control 脑图模块相关服务 x_organization_assemble_personal 个人设置相关服务 x_attendance_assemble_control 考勤模块相关服务 使用范围 O2OA 可在多个位置嵌入脚本代码，用于扩展平台和实现自定义功能。嵌入脚本代码分为前端执行代码和服务端执行代码，两者语法一致，本文档指前台脚本。 脚本: 流程平台、门户平台和内容管理平台中，都有脚本设计元素，可以在此创建自己的脚本库。如下图： 表单、页面、视图、查询视图及其组件事件： 流程平台和内容平台的表单、门户平台的页面、数据平台的视图和查询视图中，每个设计组件包含多种事件，包括DOM对象原生事件和O2平台扩展事件。如下图： 表单、页面可编辑组件默认值： 流程平台和内容平台的表单和门户平台的页面中，可编辑组件或文本组件的默认值可以通过脚本指定。如下图： 表单、页面、视图、查询视图的部分属性： 流程平台和内容平台的表单、门户平台的页面、数据平台的视图和查询视图中，有许多组件的相关属性可以通过脚本来定义。 如：下拉框、单选多选按钮的可选值、人员字段的选择范围、区段依据等。如下图： 表单及可编辑组件校验： 流程平台和内容管理的表单中，可编辑的字段可以通过脚本进行有效性校验，校验通过返回true，不通过返回提示信息。如下图： 流程路由属性的扩展附签和选择附签下的脚本： 样例 这是一个简单的样例，用于展现脚本如何编写和运行。 本例中我们要实现一个表单中，两个下拉框从配置数据中获取可选数据，以及实现联动。 我们需要创建一个流程应用，一个表单以及一个数据字典。在表单中创建两个下拉列表框。 先在表单中创建两个下拉框 在category1和category2两个下拉框的属性中，选择通过“脚本”编辑可选值。 category1脚本: category2脚本: 在category1和category2两个下拉框的可选值脚本如下： category1的可选值脚本: var dict = new this.Dict(&quot;category&quot;); //获取名为category的数据字典 var categoryList = dict.get(); //获取数据字典 var options = Object.keys(categoryList); //获取大类，赋值给options变量 options.unshift(&quot;(请选择大类)|&quot;); //在options数组首位插入提示选项，并将“”作为value，“(请选择大类)”作为text return options; //返回列表，作为列表框的可选值 category2的可选值脚本: var dict = new this.Dict(&quot;category&quot;); //获取名为category的数据字典 var categoryList = dict.get(this.data.category1); //获取数据字典,以下拉框category1的值为关键字的数据值（数组） return categoryList; //返回列表，作为列表框的可选值 在category1的change事件中添加如下代码： //获category2下拉框，并刷新可选项 this.form.get(&quot;category2&quot;).resetOption(); 设计数据字典如下图，并命名为：&quot;分类配置&quot;，别名为：“category”。 预览表单，即可看到大类下拉框中选项为数据字典中的第一层数据，选择不同的大类可与小类下拉框实现联动。 "},"module-documentContext.html":{"id":"module-documentContext.html","url":"module-documentContext.html","title":"documentContext","kind":"Module","body":" Module documentContext 您可以通过documentContext获取内容管理实例相关的对象数据。 Usable Range CMS Example //您可以在内容管理表单中，通过this来获取当前实例的documentContext对象，如下： var context = this.documentContext; Source o2_core/o2/xScript/CMSEnvironment.js, line 35 Methods static getDocument() &rarr; {Document} 获取当前内容管理实例的文档对象：document对象。 Syntax var doc = this.documentContext.getDocument(); Returns Document 文档对象. { 'id': '3359aedd-c2d8-4d8c-b8b0-02507da1b3f4', //数据库主键,自动生成. 'summary': ' ', //文档摘要 'title': '航天科工外部董事调研组到培训中心调研', //文档标题 'documentType': '信息', //文档类型，跟随分类类型，信息 | 数据 'appId': 'c295f34c-9ce1-4122-b795-820267e32b68', //栏目ID 'appName': '通知公告', //栏目名称 'appAlias': ' ', //栏目别名 'categoryId': '33fb19f0-0670-464d-875c-32fb86148f7a', //分类ID 'categoryName': '通知公告', //分类名称 'categoryAlias': '通知公告-通知公告', //分类别名 'form': 'dddefed4-4411-4e4e-b982-cdd4cd083443', //绑定的表单模板ID 'formName': '通知公告编辑表单', //绑定的表单模板名称 'importBatchName': ' ', //文件导入的批次号：一般是分类ID+时间缀 'readFormId': 'd6f1f596-fcb7-4a87-baaf-7f6cdafe3cec', //绑定的阅读表单模板ID 'readFormName': '通知公告阅读表单', //绑定的阅读表单模板名称 'creatorPerson': '李义@liyi@P', //创建人，可能为空，如果由系统创建。 'creatorIdentity': '李义@469d1601-c4a5-46ae-b7bf-4da9af07b6fa@I', //创建人Identity，可能为空，如果由系统创建。 'creatorUnitName': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //创建人组织，可能为空，如果由系统创建。 'creatorTopUnitName': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //创建人顶层组织，可能为空，如果由系统创建。 'docStatus': 'published', //文档状态: published | draft | checking | error 'description': ' ', //说明备注，可以填写说明信息，如导入信息检验失败原因等 'viewCount': 1, //文档被查看次数 'commendCount': 1, //文档被赞次数 'commentCount': 1, //文档评论次数 'publishTime': '2018-01-04 14:17:16', //文档发布时间 'modifyTime': '2021-07-05 19:18:03', //文档修改时间 'isTop': true, //是否置顶 'hasIndexPic': true, //是否含有首页图片 'reviewed': true, //是否已经更新review信息. 'sequenceTitle': ' ', //用于标题排序的sequence 'sequenceAppAlias': ' ', //用于栏目别名排序的sequence 'sequenceCategoryAlias': ' ', //用于分类别名排序的sequence 'sequenceCreatorPerson': ' ', //用于创建者排序的sequence 'sequenceCreatorUnitName': ' ', //用于创建者组织排序的sequence 'readPersonList': [ '张三@zhangsan@P' '所有人' ], //阅读人员 'readUnitList': [ ], //阅读组织 'readGroupList': [ ], //阅读群组 'authorPersonList': [ '张三@zhangsan@P' ], //作者人员 'authorUnitList': [ ], //作者组织 'authorGroupList': [ ], //作者群组 'remindPersonList': [ ' ' ], //发布提醒人员 'remindUnitList': [ ' ' ], //发布提醒组织 'remindGroupList': [ ' ' ], //发布提醒群组 'managerList': [ '张三@zhangsan@P' ], //管理者 'pictureList': [ ], //首页图片列表 'distributeFactor': 1, //分布式存储标识位. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03', //修改时间,自动生成,索引创建在约束中. 'sequence': ' ', //列表序号,由创建时间以及ID组成.在保存时自动生成,索引创建在约束中. } Source o2_core/o2/xScript/CMSEnvironment.js, line 45 static getControl() &rarr; {DocumentControl} 获取当前人对文档的权限。 Syntax var control = this.documentContext.getControl(); Returns DocumentControl 当前人对文档所拥有的权限. { 'allowRead': true, //是否允许阅读文档 'allowPublishDocument': true, //是否允许发布文档 'allowSave': true, //是否允许保存文档 'allowPopularDocument': true, //是否允许设置为热点 'allowEditDocument': true, //是否允许编辑文档 'allowDeleteDocument': true //是否允许删除文档 } Source o2_core/o2/xScript/CMSEnvironment.js, line 55 static getAttachmentList() &rarr; {Array.&lt;DocumentFileInfo>} 获取当前文档的附件对象列表。 Syntax var attachmentList = this.documentContext.getAttachmentList(); Returns Array.&lt;DocumentFileInfo> 当前文档的附件对象列表. { 'id': 'a5cc5858-cac5-445a-a0a5-888d224eb2f6', //数据库主键,自动生成. 'lastUpdateTime': '2021-07-05 19:18:03', //最后更新时间 'storage': ' ', //关联的存储名称. 'site': 'attachment_1', //附件框分类. 'name': '13145352_115454884000_2.jpg', //文件真实名称 'cloudId': ' ', //云文件ID 'fileName': ' ', //服务器上编码后的文件名,为了方便辨识带扩展名 'appId': 'c295f34c-9ce1-4122-b795-820267e32b68', //文件所属应用ID 'categoryId': '33fb19f0-0670-464d-875c-32fb86148f7a', //文件所属分类ID 'documentId': 'ca74cbef-2a7f-401a-80e3-577ac9839348', //文件所属文档ID 'fileType': ' ', //文件类别：云文件（CLOUD） | 附件(ATTACHMENT) 'fileExtType': ' ', //文件类别：PICTURE | WORD | EXCEL | PPT | ZIP | TXT | OTHER 'type': ' ', //根据流文件判断的文件类型. 'fileHost': ' ', //文件存储主机名 'filePath': ' ', //文件存储路径 'description': ' ', //文件说明 'creatorUid': 'XX@huqi@P', //创建者UID 'extension': 'jpg', //扩展名 'seqNumber': 1, //排序号 'length': 364507, //文件大小. 'text': ' ', //文本. 'readIdentityList': [ ' ' ], //可以访问的身份. 'readUnitList': [ ' ' ], //可以访问的组织. 'editIdentityList': [ ' ' ], //可以修改的用户. 'editUnitList': [ ' ' ], //可以修改的组织. 'controllerIdentityList': [ ' ' ], //可以管理的用户. 'controllerUnitList': [ ' ' ], //可以管理的组织. 'deepPath': true, //是否使用更深的路径. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/CMSEnvironment.js, line 72 Module documentContext 您可以通过documentContext获取内容管理实例相关的对象数据。 Usable Range CMS Example //您可以在内容管理表单中，通过this来获取当前实例的documentContext对象，如下： var context = this.documentContext; Source o2_core/o2/xScript/CMSEnvironment.js, line 35 Methods static getDocument() &rarr; {Document} 获取当前内容管理实例的文档对象：document对象。 Syntax var doc = this.documentContext.getDocument(); Returns Document 文档对象. { 'id': '3359aedd-c2d8-4d8c-b8b0-02507da1b3f4', //数据库主键,自动生成. 'summary': ' ', //文档摘要 'title': '航天科工外部董事调研组到培训中心调研', //文档标题 'documentType': '信息', //文档类型，跟随分类类型，信息 | 数据 'appId': 'c295f34c-9ce1-4122-b795-820267e32b68', //栏目ID 'appName': '通知公告', //栏目名称 'appAlias': ' ', //栏目别名 'categoryId': '33fb19f0-0670-464d-875c-32fb86148f7a', //分类ID 'categoryName': '通知公告', //分类名称 'categoryAlias': '通知公告-通知公告', //分类别名 'form': 'dddefed4-4411-4e4e-b982-cdd4cd083443', //绑定的表单模板ID 'formName': '通知公告编辑表单', //绑定的表单模板名称 'importBatchName': ' ', //文件导入的批次号：一般是分类ID+时间缀 'readFormId': 'd6f1f596-fcb7-4a87-baaf-7f6cdafe3cec', //绑定的阅读表单模板ID 'readFormName': '通知公告阅读表单', //绑定的阅读表单模板名称 'creatorPerson': '李义@liyi@P', //创建人，可能为空，如果由系统创建。 'creatorIdentity': '李义@469d1601-c4a5-46ae-b7bf-4da9af07b6fa@I', //创建人Identity，可能为空，如果由系统创建。 'creatorUnitName': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //创建人组织，可能为空，如果由系统创建。 'creatorTopUnitName': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //创建人顶层组织，可能为空，如果由系统创建。 'docStatus': 'published', //文档状态: published | draft | checking | error 'description': ' ', //说明备注，可以填写说明信息，如导入信息检验失败原因等 'viewCount': 1, //文档被查看次数 'commendCount': 1, //文档被赞次数 'commentCount': 1, //文档评论次数 'publishTime': '2018-01-04 14:17:16', //文档发布时间 'modifyTime': '2021-07-05 19:18:03', //文档修改时间 'isTop': true, //是否置顶 'hasIndexPic': true, //是否含有首页图片 'reviewed': true, //是否已经更新review信息. 'sequenceTitle': ' ', //用于标题排序的sequence 'sequenceAppAlias': ' ', //用于栏目别名排序的sequence 'sequenceCategoryAlias': ' ', //用于分类别名排序的sequence 'sequenceCreatorPerson': ' ', //用于创建者排序的sequence 'sequenceCreatorUnitName': ' ', //用于创建者组织排序的sequence 'readPersonList': [ '张三@zhangsan@P' '所有人' ], //阅读人员 'readUnitList': [ ], //阅读组织 'readGroupList': [ ], //阅读群组 'authorPersonList': [ '张三@zhangsan@P' ], //作者人员 'authorUnitList': [ ], //作者组织 'authorGroupList': [ ], //作者群组 'remindPersonList': [ ' ' ], //发布提醒人员 'remindUnitList': [ ' ' ], //发布提醒组织 'remindGroupList': [ ' ' ], //发布提醒群组 'managerList': [ '张三@zhangsan@P' ], //管理者 'pictureList': [ ], //首页图片列表 'distributeFactor': 1, //分布式存储标识位. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03', //修改时间,自动生成,索引创建在约束中. 'sequence': ' ', //列表序号,由创建时间以及ID组成.在保存时自动生成,索引创建在约束中. } Source o2_core/o2/xScript/CMSEnvironment.js, line 45 static getControl() &rarr; {DocumentControl} 获取当前人对文档的权限。 Syntax var control = this.documentContext.getControl(); Returns DocumentControl 当前人对文档所拥有的权限. { 'allowRead': true, //是否允许阅读文档 'allowPublishDocument': true, //是否允许发布文档 'allowSave': true, //是否允许保存文档 'allowPopularDocument': true, //是否允许设置为热点 'allowEditDocument': true, //是否允许编辑文档 'allowDeleteDocument': true //是否允许删除文档 } Source o2_core/o2/xScript/CMSEnvironment.js, line 55 static getAttachmentList() &rarr; {Array.&lt;DocumentFileInfo>} 获取当前文档的附件对象列表。 Syntax var attachmentList = this.documentContext.getAttachmentList(); Returns Array.&lt;DocumentFileInfo> 当前文档的附件对象列表. { 'id': 'a5cc5858-cac5-445a-a0a5-888d224eb2f6', //数据库主键,自动生成. 'lastUpdateTime': '2021-07-05 19:18:03', //最后更新时间 'storage': ' ', //关联的存储名称. 'site': 'attachment_1', //附件框分类. 'name': '13145352_115454884000_2.jpg', //文件真实名称 'cloudId': ' ', //云文件ID 'fileName': ' ', //服务器上编码后的文件名,为了方便辨识带扩展名 'appId': 'c295f34c-9ce1-4122-b795-820267e32b68', //文件所属应用ID 'categoryId': '33fb19f0-0670-464d-875c-32fb86148f7a', //文件所属分类ID 'documentId': 'ca74cbef-2a7f-401a-80e3-577ac9839348', //文件所属文档ID 'fileType': ' ', //文件类别：云文件（CLOUD） | 附件(ATTACHMENT) 'fileExtType': ' ', //文件类别：PICTURE | WORD | EXCEL | PPT | ZIP | TXT | OTHER 'type': ' ', //根据流文件判断的文件类型. 'fileHost': ' ', //文件存储主机名 'filePath': ' ', //文件存储路径 'description': ' ', //文件说明 'creatorUid': 'XX@huqi@P', //创建者UID 'extension': 'jpg', //扩展名 'seqNumber': 1, //排序号 'length': 364507, //文件大小. 'text': ' ', //文本. 'readIdentityList': [ ' ' ], //可以访问的身份. 'readUnitList': [ ' ' ], //可以访问的组织. 'editIdentityList': [ ' ' ], //可以修改的用户. 'editUnitList': [ ' ' ], //可以修改的组织. 'controllerIdentityList': [ ' ' ], //可以管理的用户. 'controllerUnitList': [ ' ' ], //可以管理的组织. 'deepPath': true, //是否使用更深的路径. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/CMSEnvironment.js, line 72 "},"module-form.html":{"id":"module-form.html","url":"module-form.html","title":"form","kind":"Module","body":" Module form form对象可在流程表单或内容管理表单中可用。（仅前端脚本可用）。 Usable Range Process CMS Syntax //您可以在流程表单和内容管理的前端脚本中，通过this来获取form对象，如下： var form = this.form; Source o2_core/o2/xScript/Environment.js, line 2191 Members static readonly 获取表单是否可编辑。只读。 Syntax var readonly = this.form.readonly; Source o2_core/o2/xScript/Environment.js, line 2269 static currentRouteName 在用户提交的时候，选择的路由。仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var currentRouteName = this.form.currentRouteName; Source o2_core/o2/xScript/Environment.js, line 3153 static opinion 在用户提交的时候，输入的意见。仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var opinion = this.form.opinion; Source o2_core/o2/xScript/Environment.js, line 3164 static medias 在提交的时候，用户的手写意见以及录音意见，仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var medias = this.form.medias; Source o2_core/o2/xScript/Environment.js, line 3175 Methods static publish(callback) 发布当前文档。（仅内容管理表单中可用） Syntax this.form.publish( callback ); Parameters callback function 发布后的回调方法 Source o2_core/o2/xScript/CMSEnvironment.js, line 1594 static getInfor() &rarr; {Object} 获取当前表单的基本信息。 Syntax var form = this.form.getInfor(); Returns Object 表单的基本信息. { 'id': 'db3b2766-93a1-4058-b522-0edb922bd84f', //表单ID 'name': '报销申请表单', //表单名称 'alias': '报销申请表单', //表单别名 'description': '', //表单描述 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'lastUpdatePerson': 'XX@huqi@P', //最后修改人 'lastUpdateTime': '2018-09-30 22:46:30', //最后修改时间 'icon': '...', //表单图标 } Source o2_core/o2/xScript/Environment.js, line 2201 static getApp() &rarr; {x_component_process_Work} 获取打开当前文档的component对象。平台中每一个窗口应用，就是一个component对象。此处获取到的对象为x_component_process_Work。 Syntax var app = this.form.getApp(); Returns x_component_process_Work 打开当前文档的component对象. Example var app = this.form.getApp(); //所有component对象都有以下方法。 app.openInNewWindow(); //在新窗口中打开当前应用 app.setCurrent(); //将当前应用设置为激活状态 app.minSize(); //应用窗口最小化 app.maxSize(); //应用窗口最大化 app.restoreSize(); //应用窗口还原 app.refresh(); //刷新应用 app.close(); //关闭应用 app.setTitle(str); //设置应用标题 app.dialog(option); //弹出一个对话框（详见MWF.widget.Dialog） //显示一个通知消息 app.notice(content, type, target, where, offset); //显示一个确认框 app.confirm(type, e, title, text, width, height, ok, cancel); //弹出一个信息框 app.alert(type, e, title, text, width, height); //为应用绑定一个事件 app.addEvent(type, fun); Source o2_core/o2/xScript/Environment.js, line 2223 static node() &rarr; {HTMLDivElement} 获取Form对应的DOM对象。 Syntax var node = this.form.node(); Returns HTMLDivElement 当前form对应的div对象. Source o2_core/o2/xScript/Environment.js, line 2259 static get(name) &rarr; {FormComponent} 获取表单元素对象。 Actionbar(操作条)Address(地址输入框)Attachment(附件框)Button(按钮) Calendar(日期输入框)Checkbox(多选按钮)Combox(组合框)Datagrid(数据网格) Div(容器)Htmleditor(富文本编辑框)Html(内置html)Iframe(嵌入Iframe) Image(图片)Label(文本)Log(流程意见)Monitor(流程监控) Number(数字输入框)Office(office控件)Opinion(意见框)Org(人员组织选择) Radio(单选按钮)Select(选择框)Sidebar(侧边操作条)Stat(统计组件) Subform(子表单)Tab(分页)Table(表格)Textarea(多行输入) Textfield(文本输入框)Tree(树状控件)View(视图组件)ViewSelector(视图选择组件) Documenteditor(公文编辑器)ImageClipper(图片编辑器) Syntax var field = this.form.get(name); Parameters name String 字段标识 Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example var field = this.form.get('subject'); Source o2_core/o2/xScript/Environment.js, line 2279 static getField(name) &rarr; {FormComponent} 获取表单中可输入的字段元素对象。 Address(地址输入框)Attachment(附件框)Calendar(日期输入框)Checkbox(多选按钮) Combox(组合框)Datagrid(数据网格)Htmleditor(富文本编辑框)Number(数字输入框) Org(人员组织选择)Radio(单选按钮)Select(选择框)Textarea(多行输入) Textfield(文本输入框) Syntax var field = this.form.getField(name); Parameters name String 字段标识 Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example var field = this.form.getField('subject'); Source o2_core/o2/xScript/Environment.js, line 2303 static getData() &rarr; {Object} 获取业务数据 Syntax var data = this.form.getData(); See module:data Returns Object 返回表单绑定的业务数据。 Source o2_core/o2/xScript/Environment.js, line 2325 static save(callbackopt, silentopt) 保存当前表单所绑定的业务数据。 this.form.save()会触发 beforeSave和afterSave事件，因此在beforeSave和afterSave中不允许使用本方法。 Syntax this.form.save(callback, silent); Parameters callback function &lt;optional&gt; 保存后的回调 silent Boolean &lt;optional&gt; 是否静默，否提示保存成功，默认为false Example this.form.save(function(){ //do someting }, true); Source o2_core/o2/xScript/Environment.js, line 2335 static close() 关闭当前表单 Example this.form.close(); Source o2_core/o2/xScript/Environment.js, line 2350 static pauseTask() 挂起当前待办 Example this.form.pauseTask(); Source o2_core/o2/xScript/Environment.js, line 2359 static resumeTask() 将待办从挂起状态恢复为正常状态 Example this.form.resumeTask(); Source o2_core/o2/xScript/Environment.js, line 2368 static verify() &rarr; {Boolean} Summary 根据表单中所有组件的校验设置和“流转校验”脚本进行校验。 Description 本校验不包括校验意见，校验路由；通常用在弹出提交界面时候的校验 Syntax this.form.verify() Returns Boolean 是否通过校验 Example if( !this.form.verify() ){ return false; } Source o2_core/o2/xScript/Environment.js, line 2377 static process(optionopt) 对当前表单打开的流程实例进行流转。（仅流程表单中可用） 可以通过this.workContext.getControl().allowProcessing来判断当前用户是否有权限进行流转。 this.form.process()会触发 beforeSave、afterSave、beforeProcess、afterProcess事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 流程的相关数据，如果不带此参数，则弹出路由选择和意见填写框 格式如下： { &quot;routeName&quot;: &quot;&quot;, //流转到下一步要选择的路由名称 &quot;opinion&quot;: &quot;&quot;, //流转意见 &quot;callback&quot;: function(){} //流转完成后的回调方法 } Examples //不带参数，弹出路由选择和意见填写框 this.form.process(); //带参数，流转 this.form.process({ 'routeName': '送审批', 'opinion': '同意', 'callback': function(json){ this.form.notice('process success', 'success'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2395 static reset(optionopt) 对当前文档的待办重新设定处理人。（仅流程表单中可用） 可以通过this.workContext.getControl().allowReset来判断当前用户是否有权限重置处理人。 this.form.reset()会触发 beforeReset、afterReset事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 进行重置处理人的相关参数，如果不带此参数，弹出重置处理人对话框 格式如下： { &quot;names&quot;: &quot;&quot;, //{Array|String} 要重置给哪些身份 &quot;opinion&quot;: &quot;&quot;, //流转意见 &quot;success &quot;: function(){}, //重置成功后的回调方法 &quot;failure &quot;: function(){} //重置失败后的回调方法 } Examples //不带参数，弹出重置处理人对话框 this.form.reset(); //带参数，直接调用后台服务重置 this.form.reset({ 'names': ['张三(综合部)'], 'opinion': '授权处理', 'success': function(json){ this.form.notice('reset success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('reset failure:'+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2433 static retract(optionopt) 撤回文档操作，上一个处理人收回已经流转下去的文件。（仅流程表单中可用） 这个操作只允许上一个处理人在流转文件之后，下一个处理人未处理的时候执行。 可以通过this.workContext.getControl().allowRetract来判断当前用户是否有权限撤回。 this.form.retract()会触发 beforeRetract、afterRetract事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 进行撤回的相关参数，如果不提供option参数，则弹出撤回对话框。 格式如下： { &quot;success &quot;: function(){}, //撤回成功后的回调方法 &quot;failure &quot;: function(){} //撤回失败后的回调方法 } Examples //不带参数，则弹出撤回对话框 this.form.retract(); //带参数，直接调用后台服务撤回 this.form.retract({ 'success': function(json){ this.form.notice('retract success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('retract failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2475 static addSplit(optionopt) 在已拆分的工作上添加分支。（仅流程表单中可用） 可以通过this.workContext.getControl().allowAddSplit来判断当前用户是否有权限。 Parameters option Object &lt;optional&gt; 添加分支的相关参数，如果不提供option参数，则弹出添加分支对话框。 格式如下： { &quot;value&quot; : [], //splitValueList 添加的拆分值，拆分值取决于流程拆分节点的设置 &quot;trimExist&quot; : true, //排除已经存在的拆分值. &quot;success &quot;: function(){}, //执行成功后的回调方法 &quot;failure &quot;: function(){} //执行失败后的回调方法 } Examples //不带参数，则弹出添加分支对话框 this.form.addSplit(); //带参数，直接添加分支 this.form.addSplit({ 'value' : ['开发部@kfb@U'], 'trimExist' : true, 'success': function(json){ this.form.notice('addSplit success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('addSplit failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2514 static deleteWork(optionopt) 删除当前工作文档。（仅流程表单中可用） 可以通过this.workContext.getControl().allowDeleteWork来判断当前用户是否有权限删除文档。 Parameters option Object &lt;optional&gt; 删除相关参数，如果不提供option参数，则弹出删除对话框。 格式如下： { &quot;success &quot;: function(){}, //执行成功后的回调方法 &quot;failure &quot;: function(){} //执行失败后的回调方法 } Examples //不带参数，则弹出删除提示对话框 this.form.deleteWork(); //带参数，直接调用服务删除 this.form.deleteWork({ 'success': function(json){ this.form.notice('deleteWork success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('deleteWork failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2564 static confirm(type, title, text, width, height, ok, cancel) 弹出一个确认框，带确认和关闭按钮 Parameters type String 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 title String 确认框标题栏显示文本。 text String 确认框的内容显示文本。 width Number 确认框的宽度。 height String 确认框的高度。 ok function 点击“确定”按钮后的回调函数。 cancel function 点击“取消”按钮后的回调函数。 Example this.form.confirm('wran', '删除确认', '您确定要删除吗？', 300, 100,function(){ //执行删除代码 this.close(); }, function(){ this.close(); }); Source o2_core/o2/xScript/Environment.js, line 2601 static alert(type, title, text, width, height) 弹出一个带关闭按钮的信息框 Parameters type String 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 title String 信息框标题栏显示文本。 text String 信息框的内容显示文本。 width Number 信息框宽度。 height String 信息框的高度。 Example this.form.alert('wran', '必填提醒', '请填写标题！', 300, 100); Source o2_core/o2/xScript/Environment.js, line 2642 static notice(content, typeopt, targetopt, whereopt, offsetopt, optionopt) 弹出一个提示框 Parameters content String 要显示的信息文本 type String &lt;optional&gt; 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 target Element &lt;optional&gt; 信息框显示位置的参考DOM对象。 where Object &lt;optional&gt; 信息框显示相对于target的x轴和y轴位置。 如： {&quot;x&quot;: &quot;center&quot;, &quot;y&quot;: &quot;center&quot;} x : 　水平位置，可用“left”、“right”和“center”；可以用数组定义外部（outside）位置和内部（inside）位置，如：['right', 'inside'] y : 　垂直位置，可用“top”、“bottom”和“center”；可以用数组定义外部（outside）位置和内部（inside）位置，如：['top', 'outside']。 offset Object &lt;optional&gt; 相对位置的偏移量，允许负值。如：{&quot;x&quot;: 10, &quot;y&quot;: -10} option Object &lt;optional&gt; 其他选项。如： { delayClose: 5000 } 在5秒后关闭 Example this.form.notice('this is my information', 'info'); Source o2_core/o2/xScript/Environment.js, line 2657 static addEvent(type, event) 给表单添加事件。 Parameters type String 事件名称，参考本API Classer-&gt;FormComponents-&gt;Form的事件 event function 事件方法。 Example this.form.addEvent('load', function(){ this.form.notice('表单载入完成', 'success'); }.bind(this)); Source o2_core/o2/xScript/Environment.js, line 2678 static print(applicationopt, formopt) 用一个新的浏览器窗口来打开当前文档，用于打印。（仅流程表单中可用） 如不指定表单，则使用表单设计中指定的打印表单。 Parameters application String &lt;optional&gt; 指定表单所在的流程应用ID或名称。省略此参数表示当前应用。 form String &lt;optional&gt; 指定表单ID或名称。 Examples //在新窗口中使用当前表单中配置的打印表单打开当前文档 this.form.print(); //在新窗口中使用“订单打印表单”表单打开当前文档 this.form.print('订单打印表单'); //在新窗口中使用“订单管理”应用中的“订单打印表单”表单打开当前文档 this.form.print('订单管理', '订单打印表单'); Source o2_core/o2/xScript/Environment.js, line 2690 static openWindow(applicationopt, formopt) 同print方法。（仅流程表单中可用） Parameters application String &lt;optional&gt; 指定表单所在的流程应用ID或名称。省略此参数表示当前应用。 form String &lt;optional&gt; 指定表单ID或名称。 See this.form.print() Example this.form.openWindow(); Source o2_core/o2/xScript/Environment.js, line 2716 static openWork(workIdopt, workCompletedIdopt, titleopt) 打开一个在流转或已完成的流程实例。 Parameters workId String &lt;optional&gt; 在流转的流程实例ID。workId和workCompletedId两个参数必须提供其中一个 workCompletedId String &lt;optional&gt; 已完成的流程实例ID。 title String &lt;optional&gt; 手机端打开时的窗口标题。 Example this.form.openWork(id, '', 'work title'); Source o2_core/o2/xScript/Environment.js, line 2735 static openJob(id, choiceopt) 使用流程的jobId打开工作。 Parameters id String 流程的jobId，如果流程拆分后，有多个流程实例（workId会有多个），但jobId是唯一的。 choice Boolean &lt;optional&gt; 如果有多个流程实例，是否弹出界面选择。如果传入false,则直接打开第一个工作。 Example this.form.openJob(jobId, true); Source o2_core/o2/xScript/Environment.js, line 2753 static openDocument(id, titleopt, optionsopt) 打开一个内容管理文档。 Parameters id String 内容管理文档实例的ID。 title Boolean &lt;optional&gt; 手机APP端打开时的窗口标题。 options Object &lt;optional&gt; 其他参数，内容如下 { 'readonly': true, //是否以只读方式打开，默认为true 'forceFormId': 'xxxxxx', //不管编辑还是阅读都用此表单id打开，优先使用。6.0版本之前使用 printFormId。 'readFormId': 'xxxxxx', //强制的阅读表单id，优先于表单的readFormId。6.0版本之前使用 formId。 'editFormId': 'xxxxxx', //强制的编辑表单id，优先于表单的formId。6.0版本之前使用 formEditId。 'saveOnClose' : true, //关闭的时候是否自动保存 'onPostPublish' : function( documentData ){ //发布前执行方法，但数据已经准备好，该事件在桌面模式打开有效 //documentData 为文档数据 }, 'onAfterPublish' : function( form, documentData ){ //发布后执行的方法，该事件在桌面模式打开有效 //form为内容管理Form对象，documentData 为文档数据 }, 'onPostDelete' : function(){ //删除文档后执行的方法，该事件在桌面模式打开有效 } } Example this.form.openDocument(id, 'document title'); Source o2_core/o2/xScript/Environment.js, line 2860 static openPortal(portal, pageopt, paropt) 打开一个门户页面。 Parameters portal String 要打开的门户应用名称、别名或ID。 page String &lt;optional&gt; 要打开的页面名称、别名或ID。如果忽略，则打开门户的默认首页 par Object &lt;optional&gt; 打开页面可以传入参数。在被打开的页面中，可以通过脚本this.page.parameters访问到此参数。 Example this.form.openPortal(id, '', {'type': 'my type'}); Source o2_core/o2/xScript/Environment.js, line 2891 static openCMS(name) 打开一个内容管理栏目（应用）。 Parameters name String 内容管理栏目的名称、别名或ID。 Example this.form.openCMS('通知公告'); Source o2_core/o2/xScript/Environment.js, line 2927 static openProcess(name) 打开一个流程应用。 Parameters name String 流程应用的名称、别名或ID。 Example this.form.openProcess('财务审批'); Source o2_core/o2/xScript/Environment.js, line 2946 static openApplication(name, optionsopt) 打开任意一个component应用。 Parameters name String 要打开的component的名称。component对应的名称可以在“控制面板-系统设置-界面设置-模块部署”中找到（即“组件路径”）。 options Object &lt;optional&gt; 打开的component的相关参数 Examples //打开会议管理 this.form.openApplication('Meeting'); //打开一个流转中的流程实例。与 this.form.openWork(id, '', 'work title');效果相同 this.form.openApplication('process.Work', { 'workId': id, //流程实例ID 'width': '1200', //宽度 'height': '800', //高度 'docTitle': 'work title', //APP端窗口标题 'appId': 'process.Work'+id //给新打开的component实例一个唯一名称 }); Source o2_core/o2/xScript/Environment.js, line 2965 static createDocument(columnOrOptionsopt, categoryopt, dataopt, identityopt, callbackopt, targetopt, latestopt, selectColumnEnableopt, ignoreTitleopt) 创建一条内容管理文档。 Parameters columnOrOptions String | Object &lt;optional&gt; 如果不传参数，则弹出范围为平台所有栏目的选择界面。 当使用String时为内容管理应用（栏目）的名称、别名或ID。 当使用Object时，本参数后面的参数省略，传入如下格式的内容: { 'column' : column, //（string）可选，内容管理应用（栏目）的名称、别名或ID 'category' : category, //（string）可选，要创建的文档所属的分类的名称、别名或ID 'data' : data, //（json object）可选，创建文档时默认的业务数据 'identity' : identity, //（string）可选，创建文档所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 'callback' : callback, //（funcation）可选，文档创建后的回调函数。 'target' : target, //（boolean）可选，为true时，在当前页面打开创建的文档；否则打开新窗口。默认false。 'latest' : latest, //（boolean）可选，为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 'selectColumnEnable' : selectColumnEnable, //（boolean）可选，是否可以选择应用和分类进行创建文档。有category参数时为默认false,否则默认为true。 'ignoreTitle' : ignoreTitle //（boolean）可选，值为false时，创建的时候需要强制填写标题，默认为false。 } category String &lt;optional&gt; 要创建的文档所属的分类的名称、别名或ID data Object &lt;optional&gt; 创建文档时默认的业务数据 identity String &lt;optional&gt; 可选，创建文档所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 callback function &lt;optional&gt; 文档创建后的回调函数 target Boolean &lt;optional&gt; 为true时，在当前页面打开创建的文档；否则打开新窗口。默认false latest Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 selectColumnEnable Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 ignoreTitle Boolean &lt;optional&gt; 值为false时，创建的时候需要强制填写标题，默认为false。 Examples //启动一个通知公告 this.form.createDocument('', '通知公告'); //启动一个通知公告，标题为：关于XX的通知，启动后提示 this.form.createDocument('', '通知公告', {'subject': '关于XX的通知'}, function(json){ this.form.notice('创建成功!', 'success'); }.bind(this)); //启动一个通知公告，标题为：关于XX的通知，启动后提示 this.form.createDocument({ category : '通知公告', data : {'subject': '关于XX的通知'}, callback : function(json){ this.form.notice('创建成功!', 'success'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2987 static startProcess(app, process, dataopt, identityopt, callbackopt, targetopt, latestopt) 启动一个流程实例。 Parameters app String 流程应用的名称、别名或ID。 process String 要启动的流程的名称、别名或ID。 data Object &lt;optional&gt; 流程启动时默认的业务数据。 identity String &lt;optional&gt; 流程启动所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 callback function &lt;optional&gt; 流程启动后的回调函数。 target Boolean &lt;optional&gt; 为true时，在当前页面打开启动的流程实例；否则打开新窗口。默认false。 latest Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此流程的实例，并且没有流转过，直接调用此实例为新流程实例；否则创建一个新实例。默认false。 Examples //启动一个发文管理实例 this.form.startProcess('公文管理', '发文管理'); //启动一个发文管理实例，标题为：my file title，启动后提示 this.form.startProcess('公文管理', '发文管理', {'title': 'my file title'}, function(json){ this.form.notice('create file success!', 'success'); }); Source o2_core/o2/xScript/Environment.js, line 3080 Module form form对象可在流程表单或内容管理表单中可用。（仅前端脚本可用）。 Usable Range Process CMS Syntax //您可以在流程表单和内容管理的前端脚本中，通过this来获取form对象，如下： var form = this.form; Source o2_core/o2/xScript/Environment.js, line 2191 Members static readonly 获取表单是否可编辑。只读。 Syntax var readonly = this.form.readonly; Source o2_core/o2/xScript/Environment.js, line 2269 static currentRouteName 在用户提交的时候，选择的路由。仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var currentRouteName = this.form.currentRouteName; Source o2_core/o2/xScript/Environment.js, line 3153 static opinion 在用户提交的时候，输入的意见。仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var opinion = this.form.opinion; Source o2_core/o2/xScript/Environment.js, line 3164 static medias 在提交的时候，用户的手写意见以及录音意见，仅在表单的“校验意见”和“校验路由”脚本中可用。只读。（仅流程表单中可用）。 Syntax var medias = this.form.medias; Source o2_core/o2/xScript/Environment.js, line 3175 Methods static publish(callback) 发布当前文档。（仅内容管理表单中可用） Syntax this.form.publish( callback ); Parameters callback function 发布后的回调方法 Source o2_core/o2/xScript/CMSEnvironment.js, line 1594 static getInfor() &rarr; {Object} 获取当前表单的基本信息。 Syntax var form = this.form.getInfor(); Returns Object 表单的基本信息. { 'id': 'db3b2766-93a1-4058-b522-0edb922bd84f', //表单ID 'name': '报销申请表单', //表单名称 'alias': '报销申请表单', //表单别名 'description': '', //表单描述 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'lastUpdatePerson': 'XX@huqi@P', //最后修改人 'lastUpdateTime': '2018-09-30 22:46:30', //最后修改时间 'icon': '...', //表单图标 } Source o2_core/o2/xScript/Environment.js, line 2201 static getApp() &rarr; {x_component_process_Work} 获取打开当前文档的component对象。平台中每一个窗口应用，就是一个component对象。此处获取到的对象为x_component_process_Work。 Syntax var app = this.form.getApp(); Returns x_component_process_Work 打开当前文档的component对象. Example var app = this.form.getApp(); //所有component对象都有以下方法。 app.openInNewWindow(); //在新窗口中打开当前应用 app.setCurrent(); //将当前应用设置为激活状态 app.minSize(); //应用窗口最小化 app.maxSize(); //应用窗口最大化 app.restoreSize(); //应用窗口还原 app.refresh(); //刷新应用 app.close(); //关闭应用 app.setTitle(str); //设置应用标题 app.dialog(option); //弹出一个对话框（详见MWF.widget.Dialog） //显示一个通知消息 app.notice(content, type, target, where, offset); //显示一个确认框 app.confirm(type, e, title, text, width, height, ok, cancel); //弹出一个信息框 app.alert(type, e, title, text, width, height); //为应用绑定一个事件 app.addEvent(type, fun); Source o2_core/o2/xScript/Environment.js, line 2223 static node() &rarr; {HTMLDivElement} 获取Form对应的DOM对象。 Syntax var node = this.form.node(); Returns HTMLDivElement 当前form对应的div对象. Source o2_core/o2/xScript/Environment.js, line 2259 static get(name) &rarr; {FormComponent} 获取表单元素对象。 Actionbar(操作条)Address(地址输入框)Attachment(附件框)Button(按钮) Calendar(日期输入框)Checkbox(多选按钮)Combox(组合框)Datagrid(数据网格) Div(容器)Htmleditor(富文本编辑框)Html(内置html)Iframe(嵌入Iframe) Image(图片)Label(文本)Log(流程意见)Monitor(流程监控) Number(数字输入框)Office(office控件)Opinion(意见框)Org(人员组织选择) Radio(单选按钮)Select(选择框)Sidebar(侧边操作条)Stat(统计组件) Subform(子表单)Tab(分页)Table(表格)Textarea(多行输入) Textfield(文本输入框)Tree(树状控件)View(视图组件)ViewSelector(视图选择组件) Documenteditor(公文编辑器)ImageClipper(图片编辑器) Syntax var field = this.form.get(name); Parameters name String 字段标识 Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example var field = this.form.get('subject'); Source o2_core/o2/xScript/Environment.js, line 2279 static getField(name) &rarr; {FormComponent} 获取表单中可输入的字段元素对象。 Address(地址输入框)Attachment(附件框)Calendar(日期输入框)Checkbox(多选按钮) Combox(组合框)Datagrid(数据网格)Htmleditor(富文本编辑框)Number(数字输入框) Org(人员组织选择)Radio(单选按钮)Select(选择框)Textarea(多行输入) Textfield(文本输入框) Syntax var field = this.form.getField(name); Parameters name String 字段标识 Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example var field = this.form.getField('subject'); Source o2_core/o2/xScript/Environment.js, line 2303 static getData() &rarr; {Object} 获取业务数据 Syntax var data = this.form.getData(); See module:data Returns Object 返回表单绑定的业务数据。 Source o2_core/o2/xScript/Environment.js, line 2325 static save(callbackopt, silentopt) 保存当前表单所绑定的业务数据。 this.form.save()会触发 beforeSave和afterSave事件，因此在beforeSave和afterSave中不允许使用本方法。 Syntax this.form.save(callback, silent); Parameters callback function &lt;optional&gt; 保存后的回调 silent Boolean &lt;optional&gt; 是否静默，否提示保存成功，默认为false Example this.form.save(function(){ //do someting }, true); Source o2_core/o2/xScript/Environment.js, line 2335 static close() 关闭当前表单 Example this.form.close(); Source o2_core/o2/xScript/Environment.js, line 2350 static pauseTask() 挂起当前待办 Example this.form.pauseTask(); Source o2_core/o2/xScript/Environment.js, line 2359 static resumeTask() 将待办从挂起状态恢复为正常状态 Example this.form.resumeTask(); Source o2_core/o2/xScript/Environment.js, line 2368 static verify() &rarr; {Boolean} Summary 根据表单中所有组件的校验设置和“流转校验”脚本进行校验。 Description 本校验不包括校验意见，校验路由；通常用在弹出提交界面时候的校验 Syntax this.form.verify() Returns Boolean 是否通过校验 Example if( !this.form.verify() ){ return false; } Source o2_core/o2/xScript/Environment.js, line 2377 static process(optionopt) 对当前表单打开的流程实例进行流转。（仅流程表单中可用） 可以通过this.workContext.getControl().allowProcessing来判断当前用户是否有权限进行流转。 this.form.process()会触发 beforeSave、afterSave、beforeProcess、afterProcess事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 流程的相关数据，如果不带此参数，则弹出路由选择和意见填写框 格式如下： { &quot;routeName&quot;: &quot;&quot;, //流转到下一步要选择的路由名称 &quot;opinion&quot;: &quot;&quot;, //流转意见 &quot;callback&quot;: function(){} //流转完成后的回调方法 } Examples //不带参数，弹出路由选择和意见填写框 this.form.process(); //带参数，流转 this.form.process({ 'routeName': '送审批', 'opinion': '同意', 'callback': function(json){ this.form.notice('process success', 'success'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2395 static reset(optionopt) 对当前文档的待办重新设定处理人。（仅流程表单中可用） 可以通过this.workContext.getControl().allowReset来判断当前用户是否有权限重置处理人。 this.form.reset()会触发 beforeReset、afterReset事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 进行重置处理人的相关参数，如果不带此参数，弹出重置处理人对话框 格式如下： { &quot;names&quot;: &quot;&quot;, //{Array|String} 要重置给哪些身份 &quot;opinion&quot;: &quot;&quot;, //流转意见 &quot;success &quot;: function(){}, //重置成功后的回调方法 &quot;failure &quot;: function(){} //重置失败后的回调方法 } Examples //不带参数，弹出重置处理人对话框 this.form.reset(); //带参数，直接调用后台服务重置 this.form.reset({ 'names': ['张三(综合部)'], 'opinion': '授权处理', 'success': function(json){ this.form.notice('reset success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('reset failure:'+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2433 static retract(optionopt) 撤回文档操作，上一个处理人收回已经流转下去的文件。（仅流程表单中可用） 这个操作只允许上一个处理人在流转文件之后，下一个处理人未处理的时候执行。 可以通过this.workContext.getControl().allowRetract来判断当前用户是否有权限撤回。 this.form.retract()会触发 beforeRetract、afterRetract事件，因此在上述事件中不允许使用本方法。 Parameters option Object &lt;optional&gt; 进行撤回的相关参数，如果不提供option参数，则弹出撤回对话框。 格式如下： { &quot;success &quot;: function(){}, //撤回成功后的回调方法 &quot;failure &quot;: function(){} //撤回失败后的回调方法 } Examples //不带参数，则弹出撤回对话框 this.form.retract(); //带参数，直接调用后台服务撤回 this.form.retract({ 'success': function(json){ this.form.notice('retract success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('retract failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2475 static addSplit(optionopt) 在已拆分的工作上添加分支。（仅流程表单中可用） 可以通过this.workContext.getControl().allowAddSplit来判断当前用户是否有权限。 Parameters option Object &lt;optional&gt; 添加分支的相关参数，如果不提供option参数，则弹出添加分支对话框。 格式如下： { &quot;value&quot; : [], //splitValueList 添加的拆分值，拆分值取决于流程拆分节点的设置 &quot;trimExist&quot; : true, //排除已经存在的拆分值. &quot;success &quot;: function(){}, //执行成功后的回调方法 &quot;failure &quot;: function(){} //执行失败后的回调方法 } Examples //不带参数，则弹出添加分支对话框 this.form.addSplit(); //带参数，直接添加分支 this.form.addSplit({ 'value' : ['开发部@kfb@U'], 'trimExist' : true, 'success': function(json){ this.form.notice('addSplit success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('addSplit failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2514 static deleteWork(optionopt) 删除当前工作文档。（仅流程表单中可用） 可以通过this.workContext.getControl().allowDeleteWork来判断当前用户是否有权限删除文档。 Parameters option Object &lt;optional&gt; 删除相关参数，如果不提供option参数，则弹出删除对话框。 格式如下： { &quot;success &quot;: function(){}, //执行成功后的回调方法 &quot;failure &quot;: function(){} //执行失败后的回调方法 } Examples //不带参数，则弹出删除提示对话框 this.form.deleteWork(); //带参数，直接调用服务删除 this.form.deleteWork({ 'success': function(json){ this.form.notice('deleteWork success', 'success'); }.bind(this), 'failure': function(xhr, text, error){ //xhr--HttpRequest请求对象 //text--HttpResponse内容文本 //error--错误信息 this.form.notice('deleteWork failure: '+error, 'error'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2564 static confirm(type, title, text, width, height, ok, cancel) 弹出一个确认框，带确认和关闭按钮 Parameters type String 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 title String 确认框标题栏显示文本。 text String 确认框的内容显示文本。 width Number 确认框的宽度。 height String 确认框的高度。 ok function 点击“确定”按钮后的回调函数。 cancel function 点击“取消”按钮后的回调函数。 Example this.form.confirm('wran', '删除确认', '您确定要删除吗？', 300, 100,function(){ //执行删除代码 this.close(); }, function(){ this.close(); }); Source o2_core/o2/xScript/Environment.js, line 2601 static alert(type, title, text, width, height) 弹出一个带关闭按钮的信息框 Parameters type String 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 title String 信息框标题栏显示文本。 text String 信息框的内容显示文本。 width Number 信息框宽度。 height String 信息框的高度。 Example this.form.alert('wran', '必填提醒', '请填写标题！', 300, 100); Source o2_core/o2/xScript/Environment.js, line 2642 static notice(content, typeopt, targetopt, whereopt, offsetopt, optionopt) 弹出一个提示框 Parameters content String 要显示的信息文本 type String &lt;optional&gt; 要显示的信息类型。可选值：success 成功，info :信息，error :错误， wran : 警告 target Element &lt;optional&gt; 信息框显示位置的参考DOM对象。 where Object &lt;optional&gt; 信息框显示相对于target的x轴和y轴位置。 如： {&quot;x&quot;: &quot;center&quot;, &quot;y&quot;: &quot;center&quot;} x : 　水平位置，可用“left”、“right”和“center”；可以用数组定义外部（outside）位置和内部（inside）位置，如：['right', 'inside'] y : 　垂直位置，可用“top”、“bottom”和“center”；可以用数组定义外部（outside）位置和内部（inside）位置，如：['top', 'outside']。 offset Object &lt;optional&gt; 相对位置的偏移量，允许负值。如：{&quot;x&quot;: 10, &quot;y&quot;: -10} option Object &lt;optional&gt; 其他选项。如： { delayClose: 5000 } 在5秒后关闭 Example this.form.notice('this is my information', 'info'); Source o2_core/o2/xScript/Environment.js, line 2657 static addEvent(type, event) 给表单添加事件。 Parameters type String 事件名称，参考本API Classer-&gt;FormComponents-&gt;Form的事件 event function 事件方法。 Example this.form.addEvent('load', function(){ this.form.notice('表单载入完成', 'success'); }.bind(this)); Source o2_core/o2/xScript/Environment.js, line 2678 static print(applicationopt, formopt) 用一个新的浏览器窗口来打开当前文档，用于打印。（仅流程表单中可用） 如不指定表单，则使用表单设计中指定的打印表单。 Parameters application String &lt;optional&gt; 指定表单所在的流程应用ID或名称。省略此参数表示当前应用。 form String &lt;optional&gt; 指定表单ID或名称。 Examples //在新窗口中使用当前表单中配置的打印表单打开当前文档 this.form.print(); //在新窗口中使用“订单打印表单”表单打开当前文档 this.form.print('订单打印表单'); //在新窗口中使用“订单管理”应用中的“订单打印表单”表单打开当前文档 this.form.print('订单管理', '订单打印表单'); Source o2_core/o2/xScript/Environment.js, line 2690 static openWindow(applicationopt, formopt) 同print方法。（仅流程表单中可用） Parameters application String &lt;optional&gt; 指定表单所在的流程应用ID或名称。省略此参数表示当前应用。 form String &lt;optional&gt; 指定表单ID或名称。 See this.form.print() Example this.form.openWindow(); Source o2_core/o2/xScript/Environment.js, line 2716 static openWork(workIdopt, workCompletedIdopt, titleopt) 打开一个在流转或已完成的流程实例。 Parameters workId String &lt;optional&gt; 在流转的流程实例ID。workId和workCompletedId两个参数必须提供其中一个 workCompletedId String &lt;optional&gt; 已完成的流程实例ID。 title String &lt;optional&gt; 手机端打开时的窗口标题。 Example this.form.openWork(id, '', 'work title'); Source o2_core/o2/xScript/Environment.js, line 2735 static openJob(id, choiceopt) 使用流程的jobId打开工作。 Parameters id String 流程的jobId，如果流程拆分后，有多个流程实例（workId会有多个），但jobId是唯一的。 choice Boolean &lt;optional&gt; 如果有多个流程实例，是否弹出界面选择。如果传入false,则直接打开第一个工作。 Example this.form.openJob(jobId, true); Source o2_core/o2/xScript/Environment.js, line 2753 static openDocument(id, titleopt, optionsopt) 打开一个内容管理文档。 Parameters id String 内容管理文档实例的ID。 title Boolean &lt;optional&gt; 手机APP端打开时的窗口标题。 options Object &lt;optional&gt; 其他参数，内容如下 { 'readonly': true, //是否以只读方式打开，默认为true 'forceFormId': 'xxxxxx', //不管编辑还是阅读都用此表单id打开，优先使用。6.0版本之前使用 printFormId。 'readFormId': 'xxxxxx', //强制的阅读表单id，优先于表单的readFormId。6.0版本之前使用 formId。 'editFormId': 'xxxxxx', //强制的编辑表单id，优先于表单的formId。6.0版本之前使用 formEditId。 'saveOnClose' : true, //关闭的时候是否自动保存 'onPostPublish' : function( documentData ){ //发布前执行方法，但数据已经准备好，该事件在桌面模式打开有效 //documentData 为文档数据 }, 'onAfterPublish' : function( form, documentData ){ //发布后执行的方法，该事件在桌面模式打开有效 //form为内容管理Form对象，documentData 为文档数据 }, 'onPostDelete' : function(){ //删除文档后执行的方法，该事件在桌面模式打开有效 } } Example this.form.openDocument(id, 'document title'); Source o2_core/o2/xScript/Environment.js, line 2860 static openPortal(portal, pageopt, paropt) 打开一个门户页面。 Parameters portal String 要打开的门户应用名称、别名或ID。 page String &lt;optional&gt; 要打开的页面名称、别名或ID。如果忽略，则打开门户的默认首页 par Object &lt;optional&gt; 打开页面可以传入参数。在被打开的页面中，可以通过脚本this.page.parameters访问到此参数。 Example this.form.openPortal(id, '', {'type': 'my type'}); Source o2_core/o2/xScript/Environment.js, line 2891 static openCMS(name) 打开一个内容管理栏目（应用）。 Parameters name String 内容管理栏目的名称、别名或ID。 Example this.form.openCMS('通知公告'); Source o2_core/o2/xScript/Environment.js, line 2927 static openProcess(name) 打开一个流程应用。 Parameters name String 流程应用的名称、别名或ID。 Example this.form.openProcess('财务审批'); Source o2_core/o2/xScript/Environment.js, line 2946 static openApplication(name, optionsopt) 打开任意一个component应用。 Parameters name String 要打开的component的名称。component对应的名称可以在“控制面板-系统设置-界面设置-模块部署”中找到（即“组件路径”）。 options Object &lt;optional&gt; 打开的component的相关参数 Examples //打开会议管理 this.form.openApplication('Meeting'); //打开一个流转中的流程实例。与 this.form.openWork(id, '', 'work title');效果相同 this.form.openApplication('process.Work', { 'workId': id, //流程实例ID 'width': '1200', //宽度 'height': '800', //高度 'docTitle': 'work title', //APP端窗口标题 'appId': 'process.Work'+id //给新打开的component实例一个唯一名称 }); Source o2_core/o2/xScript/Environment.js, line 2965 static createDocument(columnOrOptionsopt, categoryopt, dataopt, identityopt, callbackopt, targetopt, latestopt, selectColumnEnableopt, ignoreTitleopt) 创建一条内容管理文档。 Parameters columnOrOptions String | Object &lt;optional&gt; 如果不传参数，则弹出范围为平台所有栏目的选择界面。 当使用String时为内容管理应用（栏目）的名称、别名或ID。 当使用Object时，本参数后面的参数省略，传入如下格式的内容: { 'column' : column, //（string）可选，内容管理应用（栏目）的名称、别名或ID 'category' : category, //（string）可选，要创建的文档所属的分类的名称、别名或ID 'data' : data, //（json object）可选，创建文档时默认的业务数据 'identity' : identity, //（string）可选，创建文档所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 'callback' : callback, //（funcation）可选，文档创建后的回调函数。 'target' : target, //（boolean）可选，为true时，在当前页面打开创建的文档；否则打开新窗口。默认false。 'latest' : latest, //（boolean）可选，为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 'selectColumnEnable' : selectColumnEnable, //（boolean）可选，是否可以选择应用和分类进行创建文档。有category参数时为默认false,否则默认为true。 'ignoreTitle' : ignoreTitle //（boolean）可选，值为false时，创建的时候需要强制填写标题，默认为false。 } category String &lt;optional&gt; 要创建的文档所属的分类的名称、别名或ID data Object &lt;optional&gt; 创建文档时默认的业务数据 identity String &lt;optional&gt; 可选，创建文档所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 callback function &lt;optional&gt; 文档创建后的回调函数 target Boolean &lt;optional&gt; 为true时，在当前页面打开创建的文档；否则打开新窗口。默认false latest Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 selectColumnEnable Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此分类的文档，并且没有发布过，直接调用此文档为新文档；否则创建一个新文档。默认true。 ignoreTitle Boolean &lt;optional&gt; 值为false时，创建的时候需要强制填写标题，默认为false。 Examples //启动一个通知公告 this.form.createDocument('', '通知公告'); //启动一个通知公告，标题为：关于XX的通知，启动后提示 this.form.createDocument('', '通知公告', {'subject': '关于XX的通知'}, function(json){ this.form.notice('创建成功!', 'success'); }.bind(this)); //启动一个通知公告，标题为：关于XX的通知，启动后提示 this.form.createDocument({ category : '通知公告', data : {'subject': '关于XX的通知'}, callback : function(json){ this.form.notice('创建成功!', 'success'); }.bind(this) }); Source o2_core/o2/xScript/Environment.js, line 2987 static startProcess(app, process, dataopt, identityopt, callbackopt, targetopt, latestopt) 启动一个流程实例。 Parameters app String 流程应用的名称、别名或ID。 process String 要启动的流程的名称、别名或ID。 data Object &lt;optional&gt; 流程启动时默认的业务数据。 identity String &lt;optional&gt; 流程启动所使用的身份。如果此参数为空，且当前人有多个身份的情况下，会弹出身份选择对话框；否则使用默认身份。 callback function &lt;optional&gt; 流程启动后的回调函数。 target Boolean &lt;optional&gt; 为true时，在当前页面打开启动的流程实例；否则打开新窗口。默认false。 latest Boolean &lt;optional&gt; 为true时，如果当前用户已经创建了此流程的实例，并且没有流转过，直接调用此实例为新流程实例；否则创建一个新实例。默认false。 Examples //启动一个发文管理实例 this.form.startProcess('公文管理', '发文管理'); //启动一个发文管理实例，标题为：my file title，启动后提示 this.form.startProcess('公文管理', '发文管理', {'title': 'my file title'}, function(json){ this.form.notice('create file success!', 'success'); }); Source o2_core/o2/xScript/Environment.js, line 3080 "},"module-data.html":{"id":"module-data.html","url":"module-data.html","title":"data","kind":"Module","body":" Module data data对象是流程平台中，流程实例的业务数据；以及内容管理平台中，文档实例的业务数据。 这些数据一般情况下是通过您创建的表单收集而来的，也可以通过脚本进行创建和增删改查操作。 data对象基本上是一个JSON对象，您可以用访问JSON对象的方法访问data对象的所有数据，但增加和删除数据时略有不同。 Example //您可以在表单或流程的各个嵌入脚本中，通过this来获取当前实例的业务数据，如下： var data = this.data; Source o2_core/o2/xScript/Environment.js, line 29 Members [property]String|Number 访问或修改data对象的数据。 data数据用于存储表单获取的数据，所有属性都是动态的，其格式和访问方式都和JSON类似。 在表单脚本中使用data对象，实现了data和表单可编辑元素的双向绑定。 改变data对象，会自动更新表单元素，修改表单可编辑元素，也会自动修改data对象。 Type String | Number Examples var value = this.data.subject; //获取名为subject的数据值 //将subject的值修改为'123'。 //需要注意的是，用这种方式创建新字段，必须要在当前表单上有一个名为‘subject’的字段组件。 //如果表单上没有该组件，可以使用this.data.add('subject','123',true)。给已有字段赋值则没有这个限制。 this.data.subject = '123'; 获取流程文档中的数据网格的值： 如有以下数据网格： 其数据网格设计如下(数据网格id为：datagrid)： //获取流程文档中的数据网格的值 var data = this.data.datagrid; //获取到的data值格式如下： { 'data': [ { 'amountCol': { 'amount': '12000' }, 'countCol': { 'number': '10' }, 'nameCol': { 'name': '手机' }, 'priceCol': { 'price': '1200' } }, { 'amountCol': { 'amount': '15000' }, 'countCol': { 'number': '5' }, 'nameCol': { 'name': '电脑' }, 'priceCol': { 'price': '3000' } } ], 'total': { 'amountCol': '27000', 'countCol': '15' } } //获取到数据网格中的其他数据： //获取数据网格中的第一条数据 var data = this.data.datagrid.data[0]; //获取数据网格中的第一条数据的 nameCol 列的值 var data = this.data.datagrid.data[0].nameCol.name; //获取数据网格中的 amountCol 列的总计值 var data = this.data.datagrid.total.amountCol; 修改数据网格中的数据 经过本样例修改后，数据网格将变为： //修改数据网格中的第一条数据的 nameCol 列的值 this.data.datagrid.data[0].nameCol.name='平板电脑'; Source o2_core/o2/xScript/Environment.js, line 41 Methods add(key, value, overwriteopt) &rarr; {String|Number|Array|JsonObject} 为data对象添加一个数据节点。 Syntax var newData = this.data.add(key, value, overwrite); Parameters key String | Number 要添加的新的数据节点名称或数组索引号。 value String | Number | Array | JsonObject 新的数据节点的值。 overwrite Boolean &lt;optional&gt; 如果要添加的节点已经存在，是否覆盖。默认为 false。 Returns String Number Array JsonObject 新添加的数据节点或原有的同名节点。 Examples //为data添加一个名为'remark'值为'I am remark'的数据 this.data.add('remark', 'I am remark'); //为data添加一个名为'person'的Object对象数据 var person = this.data.add('person', {}); person.add('name', 'Tom'); person.add('age', 23); //或者可以这样 var person = this.data.add('person', {name: 'Tom', 'age': '23'}); //为data添加一个名为'orders'的数组对象数据 var orders = this.data.add('orders', []); orders.add({name: 'phone', count: 5}); orders.add({name: 'computer', count: 10}); orders[0].add('count', 10, true); //将第一条数据的count修改为10 //或者可以这样 var orders = this.data.add('orders', [ {name: 'phone', count: 5}, {name: 'computer', count: 10} ]); //将第一条数据修改为name为mobile; count为10 orders.add(0, {name: 'mobile', count: 10}, true); Source o2_core/o2/xScript/Environment.js, line 112 static save(callbackopt) 保存data对象。不触发事件 Syntax this.data.save(callback); Parameters callback function &lt;optional&gt; 保存成功后的回调函数。 Example this.data.save(function(json){ this.form.notice('save success!', 'success') }); Source o2_core/o2/xScript/Environment.js, line 150 Module data data对象是流程平台中，流程实例的业务数据；以及内容管理平台中，文档实例的业务数据。 这些数据一般情况下是通过您创建的表单收集而来的，也可以通过脚本进行创建和增删改查操作。 data对象基本上是一个JSON对象，您可以用访问JSON对象的方法访问data对象的所有数据，但增加和删除数据时略有不同。 Example //您可以在表单或流程的各个嵌入脚本中，通过this来获取当前实例的业务数据，如下： var data = this.data; Source o2_core/o2/xScript/Environment.js, line 29 Members [property]String|Number 访问或修改data对象的数据。 data数据用于存储表单获取的数据，所有属性都是动态的，其格式和访问方式都和JSON类似。 在表单脚本中使用data对象，实现了data和表单可编辑元素的双向绑定。 改变data对象，会自动更新表单元素，修改表单可编辑元素，也会自动修改data对象。 Type String | Number Examples var value = this.data.subject; //获取名为subject的数据值 //将subject的值修改为'123'。 //需要注意的是，用这种方式创建新字段，必须要在当前表单上有一个名为‘subject’的字段组件。 //如果表单上没有该组件，可以使用this.data.add('subject','123',true)。给已有字段赋值则没有这个限制。 this.data.subject = '123'; 获取流程文档中的数据网格的值： 如有以下数据网格： 其数据网格设计如下(数据网格id为：datagrid)： //获取流程文档中的数据网格的值 var data = this.data.datagrid; //获取到的data值格式如下： { 'data': [ { 'amountCol': { 'amount': '12000' }, 'countCol': { 'number': '10' }, 'nameCol': { 'name': '手机' }, 'priceCol': { 'price': '1200' } }, { 'amountCol': { 'amount': '15000' }, 'countCol': { 'number': '5' }, 'nameCol': { 'name': '电脑' }, 'priceCol': { 'price': '3000' } } ], 'total': { 'amountCol': '27000', 'countCol': '15' } } //获取到数据网格中的其他数据： //获取数据网格中的第一条数据 var data = this.data.datagrid.data[0]; //获取数据网格中的第一条数据的 nameCol 列的值 var data = this.data.datagrid.data[0].nameCol.name; //获取数据网格中的 amountCol 列的总计值 var data = this.data.datagrid.total.amountCol; 修改数据网格中的数据 经过本样例修改后，数据网格将变为： //修改数据网格中的第一条数据的 nameCol 列的值 this.data.datagrid.data[0].nameCol.name='平板电脑'; Source o2_core/o2/xScript/Environment.js, line 41 Methods add(key, value, overwriteopt) &rarr; {String|Number|Array|JsonObject} 为data对象添加一个数据节点。 Syntax var newData = this.data.add(key, value, overwrite); Parameters key String | Number 要添加的新的数据节点名称或数组索引号。 value String | Number | Array | JsonObject 新的数据节点的值。 overwrite Boolean &lt;optional&gt; 如果要添加的节点已经存在，是否覆盖。默认为 false。 Returns String Number Array JsonObject 新添加的数据节点或原有的同名节点。 Examples //为data添加一个名为'remark'值为'I am remark'的数据 this.data.add('remark', 'I am remark'); //为data添加一个名为'person'的Object对象数据 var person = this.data.add('person', {}); person.add('name', 'Tom'); person.add('age', 23); //或者可以这样 var person = this.data.add('person', {name: 'Tom', 'age': '23'}); //为data添加一个名为'orders'的数组对象数据 var orders = this.data.add('orders', []); orders.add({name: 'phone', count: 5}); orders.add({name: 'computer', count: 10}); orders[0].add('count', 10, true); //将第一条数据的count修改为10 //或者可以这样 var orders = this.data.add('orders', [ {name: 'phone', count: 5}, {name: 'computer', count: 10} ]); //将第一条数据修改为name为mobile; count为10 orders.add(0, {name: 'mobile', count: 10}, true); Source o2_core/o2/xScript/Environment.js, line 112 static save(callbackopt) 保存data对象。不触发事件 Syntax this.data.save(callback); Parameters callback function &lt;optional&gt; 保存成功后的回调函数。 Example this.data.save(function(json){ this.form.notice('save success!', 'success') }); Source o2_core/o2/xScript/Environment.js, line 150 "},"module-workContext.html":{"id":"module-workContext.html","url":"module-workContext.html","title":"workContext","kind":"Module","body":" Module workContext 您可以通过workContext获取和流程相关的流程实例对象数据。 Usable Range Process Syntax //您可以在表单或流程的各个嵌入脚本中，通过this来获取当前流程实例数据，如下： var context = this.workContext; Source o2_core/o2/xScript/Environment.js, line 182 Methods static getWork() &rarr; {Work|WorkCompleted} 获取当前流程实例对象：work对象或workCompleted对象。 Syntax var work = this.workContext.getWork(); Returns Work WorkCompleted 流程实例对象；如果流程已结束，返回已结束的流程实例对象。 下面的Work对象和WorkCompleted对象为后台返回的数据，脚本中我们对这两个对象进行了修改和补充，如下： { 'creatorPersonDn': '张三@zhangsan@P', //创建人，可能为空，如果由系统创建. 'creatorPerson': '张三', //创建人姓名 'creatorIdentityDn': '张三@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'creatorIdentity': '张三' //创建人姓名 'creatorUnitDn': '开发部@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织全称,如果由系统创建。 'creatorUnit': '开发部', //创建人组织名称 'creatorDepartment': '开发部', //创建人组织名称，同creatorUnit 'creatorCompany': 'xx公司' //创建人组织公司名称，creatorUnitLevel的第一段 } Work对象: { 'id': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //数据库主键,自动生成. 'splitValueList': [ ' ' ], //要拆分的值 'job': ' ', //工作 'title': 'xx7月北京出差报销审批', //标题 'startTime': '2018-09-07 14:03:22', //工作开始时间 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'creatorPerson': 'xx@huqi@P', //创建人，可能为空，如果由系统创建. 'creatorIdentity': 'xx@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'creatorUnit': 'xx@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织,可能为空,如果由系统创建。 'creatorUnitLevelName': '浙江兰德纵横/开发部', //创建人组织层级名. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //当前活动ID. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityToken': ' ', //活动的标识号，每进入一次活动将重新生成一次 'activityArrivedTime': '2018-09-27 22:49:21', //活动到达时间 'serial': ' ', //编号 'dataChanged': true, //当前工作是否经过保存修改的操作,用于判断是否是默认生成的未经修改的. 'workThroughManual': true, //是否已经经过人工节点,用于判断是否是草稿.在到达环节进行判断. 'workCreateType': ' ', //工作创建类型,surface,assgin 'workStatus': ' ',//可选值:start,processing,hanging, //工作状态 'beforeExecuted': true, //是否已经通过执行前 'manualTaskIdentityList': [ '张三@db3b2766-93a1-4058-b522-0edb922bd84f@I' ], //预期的处理人 'manualTaskIdentityText': '张三', //当前处理人身份合并文本,用','分割,超长截断,此字段仅用于显示当前工作的处理人,不索引. 'splitting': true, //是否是拆分中的工作 'splitToken': ' ', //拆分工作令牌 'splitTokenList': [ ' ' ], //拆分工作产生的Token 'splitValue': 'xxxxxxxxxxxxxx', //拆分值 'form': 'db3b2766-93a1-4058-b522-0edb922bd84f', //使用表单 'destinationRoute': ' ', //到达使用的路由 'destinationRouteName': ' ', //到达使用的路由 'destinationActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //当前活动类型 'destinationActivity': ' ', //目标活动的ID 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'embedTargetWork': ' ', //Embed活动生成的WorkId，用于在embed生成targetWork之后在inquire环节进行推动。 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } WorkCompleted对象: { 'id': 'be0195f1-f2e2-4eac-911c-99897a43ff8f', //数据库主键,自动生成. 'job': ' ', //工作 'title': 'xx7月北京出差报销审批', //标题 'startTime': '2018-09-19 16:14:16', //工作开始时间 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2018-09-19 16:15:28', //工作开始时间 'completedTimeMonth': '2018-09', //用于在Filter中分类使用.由于是自动计算所以允许空 'creatorPerson': 'xx@huqi@P', //创建人 'creatorIdentity': 'xx@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'xx@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'creatorUnitLevelName': '浙江兰德纵横/开发部', //创建人组织层级名. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID 'processName': '报销审批流程', //流程名称 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'form': '320be1ca-ee49-478f-a751-f65ab67cf818', //使用表单ID 'work': ' ', //Work Id. 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'allowRollback': true, //完成后是否允许回滚. 'activity': ' ', //结束节点的活动id. 'activityName': ' ', //结束节点的活动名称. 'activityAlias': ' ', //结束节点的活动别名. 'activityDescription': ' ', //结束节点的活动说明. 'merged': true, //合并数据 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 192 static getActivity() &rarr; {Activity|Null} 获取当前流程实例所在的活动节点对象：activity对象。 Syntax var activity = this.workContext.getActivity(); Returns Activity Null 当前流程实例所在的活动节点对象，如果当前流程实例已流转完成，则返回null. { 'id': '801087c5-a4e6-4b91-bf4d-a81cdaa04471', //节点ID 'name': '办理', //节点名称 'description': '', //节点描述 'alias': '', //节点别名 'resetRange': 'department', //重置处理人范围 'resetCount': 0, //重置处理人数字 'allowReset': true, //是否允许重置 'manualMode': 'single' //处理方式 单人single, 并行parallel, 串行queue, grab抢办 } Source o2_core/o2/xScript/Environment.js, line 216 static getTask() &rarr; {Task|Null} Summary 获取当前流程与当前用户相关的待办对象：task对象。 Description 当前流程实例正在流转中，并且当前用户有待办，则返回当前用户的待办对象，否则返回null。 Syntax var task = this.workContext.getTask(); Returns Task Null 当前用户的待办任务对象：task。当前用户没有对此流程实例的待办时，或流程实例已经流转结束，返回null。 下面的Task对象为后台返回的数据，脚本中我们对这它进行了修改和补充，如下： { 'personDn': '张三@zhangsan@P', //创建人，可能为空，如果由系统创建. 'person': '张三', //创建人姓名 'identityDn': '张三@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'identity': '张三' //创建人姓名 'unitDn': '开发部@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织全称,如果由系统创建。 'unit': '开发部', //创建人组织名称 'department': '开发部', //创建人组织名称，unit } Task对象: { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 236 static getTaskList(callbackopt, erroropt) &rarr; {Array.&lt;Task>} 获取当前流程实例的所有待办对象。如果流程实例已流转完成，则返回一个空数组。 Syntax //本样例以同步执行 var taskList = this.workContext.getTaskList(); //本样例以异步执行 this.workContext.getTaskList( function(taskList){ //taskList 为待办数组 }); Parameters callback function &lt;optional&gt; 正确获取待办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待办数组出错时的回调。 Returns Array.&lt;Task> 待办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 260 static getTaskListByJob(callbackopt, erroropt) &rarr; {Array.&lt;Task>} 根据当前工作的job获取当前流程实例的所有待办对象。如果流程实例已流转完成，则返回一个空数组。 Syntax //本样例以同步执行 var taskList = this.workContext.getTaskListByJob(); //本样例以异步执行 this.workContext.getTaskListByJob( function(taskList){ //taskList 为待办数组 }); Parameters callback function &lt;optional&gt; 正确获取待办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待办数组出错时的回调。 Returns Array.&lt;Task> 待办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 287 static getTaskCompletedList(callbackopt, erroropt) &rarr; {Array.&lt;TaskCompleted>} 获取当前流程实例的所有已办对象。如果流程实例没有任何人处理过，则返回一个空数组。 Syntax //本样例以同步执行 var taskCompletedList = this.workContext.getTaskCompletedList(); //本样例以异步执行 this.workContext.getTaskCompletedList( function(taskCompletedList){ //taskCompletedList 为已办数组 }); Parameters callback function &lt;optional&gt; 正确获取已办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已办数组出错时的回调。 Returns Array.&lt;TaskCompleted> 已办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //待办.已办的开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //task转成taskCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //task转成taskCompleted的完成月份,也就是任务的完成时间,用于filter过滤. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //WorkCompleted ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'empowerToIdentity': ' ', //授权给谁处理,在processType=empower时记录授权对象 'empowerFromIdentity': ' ', //授权自Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在部门. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'task': ' ', //Task ID. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'processingType': ' ', //流程流转类型 'retractTime': '2021-07-05 19:18:03', //retract时间. 'latest': true, //同一Job中同一用户是否是最新的,多人可以有多条已办,页面显示的时候可以通过此标记仅显示一条最新的. 'mediaOpinion': ' ', //多媒体意见. 'pressCount': 1, //提醒次数 'pressTime': '2021-07-05 19:18:03', //提醒办理时间. 'pressActivityToken': ' ', //提醒办理环节. 'currentActivityName': ' ', //当前活动名称. 'joinInquire': true, //已办是否参与路由. 'properties': { 'prevTaskIdentityList': [ ' ' ], //从task带过来的上一处理人 'nextTaskIdentityList': [ ' ' ], //后续处理人 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 315 static getTaskCompletedListByJob(callbackopt, erroropt) &rarr; {Array.&lt;TaskCompleted>} 根据当前工作的job获取当前流程实例的所有已办对象。如果流程实例没有任何人处理过，则返回一个空数组。 Syntax //本样例以同步执行 var taskCompletedList = this.workContext.getTaskCompletedListByJob(); //本样例以异步执行 this.workContext.getTaskCompletedListByJob( function(taskCompletedList){ //taskCompletedList 为已办数组 }); Parameters callback function &lt;optional&gt; 正确获取已办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已办数组出错时的回调。 Returns Array.&lt;TaskCompleted> 已办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //待办.已办的开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //task转成taskCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //task转成taskCompleted的完成月份,也就是任务的完成时间,用于filter过滤. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //WorkCompleted ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'empowerToIdentity': ' ', //授权给谁处理,在processType=empower时记录授权对象 'empowerFromIdentity': ' ', //授权自Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在部门. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'task': ' ', //Task ID. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'processingType': ' ', //流程流转类型 'retractTime': '2021-07-05 19:18:03', //retract时间. 'latest': true, //同一Job中同一用户是否是最新的,多人可以有多条已办,页面显示的时候可以通过此标记仅显示一条最新的. 'mediaOpinion': ' ', //多媒体意见. 'pressCount': 1, //提醒次数 'pressTime': '2021-07-05 19:18:03', //提醒办理时间. 'pressActivityToken': ' ', //提醒办理环节. 'currentActivityName': ' ', //当前活动名称. 'joinInquire': true, //已办是否参与路由. 'properties': { 'prevTaskIdentityList': [ ' ' ], //从task带过来的上一处理人 'nextTaskIdentityList': [ ' ' ], //后续处理人 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 343 static getReadList(callbackopt, erroropt) &rarr; {Array.&lt;Read>} Summary 获取当前流程实例的所有待阅对象数组。如果流程实例无待阅，则返回一个空数组。 Syntax //本样例以同步执行 var readList = this.workContext.getReadList(); //本样例以异步执行 this.workContext.getReadList( function(readList){ //readList 为待阅数组 }); Parameters callback function &lt;optional&gt; 正确获取待阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待阅数组出错时的回调。 Returns Array.&lt;Read> 当前流程实例的所有待阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //完成工作ID. 'completed': true, //整个job是否已经完成. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID,针对已完成工作添加待阅字段为空. 'activityName': '部门领导审核', //活动名称,针对已完成工作添加待阅字段为空. 'activityAlias': ' ', //活动别名,针对已完成工作添加待阅字段为空. 'activityDescription': ' ', //活动说明,针对已完成工作添加待阅字段为空. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型,针对已完成工作添加待阅字段为空. 'activityToken': ' ', //活动Token,针对已完成工作添加待阅字段为空. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'viewed': true, //是否查看过. 'currentActivityName': ' ', //当前活动名称. 'properties': { 'serialVersionUID': 1, 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 371 static getReadListByJob(callbackopt, erroropt) &rarr; {Array.&lt;Read>} Summary 根据当前工作的job获取当前流程实例的所有待阅对象。如果流程实例无待阅，则返回一个空数组。 Syntax //本样例以同步执行 var readList = this.workContext.getReadListByJob(); //本样例以异步执行 this.workContext.getReadListByJob( function(readList){ //readList 为待阅数组 }); Parameters callback function &lt;optional&gt; 正确获取待阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待阅数组出错时的回调。 Returns Array.&lt;Read> 当前流程实例的所有待阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //完成工作ID. 'completed': true, //整个job是否已经完成. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID,针对已完成工作添加待阅字段为空. 'activityName': '部门领导审核', //活动名称,针对已完成工作添加待阅字段为空. 'activityAlias': ' ', //活动别名,针对已完成工作添加待阅字段为空. 'activityDescription': ' ', //活动说明,针对已完成工作添加待阅字段为空. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型,针对已完成工作添加待阅字段为空. 'activityToken': ' ', //活动Token,针对已完成工作添加待阅字段为空. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'viewed': true, //是否查看过. 'currentActivityName': ' ', //当前活动名称. 'properties': { 'serialVersionUID': 1, 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 398 static getReadCompletedList(callbackopt, erroropt) &rarr; {Array.&lt;ReadCompleted>} Summary 获取当前流程实例的所有已阅对象。如果流程实例没有已阅，则返回一个空数组。 Syntax //本样例以同步执行 var readCompletedList = this.workContext.getReadCompletedList(); //本样例以异步执行 this.workContext.getReadCompletedList( function(readCompletedList){ //readCompletedList 为已阅数组 }); Parameters callback function &lt;optional&gt; 正确获取已阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已阅数组出错时的回调。 Returns Array.&lt;ReadCompleted> 当前流程实例的所有已阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //工作ID. 'completed': true, //整个job是否已经完成. 'read': ' ', //待阅Id. 'title': 'XX7月北京出差报销审批', //标题. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //read转成readCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //read转成readCompleted的完成月份,也就是任务的完成时间,用于filter过滤.. 'duration': 1, //工作时长(分钟数). 'currentActivityName': ' ', //当前活动名称. 'properties': { 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 426 static getReadCompletedListByJob(callbackopt, erroropt) &rarr; {Array.&lt;ReadCompleted>} Summary 根据当前工作的job获取当前流程实例的所有已阅对象。如果流程实例没有已阅，则返回一个空数组。 Syntax //本样例以同步执行 var readCompletedList = this.workContext.getReadCompletedListByJob(); //本样例以异步执行 this.workContext.getReadCompletedListByJob( function(readCompletedList){ //readCompletedList 为已阅数组 }); Parameters callback function &lt;optional&gt; 正确获取已阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已阅数组出错时的回调。 Returns Array.&lt;ReadCompleted> 当前流程实例的所有已阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //工作ID. 'completed': true, //整个job是否已经完成. 'read': ' ', //待阅Id. 'title': 'XX7月北京出差报销审批', //标题. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //read转成readCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //read转成readCompleted的完成月份,也就是任务的完成时间,用于filter过滤.. 'duration': 1, //工作时长(分钟数). 'currentActivityName': ' ', //当前活动名称. 'properties': { 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 453 static getControl() &rarr; {WorkControl} Summary 获取当前人对流程实例的权限。 Syntax var control = this.workContext.getControl(); Returns WorkControl 流程实例权限对象. { 'allowVisit': true, //是否允许访问 'allowProcessing': true, //是否允许流转 'allowReadProcessing': false, //是否有待阅 'allowSave': true, //是否允许保存业务数据 'allowReset': false, //是否允许重置处理人 'allowRetract': false, //是否允许撤回 'allowReroute': false, //是否允许调度 'allowDelete': true, //是否允许删除流程实例 'allowRollback': false, //是否允许流程回溯 'allowAddSplit': false, //是否允许增加分支 'allowPress': false, //是否允许催办 } Source o2_core/o2/xScript/Environment.js, line 485 static getWorkLogList() &rarr; {Array.&lt;WorkLog>} Summary 获取当前流程实例的所有流程记录(WorkLog)。 Syntax var workLogList = this.workContext.getWorkLogList(); Returns Array.&lt;WorkLog> 流程记录对象. { 'id': ' ', //数据库主键,自动生成. 'fromActivity': ' ', //开始活动Id 'fromActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //开始活动类型. 'fromActivityName': ' ', //开始活动名称 'fromActivityAlias': ' ', //开始活动别名 'fromActivityToken': ' ', //开始节点Token 'fromGroup': ' ', //开始分组 'fromOpinionGroup': ' ', //开始意见分组 'fromTime': '2021-07-05 19:18:03', //开始时间. 'arrivedActivity': ' ', //结束活动Id，可能为空，如果是未Connected的流程记录 'arrivedActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //结束活动类型. 'arrivedActivityName': ' ', //结束活动名称. 'arrivedActivityAlias': ' ', //结束活动名称. 'arrivedActivityToken': ' ', //结束活动Token. 'arrivedGroup': ' ', //到达分组 'arrivedOpinionGroup': ' ', //到达意见分组 'arrivedTime': '2021-07-05 19:18:03', //完成时间. 'routeName': ' ', //到达节点使用Route Name. 'connected': true, //是否已经完整填写了From和Arrived. 'splitting': true //是否是拆分中的工作,用于回溯时候将值改回去。 } Source o2_core/o2/xScript/Environment.js, line 507 static getRecordList() &rarr; {Array.&lt;Record>} Summary 获取当前流程实例的所有流程记录(Record)。 Syntax var recordList = this.workContext.getRecordList(); Returns Array.&lt;Record> 流程记录(Record)对象. { 'id': ' ', //数据库主键,自动生成. 'application': ' ', //应用. 'process': ' ', //流程ID. 'job': ' ', //任务标识 'work': ' ', //工作 'workCompleted': ' ', //已完成工作 'completed': true, //工作是否已经完成. 'display': true, //是否显示. 'order': 1, //显示排序. 'properties': { 'serialVersionUID': 1, 'identityOrderNumber': 1, //record中记录的处理人身份排序值. 'unitOrderNumber': 1, //record中记录的处理人身份所在组织排序值. 'unitLevelOrderNumber': ' ', //record中记录的处理人身份所在组织层级排序值. 'unitDutyList': [ ' ' ], //record中记录的处理人身份所拥有的组织职务,向上递归. 'nextManualList': [ { 'activity': ' ', //活动 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型 'activityName': ' ', //活动名称 'activityAlias': ' ', //活动别名 'activityToken': ' ', //活动活动令牌 'taskIdentityList': [ ' ' ] //待办处理人 } ], //后续人工环节 'nextManualTaskIdentityList': [ ' ' ], //后续人工环节处理人 'empowerToPerson': ' ', //授权给处理人 'empowerToIdentity': ' ', //授权给处理人的身份 'empowerFromIdentity': ' ', //授权自身份 'empowerToUnit': ' ', //授权给处理人的组织 'routeName': ' ', //路由名称 'opinion': ' ', //意见 'mediaOpinion': ' ', //多媒体意见 'startTime': '2021-07-05 19:18:03', //开始时间. 'elapsed': 1, //耗时 'fromGroup': ' ', //活动组 'fromOpinionGroup': ' ', //意见组 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'fromActivity': ' ', //开始活动Id 'fromActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //开始活动类型. 'fromActivityName': ' ', //开始活动名称 'fromActivityAlias': ' ', //开始活动别名 'fromActivityToken': ' ', //开始节点Token 'arrivedActivity': ' ', //结束活动Id，可能为空，如果是未Connected的流程记录 'arrivedActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //结束活动类型. 'arrivedActivityName': ' ', //结束活动名称. 'arrivedActivityAlias': ' ', //结束活动名称. 'arrivedActivityToken': ' ', //结束活动Token. 'recordTime': '2021-07-05 19:18:03', //记录时间. 'person': ' ', //记录人员 'identity': ' ', //记录身份 'unit': ' ', //记录人员所在组织. 'type': ' ', //类型. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 517 static getAttachmentList() &rarr; {Array.&lt;WorkAttachmentData>} Summary 获取当前流程实例的附件对象列表。 Syntax var attachmentList = this.workContext.getAttachmentList(); Returns Array.&lt;WorkAttachmentData> 附件数据. { 'id': '56c4e86f-a4c8-4cc2-a150-1a0d2c5febcb', //数据库主键,自动生成. 'name': '133203a2-92e6-4653-9954-161b72ddb7f9.png', //文件名称,带扩展名的文件名. 'extension': 'png', //扩展名。 'storage': ' ', //关联的存储名称. 'length': 43864, //文件大小. 'workCreateTime': '2021-07-05 19:18:03', //关联的Work创建时间，用于分类目录。 'application': ' ', //应用ID. 'process': ' ', //流程ID. 'job': ' ', //任务. 'person': 'xx@huqi@P', //文件所有者 'lastUpdateTime': '2018-09-27 15:50:34', //最后更新时间 'lastUpdatePerson': 'xx@huqi@P', //最后更新人员 'activity': 'e31ad938-c495-45a6-8d77-b8a9b61a165b', //活动ID. 'activityName': '申请人', //活动名称. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //工作ID. 'work': ' ', //已完成工作ID. 'site': '$mediaOpinion', //附件框分类. 'type': 'image/png', //根据流文件判断的文件类型. 'text': ' ', //文本. 'readIdentityList': [ ' ' ], //可以访问的身份. 'readUnitList': [ ' ' ], //可以访问的组织. 'editIdentityList': [ ' ' ], //可以修改的用户. 'editUnitList': [ ' ' ], //可以修改的组织. 'controllerIdentityList': [ ' ' ], //可以管理的用户. 'controllerUnitList': [ ' ' ], //可以管理的组织. 'deepPath': true, //是否使用更深的路径. 'orderNumber': 1, //排序号,升序排列,为空在最后 'divisionList': [ ' ' ], //分组. 'fromJob': ' ', //附件拷贝来源任务，仅soft拷贝模式存储. 'fromId': ' ', //附件拷贝来源附件ID，仅soft拷贝模式存储. 'fromPath': ' ', //附件拷贝来源存储路径，仅soft拷贝模式存储. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 527 static getRouteList() &rarr; {Array.&lt;String>} Summary 获取当前待办的可选路由。与task对象中的routeNameList取值相同。 Syntax var routeList = this.workContext.getRouteList(); Returns Array.&lt;String> 路由字符串数组. Source o2_core/o2/xScript/Environment.js, line 537 Module workContext 您可以通过workContext获取和流程相关的流程实例对象数据。 Usable Range Process Syntax //您可以在表单或流程的各个嵌入脚本中，通过this来获取当前流程实例数据，如下： var context = this.workContext; Source o2_core/o2/xScript/Environment.js, line 182 Methods static getWork() &rarr; {Work|WorkCompleted} 获取当前流程实例对象：work对象或workCompleted对象。 Syntax var work = this.workContext.getWork(); Returns Work WorkCompleted 流程实例对象；如果流程已结束，返回已结束的流程实例对象。 下面的Work对象和WorkCompleted对象为后台返回的数据，脚本中我们对这两个对象进行了修改和补充，如下： { 'creatorPersonDn': '张三@zhangsan@P', //创建人，可能为空，如果由系统创建. 'creatorPerson': '张三', //创建人姓名 'creatorIdentityDn': '张三@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'creatorIdentity': '张三' //创建人姓名 'creatorUnitDn': '开发部@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织全称,如果由系统创建。 'creatorUnit': '开发部', //创建人组织名称 'creatorDepartment': '开发部', //创建人组织名称，同creatorUnit 'creatorCompany': 'xx公司' //创建人组织公司名称，creatorUnitLevel的第一段 } Work对象: { 'id': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //数据库主键,自动生成. 'splitValueList': [ ' ' ], //要拆分的值 'job': ' ', //工作 'title': 'xx7月北京出差报销审批', //标题 'startTime': '2018-09-07 14:03:22', //工作开始时间 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'creatorPerson': 'xx@huqi@P', //创建人，可能为空，如果由系统创建. 'creatorIdentity': 'xx@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'creatorUnit': 'xx@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织,可能为空,如果由系统创建。 'creatorUnitLevelName': '浙江兰德纵横/开发部', //创建人组织层级名. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //当前活动ID. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityToken': ' ', //活动的标识号，每进入一次活动将重新生成一次 'activityArrivedTime': '2018-09-27 22:49:21', //活动到达时间 'serial': ' ', //编号 'dataChanged': true, //当前工作是否经过保存修改的操作,用于判断是否是默认生成的未经修改的. 'workThroughManual': true, //是否已经经过人工节点,用于判断是否是草稿.在到达环节进行判断. 'workCreateType': ' ', //工作创建类型,surface,assgin 'workStatus': ' ',//可选值:start,processing,hanging, //工作状态 'beforeExecuted': true, //是否已经通过执行前 'manualTaskIdentityList': [ '张三@db3b2766-93a1-4058-b522-0edb922bd84f@I' ], //预期的处理人 'manualTaskIdentityText': '张三', //当前处理人身份合并文本,用','分割,超长截断,此字段仅用于显示当前工作的处理人,不索引. 'splitting': true, //是否是拆分中的工作 'splitToken': ' ', //拆分工作令牌 'splitTokenList': [ ' ' ], //拆分工作产生的Token 'splitValue': 'xxxxxxxxxxxxxx', //拆分值 'form': 'db3b2766-93a1-4058-b522-0edb922bd84f', //使用表单 'destinationRoute': ' ', //到达使用的路由 'destinationRouteName': ' ', //到达使用的路由 'destinationActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //当前活动类型 'destinationActivity': ' ', //目标活动的ID 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'embedTargetWork': ' ', //Embed活动生成的WorkId，用于在embed生成targetWork之后在inquire环节进行推动。 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } WorkCompleted对象: { 'id': 'be0195f1-f2e2-4eac-911c-99897a43ff8f', //数据库主键,自动生成. 'job': ' ', //工作 'title': 'xx7月北京出差报销审批', //标题 'startTime': '2018-09-19 16:14:16', //工作开始时间 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2018-09-19 16:15:28', //工作开始时间 'completedTimeMonth': '2018-09', //用于在Filter中分类使用.由于是自动计算所以允许空 'creatorPerson': 'xx@huqi@P', //创建人 'creatorIdentity': 'xx@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'xx@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'creatorUnitLevelName': '浙江兰德纵横/开发部', //创建人组织层级名. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用ID 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID 'processName': '报销审批流程', //流程名称 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'form': '320be1ca-ee49-478f-a751-f65ab67cf818', //使用表单ID 'work': ' ', //Work Id. 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'allowRollback': true, //完成后是否允许回滚. 'activity': ' ', //结束节点的活动id. 'activityName': ' ', //结束节点的活动名称. 'activityAlias': ' ', //结束节点的活动别名. 'activityDescription': ' ', //结束节点的活动说明. 'merged': true, //合并数据 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 192 static getActivity() &rarr; {Activity|Null} 获取当前流程实例所在的活动节点对象：activity对象。 Syntax var activity = this.workContext.getActivity(); Returns Activity Null 当前流程实例所在的活动节点对象，如果当前流程实例已流转完成，则返回null. { 'id': '801087c5-a4e6-4b91-bf4d-a81cdaa04471', //节点ID 'name': '办理', //节点名称 'description': '', //节点描述 'alias': '', //节点别名 'resetRange': 'department', //重置处理人范围 'resetCount': 0, //重置处理人数字 'allowReset': true, //是否允许重置 'manualMode': 'single' //处理方式 单人single, 并行parallel, 串行queue, grab抢办 } Source o2_core/o2/xScript/Environment.js, line 216 static getTask() &rarr; {Task|Null} Summary 获取当前流程与当前用户相关的待办对象：task对象。 Description 当前流程实例正在流转中，并且当前用户有待办，则返回当前用户的待办对象，否则返回null。 Syntax var task = this.workContext.getTask(); Returns Task Null 当前用户的待办任务对象：task。当前用户没有对此流程实例的待办时，或流程实例已经流转结束，返回null。 下面的Task对象为后台返回的数据，脚本中我们对这它进行了修改和补充，如下： { 'personDn': '张三@zhangsan@P', //创建人，可能为空，如果由系统创建. 'person': '张三', //创建人姓名 'identityDn': '张三@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity,可能为空,如果由系统创建. 'identity': '张三' //创建人姓名 'unitDn': '开发部@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织全称,如果由系统创建。 'unit': '开发部', //创建人组织名称 'department': '开发部', //创建人组织名称，unit } Task对象: { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 236 static getTaskList(callbackopt, erroropt) &rarr; {Array.&lt;Task>} 获取当前流程实例的所有待办对象。如果流程实例已流转完成，则返回一个空数组。 Syntax //本样例以同步执行 var taskList = this.workContext.getTaskList(); //本样例以异步执行 this.workContext.getTaskList( function(taskList){ //taskList 为待办数组 }); Parameters callback function &lt;optional&gt; 正确获取待办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待办数组出错时的回调。 Returns Array.&lt;Task> 待办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 260 static getTaskListByJob(callbackopt, erroropt) &rarr; {Array.&lt;Task>} 根据当前工作的job获取当前流程实例的所有待办对象。如果流程实例已流转完成，则返回一个空数组。 Syntax //本样例以同步执行 var taskList = this.workContext.getTaskListByJob(); //本样例以异步执行 this.workContext.getTaskListByJob( function(taskList){ //taskList 为待办数组 }); Parameters callback function &lt;optional&gt; 正确获取待办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待办数组出错时的回调。 Returns Array.&lt;Task> 待办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'empowerFromIdentity': ' ', //授权自Identity 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人部门 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'expired': true, //是否已经超时. 'urgeTime': '2021-07-05 19:18:03', //催办时间. 'urged': true, //是否已经催办过. 'routeList': [ '89b58fe0-6dcb-4fe7-8c2e-3f77204df6d4' 'f3105b7a-2929-4682-aab8-15fef5ea0f23' ], //当前活动可供选择的路由. 'routeNameList': [ '退回申请人' '送财务部门复审' ], //当前活动可供选择的路由名称. 'routeOpinionList': [ '' '' ], //当前活动可供选择的路由对应的默认意见. 'routeDecisionOpinionList': [ ' ' ], //决策性意见列表,使用#分割. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'modified': true, //是否在前台保存过数据. 'viewed': true, //是否查看过. 'allowRapid': true, //允许快速处理. 'mediaOpinion': ' ', //多媒体意见. 'first': true, //是否是第一条待办,用于却别待办和草稿. 'properties': { 'serialVersionUID': 1, 'prevTaskIdentity': ' ', //上一人工环节处理人. 'prevTaskIdentityList': [ ' ' ], //上一人工环节处理人列表. 'title': ' ', //标题. 'opinion': ' ', //意见. 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表. 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象. 'pauseStartTime': '2021-07-05 19:18:03', //待办计时暂停工作时间时长(分钟). 'pauseWorkTimeMinutes': 1, //待办计时暂停工作时间时长(分钟). 'pauseMinutes': 1, //待办计时暂停自然时间时长(分钟). 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'series': ' ', //操作序列号,同次操作将会有相同的序列号. 'pause': true, //待办是否处于挂起暂停计时状态. 'workCreateType': ' ', //工作创建类型,surface,assign 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 287 static getTaskCompletedList(callbackopt, erroropt) &rarr; {Array.&lt;TaskCompleted>} 获取当前流程实例的所有已办对象。如果流程实例没有任何人处理过，则返回一个空数组。 Syntax //本样例以同步执行 var taskCompletedList = this.workContext.getTaskCompletedList(); //本样例以异步执行 this.workContext.getTaskCompletedList( function(taskCompletedList){ //taskCompletedList 为已办数组 }); Parameters callback function &lt;optional&gt; 正确获取已办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已办数组出错时的回调。 Returns Array.&lt;TaskCompleted> 已办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //待办.已办的开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //task转成taskCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //task转成taskCompleted的完成月份,也就是任务的完成时间,用于filter过滤. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //WorkCompleted ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'empowerToIdentity': ' ', //授权给谁处理,在processType=empower时记录授权对象 'empowerFromIdentity': ' ', //授权自Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在部门. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'task': ' ', //Task ID. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'processingType': ' ', //流程流转类型 'retractTime': '2021-07-05 19:18:03', //retract时间. 'latest': true, //同一Job中同一用户是否是最新的,多人可以有多条已办,页面显示的时候可以通过此标记仅显示一条最新的. 'mediaOpinion': ' ', //多媒体意见. 'pressCount': 1, //提醒次数 'pressTime': '2021-07-05 19:18:03', //提醒办理时间. 'pressActivityToken': ' ', //提醒办理环节. 'currentActivityName': ' ', //当前活动名称. 'joinInquire': true, //已办是否参与路由. 'properties': { 'prevTaskIdentityList': [ ' ' ], //从task带过来的上一处理人 'nextTaskIdentityList': [ ' ' ], //后续处理人 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 315 static getTaskCompletedListByJob(callbackopt, erroropt) &rarr; {Array.&lt;TaskCompleted>} 根据当前工作的job获取当前流程实例的所有已办对象。如果流程实例没有任何人处理过，则返回一个空数组。 Syntax //本样例以同步执行 var taskCompletedList = this.workContext.getTaskCompletedListByJob(); //本样例以异步执行 this.workContext.getTaskCompletedListByJob( function(taskCompletedList){ //taskCompletedList 为已办数组 }); Parameters callback function &lt;optional&gt; 正确获取已办数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已办数组出错时的回调。 Returns Array.&lt;TaskCompleted> 已办任务列表. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //待办.已办的开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //task转成taskCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //task转成taskCompleted的完成月份,也就是任务的完成时间,用于filter过滤. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //WorkCompleted ID. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'empowerToIdentity': ' ', //授权给谁处理,在processType=empower时记录授权对象 'empowerFromIdentity': ' ', //授权自Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在部门. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'expireTime': '2021-07-05 19:18:03', //任务截止时间. 'routeName': ' ', //选择的路由名称. 'opinion': ' ', //处理意见. 'task': ' ', //Task ID. 'expired': true, //是否超时. 'duration': 1, //工作时长(分钟数). 'processingType': ' ', //流程流转类型 'retractTime': '2021-07-05 19:18:03', //retract时间. 'latest': true, //同一Job中同一用户是否是最新的,多人可以有多条已办,页面显示的时候可以通过此标记仅显示一条最新的. 'mediaOpinion': ' ', //多媒体意见. 'pressCount': 1, //提醒次数 'pressTime': '2021-07-05 19:18:03', //提醒办理时间. 'pressActivityToken': ' ', //提醒办理环节. 'currentActivityName': ' ', //当前活动名称. 'joinInquire': true, //已办是否参与路由. 'properties': { 'prevTaskIdentityList': [ ' ' ], //从task带过来的上一处理人 'nextTaskIdentityList': [ ' ' ], //后续处理人 'prevTaskList': [ { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 } ], //上一人工环节待办对象列表 'prevTask': { 'routeName': ' ', 'unit': ' ', 'identity': ' ', 'person': ' ', 'opinion': ' ', 'startTime': '2021-07-05 19:18:03', 'completedTime': '2021-07-05 19:18:03', 'serialVersionUID': 1 }, //上一人工环节最近待办对象 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 343 static getReadList(callbackopt, erroropt) &rarr; {Array.&lt;Read>} Summary 获取当前流程实例的所有待阅对象数组。如果流程实例无待阅，则返回一个空数组。 Syntax //本样例以同步执行 var readList = this.workContext.getReadList(); //本样例以异步执行 this.workContext.getReadList( function(readList){ //readList 为待阅数组 }); Parameters callback function &lt;optional&gt; 正确获取待阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待阅数组出错时的回调。 Returns Array.&lt;Read> 当前流程实例的所有待阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //完成工作ID. 'completed': true, //整个job是否已经完成. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID,针对已完成工作添加待阅字段为空. 'activityName': '部门领导审核', //活动名称,针对已完成工作添加待阅字段为空. 'activityAlias': ' ', //活动别名,针对已完成工作添加待阅字段为空. 'activityDescription': ' ', //活动说明,针对已完成工作添加待阅字段为空. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型,针对已完成工作添加待阅字段为空. 'activityToken': ' ', //活动Token,针对已完成工作添加待阅字段为空. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'viewed': true, //是否查看过. 'currentActivityName': ' ', //当前活动名称. 'properties': { 'serialVersionUID': 1, 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 371 static getReadListByJob(callbackopt, erroropt) &rarr; {Array.&lt;Read>} Summary 根据当前工作的job获取当前流程实例的所有待阅对象。如果流程实例无待阅，则返回一个空数组。 Syntax //本样例以同步执行 var readList = this.workContext.getReadListByJob(); //本样例以异步执行 this.workContext.getReadListByJob( function(readList){ //readList 为待阅数组 }); Parameters callback function &lt;optional&gt; 正确获取待阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取待阅数组出错时的回调。 Returns Array.&lt;Read> 当前流程实例的所有待阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //完成工作ID. 'completed': true, //整个job是否已经完成. 'title': 'XX7月北京出差报销审批', //标题. 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID,针对已完成工作添加待阅字段为空. 'activityName': '部门领导审核', //活动名称,针对已完成工作添加待阅字段为空. 'activityAlias': ' ', //活动别名,针对已完成工作添加待阅字段为空. 'activityDescription': ' ', //活动说明,针对已完成工作添加待阅字段为空. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型,针对已完成工作添加待阅字段为空. 'activityToken': ' ', //活动Token,针对已完成工作添加待阅字段为空. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'viewed': true, //是否查看过. 'currentActivityName': ' ', //当前活动名称. 'properties': { 'serialVersionUID': 1, 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 398 static getReadCompletedList(callbackopt, erroropt) &rarr; {Array.&lt;ReadCompleted>} Summary 获取当前流程实例的所有已阅对象。如果流程实例没有已阅，则返回一个空数组。 Syntax //本样例以同步执行 var readCompletedList = this.workContext.getReadCompletedList(); //本样例以异步执行 this.workContext.getReadCompletedList( function(readCompletedList){ //readCompletedList 为已阅数组 }); Parameters callback function &lt;optional&gt; 正确获取已阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已阅数组出错时的回调。 Returns Array.&lt;ReadCompleted> 当前流程实例的所有已阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //工作ID. 'completed': true, //整个job是否已经完成. 'read': ' ', //待阅Id. 'title': 'XX7月北京出差报销审批', //标题. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //read转成readCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //read转成readCompleted的完成月份,也就是任务的完成时间,用于filter过滤.. 'duration': 1, //工作时长(分钟数). 'currentActivityName': ' ', //当前活动名称. 'properties': { 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 426 static getReadCompletedListByJob(callbackopt, erroropt) &rarr; {Array.&lt;ReadCompleted>} Summary 根据当前工作的job获取当前流程实例的所有已阅对象。如果流程实例没有已阅，则返回一个空数组。 Syntax //本样例以同步执行 var readCompletedList = this.workContext.getReadCompletedListByJob(); //本样例以异步执行 this.workContext.getReadCompletedListByJob( function(readCompletedList){ //readCompletedList 为已阅数组 }); Parameters callback function &lt;optional&gt; 正确获取已阅数组的回调，如果有此参数，本方法以异步执行，否则同步执行 error function &lt;optional&gt; 获取已阅数组出错时的回调。 Returns Array.&lt;ReadCompleted> 当前流程实例的所有已阅对象数组. { 'id': 'dd476045-7c79-44f7-9dba-f51d322de40f', //数据库主键,自动生成. 'job': ' ', //任务. 'work': '854e2c22-718e-48bb-98db-96f4b43e7ee8', //工作ID. 'workCompleted': ' ', //工作ID. 'completed': true, //整个job是否已经完成. 'read': ' ', //待阅Id. 'title': 'XX7月北京出差报销审批', //标题. 'application': '1dc23336-6be6-402b-bed6-36e707a1dd17', //应用. 'applicationName': '财务管理', //应用名称. 'applicationAlias': 'finance', //应用别名. 'process': '2207db11-dddf-4ebd-864d-3819f3e173c6', //流程ID. 'processName': '报销审批流程', //流程名称. 'processAlias': ' ', //流程别名. 'serial': ' ', //编号 'person': 'XXX@huqi@P', //当前处理人 'identity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //当前处理人Identity 'unit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //当前处理人所在组织. 'opinion': ' ', //处理意见. 'activity': '13d15daf-2ac5-4c1b-a669-1607a0e5ed15', //活动ID. 'activityName': '部门领导审核', //活动名称. 'activityAlias': ' ', //活动别名. 'activityDescription': ' ', //活动说明. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'creatorPerson': 'XX@huqi@P', //创建人 'creatorIdentity': 'XX@481c9edc-5fb5-41f1-b5c2-6ea609082cdb@I', //创建人Identity 'creatorUnit': 'XX@c448d8bb-98b8-4305-9d3f-12537723cfcc@U', //创建人组织 'startTime': '2018-09-27 22:49:22', //开始时间. 'startTimeMonth': '2018-09', //用于在Filter中分类使用. 'completedTime': '2021-07-05 19:18:03', //read转成readCompleted的完成时间,也就是任务的完成时间. 'completedTimeMonth': ' ', //read转成readCompleted的完成月份,也就是任务的完成时间,用于filter过滤.. 'duration': 1, //工作时长(分钟数). 'currentActivityName': ' ', //当前活动名称. 'properties': { 'title': ' ', //标题 'opinion': ' ', //意见 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'stringValue04': ' ', //业务数据String值04. 'stringValue05': ' ', //业务数据String值05. 'stringValue06': ' ', //业务数据String值06. 'stringValue07': ' ', //业务数据String值07. 'stringValue08': ' ', //业务数据String值08. 'stringValue09': ' ', //业务数据String值09. 'stringValue10': ' ', //业务数据String值10. 'booleanValue01': true, //业务数据Boolean值01. 'booleanValue02': true, //业务数据Boolean值02. 'doubleValue01': 1, //业务数据Double值01. 'doubleValue02': 1, //业务数据Double值02. 'doubleValue03': 1, //业务数据Double值03. 'doubleValue04': 1, //业务数据Double值04. 'doubleValue05': 1, //业务数据Double值05. 'longValue01': 1, //业务数据Long值01. 'longValue02': 1, //业务数据Long值02. 'longValue03': 1, //业务数据Long值03. 'longValue04': 1, //业务数据Long值04. 'longValue05': 1, //业务数据Long值05. 'dateTimeValue01': '2021-07-05 19:18:03', //业务数据DateTime值01. 'dateTimeValue02': '2021-07-05 19:18:03', //业务数据DateTime值02. 'dateTimeValue03': '2021-07-05 19:18:03', //业务数据DateTime值03. 'dateTimeValue04': '2021-07-05 19:18:03', //业务数据DateTime值04. 'dateTimeValue05': '2021-07-05 19:18:03', //业务数据DateTime值05. 'dateValue01': '2021-07-05 19:18:03', //业务数据Date值01. 'dateValue02': '2021-07-05 19:18:03', //业务数据Date值02. 'timeValue01': '2021-07-05 19:18:03', //业务数据Time值01. 'timeValue02': '2021-07-05 19:18:03', //业务数据Time值02. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 453 static getControl() &rarr; {WorkControl} Summary 获取当前人对流程实例的权限。 Syntax var control = this.workContext.getControl(); Returns WorkControl 流程实例权限对象. { 'allowVisit': true, //是否允许访问 'allowProcessing': true, //是否允许流转 'allowReadProcessing': false, //是否有待阅 'allowSave': true, //是否允许保存业务数据 'allowReset': false, //是否允许重置处理人 'allowRetract': false, //是否允许撤回 'allowReroute': false, //是否允许调度 'allowDelete': true, //是否允许删除流程实例 'allowRollback': false, //是否允许流程回溯 'allowAddSplit': false, //是否允许增加分支 'allowPress': false, //是否允许催办 } Source o2_core/o2/xScript/Environment.js, line 485 static getWorkLogList() &rarr; {Array.&lt;WorkLog>} Summary 获取当前流程实例的所有流程记录(WorkLog)。 Syntax var workLogList = this.workContext.getWorkLogList(); Returns Array.&lt;WorkLog> 流程记录对象. { 'id': ' ', //数据库主键,自动生成. 'fromActivity': ' ', //开始活动Id 'fromActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //开始活动类型. 'fromActivityName': ' ', //开始活动名称 'fromActivityAlias': ' ', //开始活动别名 'fromActivityToken': ' ', //开始节点Token 'fromGroup': ' ', //开始分组 'fromOpinionGroup': ' ', //开始意见分组 'fromTime': '2021-07-05 19:18:03', //开始时间. 'arrivedActivity': ' ', //结束活动Id，可能为空，如果是未Connected的流程记录 'arrivedActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //结束活动类型. 'arrivedActivityName': ' ', //结束活动名称. 'arrivedActivityAlias': ' ', //结束活动名称. 'arrivedActivityToken': ' ', //结束活动Token. 'arrivedGroup': ' ', //到达分组 'arrivedOpinionGroup': ' ', //到达意见分组 'arrivedTime': '2021-07-05 19:18:03', //完成时间. 'routeName': ' ', //到达节点使用Route Name. 'connected': true, //是否已经完整填写了From和Arrived. 'splitting': true //是否是拆分中的工作,用于回溯时候将值改回去。 } Source o2_core/o2/xScript/Environment.js, line 507 static getRecordList() &rarr; {Array.&lt;Record>} Summary 获取当前流程实例的所有流程记录(Record)。 Syntax var recordList = this.workContext.getRecordList(); Returns Array.&lt;Record> 流程记录(Record)对象. { 'id': ' ', //数据库主键,自动生成. 'application': ' ', //应用. 'process': ' ', //流程ID. 'job': ' ', //任务标识 'work': ' ', //工作 'workCompleted': ' ', //已完成工作 'completed': true, //工作是否已经完成. 'display': true, //是否显示. 'order': 1, //显示排序. 'properties': { 'serialVersionUID': 1, 'identityOrderNumber': 1, //record中记录的处理人身份排序值. 'unitOrderNumber': 1, //record中记录的处理人身份所在组织排序值. 'unitLevelOrderNumber': ' ', //record中记录的处理人身份所在组织层级排序值. 'unitDutyList': [ ' ' ], //record中记录的处理人身份所拥有的组织职务,向上递归. 'nextManualList': [ { 'activity': ' ', //活动 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型 'activityName': ' ', //活动名称 'activityAlias': ' ', //活动别名 'activityToken': ' ', //活动活动令牌 'taskIdentityList': [ ' ' ] //待办处理人 } ], //后续人工环节 'nextManualTaskIdentityList': [ ' ' ], //后续人工环节处理人 'empowerToPerson': ' ', //授权给处理人 'empowerToIdentity': ' ', //授权给处理人的身份 'empowerFromIdentity': ' ', //授权自身份 'empowerToUnit': ' ', //授权给处理人的组织 'routeName': ' ', //路由名称 'opinion': ' ', //意见 'mediaOpinion': ' ', //多媒体意见 'startTime': '2021-07-05 19:18:03', //开始时间. 'elapsed': 1, //耗时 'fromGroup': ' ', //活动组 'fromOpinionGroup': ' ', //意见组 'serialVersionUID': 1, 'serialVersionUID': 1 }, //属性对象存储字段. 'fromActivity': ' ', //开始活动Id 'fromActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //开始活动类型. 'fromActivityName': ' ', //开始活动名称 'fromActivityAlias': ' ', //开始活动别名 'fromActivityToken': ' ', //开始节点Token 'arrivedActivity': ' ', //结束活动Id，可能为空，如果是未Connected的流程记录 'arrivedActivityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //结束活动类型. 'arrivedActivityName': ' ', //结束活动名称. 'arrivedActivityAlias': ' ', //结束活动名称. 'arrivedActivityToken': ' ', //结束活动Token. 'recordTime': '2021-07-05 19:18:03', //记录时间. 'person': ' ', //记录人员 'identity': ' ', //记录身份 'unit': ' ', //记录人员所在组织. 'type': ' ', //类型. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 517 static getAttachmentList() &rarr; {Array.&lt;WorkAttachmentData>} Summary 获取当前流程实例的附件对象列表。 Syntax var attachmentList = this.workContext.getAttachmentList(); Returns Array.&lt;WorkAttachmentData> 附件数据. { 'id': '56c4e86f-a4c8-4cc2-a150-1a0d2c5febcb', //数据库主键,自动生成. 'name': '133203a2-92e6-4653-9954-161b72ddb7f9.png', //文件名称,带扩展名的文件名. 'extension': 'png', //扩展名。 'storage': ' ', //关联的存储名称. 'length': 43864, //文件大小. 'workCreateTime': '2021-07-05 19:18:03', //关联的Work创建时间，用于分类目录。 'application': ' ', //应用ID. 'process': ' ', //流程ID. 'job': ' ', //任务. 'person': 'xx@huqi@P', //文件所有者 'lastUpdateTime': '2018-09-27 15:50:34', //最后更新时间 'lastUpdatePerson': 'xx@huqi@P', //最后更新人员 'activity': 'e31ad938-c495-45a6-8d77-b8a9b61a165b', //活动ID. 'activityName': '申请人', //活动名称. 'activityType': ' ',//可选值:agent,begin,cancel,choice,delay,end,embed,invoke,manual,merge,message,parallel,service,split, //活动类型. 'activityToken': ' ', //活动Token. 'completed': true, //整个job是否已经完成. 'workCompleted': ' ', //工作ID. 'work': ' ', //已完成工作ID. 'site': '$mediaOpinion', //附件框分类. 'type': 'image/png', //根据流文件判断的文件类型. 'text': ' ', //文本. 'readIdentityList': [ ' ' ], //可以访问的身份. 'readUnitList': [ ' ' ], //可以访问的组织. 'editIdentityList': [ ' ' ], //可以修改的用户. 'editUnitList': [ ' ' ], //可以修改的组织. 'controllerIdentityList': [ ' ' ], //可以管理的用户. 'controllerUnitList': [ ' ' ], //可以管理的组织. 'deepPath': true, //是否使用更深的路径. 'orderNumber': 1, //排序号,升序排列,为空在最后 'divisionList': [ ' ' ], //分组. 'fromJob': ' ', //附件拷贝来源任务，仅soft拷贝模式存储. 'fromId': ' ', //附件拷贝来源附件ID，仅soft拷贝模式存储. 'fromPath': ' ', //附件拷贝来源存储路径，仅soft拷贝模式存储. 'stringValue01': ' ', //业务数据String值01. 'stringValue02': ' ', //业务数据String值02. 'stringValue03': ' ', //业务数据String值03. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/Environment.js, line 527 static getRouteList() &rarr; {Array.&lt;String>} Summary 获取当前待办的可选路由。与task对象中的routeNameList取值相同。 Syntax var routeList = this.workContext.getRouteList(); Returns Array.&lt;String> 路由字符串数组. Source o2_core/o2/xScript/Environment.js, line 537 "},"module-include.html":{"id":"module-include.html","url":"module-include.html","title":"include","kind":"Module","body":" Module include this.include是一个方法，当您在流程、门户或者内容管理中创建了脚本配置，可以使用this.include()用来引用脚本配置。 （建议使用表单中的预加载脚本，需要判断加载的时候才使用本方法加载脚本，此时建议异步加载有助于表单加载速度。） Syntax //您可以在表单、流程、视图和查询视图的各个嵌入脚本中，通过this.include()来引用本应用或其他应用的脚本配置，如下： this.include( optionsOrName, callback, async ) Parameters optionsOrName String | Object | Array.&lt;String> | Array.&lt;Object> 可以是脚本标识字符串（数组）或者是对象（数组）。 //如果需要引用本应用的脚本配置，将options设置为String或者String Array。 this.include('initScript') //脚本配置的名称、别名或id this.include(['initScript','initScript2']) //可以是字符串数组 //如果需要引用其他应用的脚本配置，将options设置为Object或者Object Array; this.include({ //type: 应用类型。可以为 portal process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在门户的A应用脚本中引用门户B应用的脚本配置，则type可以省略。 type : 'portal', application : '首页', // 门户、流程、CMS的名称、别名、id。 默认为当前应用 name : 'initScript' // 脚本配置的名称、别名或id }) this.include([ //也可以对象和字符串混合数组 { type : 'portal', application : '首页', name : 'initScript' }, 'initScript2' ]) callback function &lt;optional&gt; 加载后执行的回调方法 async Boolean &lt;optional&gt; 是否异步加载 Examples 样例一：在通用脚本中定义返回当前人员名称的方法，在各个门户应用都使用这个方法显示人员名称。 1、在门户应用中有一个commonApp的应用，在该应用中创建一个脚本，命名为initScript，并定义方法。 //定义一个方法 this.define('getUserName', function(){ return ( layout.desktop.session.user || layout.user ).name }.bind(this)) 2、在门户页面中添加事件'queryLoad',在事件中引入 initScript 脚本配置。 this.include({ type : 'portal', application : 'commonApp', name : 'initScript' }) 3、在门户页面的'load'事件中使用方法。 var userNameNode = this.page.get('userName').node; //获取Dom对象 var urerName = this.getUserName(); //使用initScript脚本中的方法 userNameNode.set('text', urerName ); //为DOM对象设置值 Source o2_core/o2/xScript/Environment.js, line 1880 Module include this.include是一个方法，当您在流程、门户或者内容管理中创建了脚本配置，可以使用this.include()用来引用脚本配置。 （建议使用表单中的预加载脚本，需要判断加载的时候才使用本方法加载脚本，此时建议异步加载有助于表单加载速度。） Syntax //您可以在表单、流程、视图和查询视图的各个嵌入脚本中，通过this.include()来引用本应用或其他应用的脚本配置，如下： this.include( optionsOrName, callback, async ) Parameters optionsOrName String | Object | Array.&lt;String> | Array.&lt;Object> 可以是脚本标识字符串（数组）或者是对象（数组）。 //如果需要引用本应用的脚本配置，将options设置为String或者String Array。 this.include('initScript') //脚本配置的名称、别名或id this.include(['initScript','initScript2']) //可以是字符串数组 //如果需要引用其他应用的脚本配置，将options设置为Object或者Object Array; this.include({ //type: 应用类型。可以为 portal process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在门户的A应用脚本中引用门户B应用的脚本配置，则type可以省略。 type : 'portal', application : '首页', // 门户、流程、CMS的名称、别名、id。 默认为当前应用 name : 'initScript' // 脚本配置的名称、别名或id }) this.include([ //也可以对象和字符串混合数组 { type : 'portal', application : '首页', name : 'initScript' }, 'initScript2' ]) callback function &lt;optional&gt; 加载后执行的回调方法 async Boolean &lt;optional&gt; 是否异步加载 Examples 样例一：在通用脚本中定义返回当前人员名称的方法，在各个门户应用都使用这个方法显示人员名称。 1、在门户应用中有一个commonApp的应用，在该应用中创建一个脚本，命名为initScript，并定义方法。 //定义一个方法 this.define('getUserName', function(){ return ( layout.desktop.session.user || layout.user ).name }.bind(this)) 2、在门户页面中添加事件'queryLoad',在事件中引入 initScript 脚本配置。 this.include({ type : 'portal', application : 'commonApp', name : 'initScript' }) 3、在门户页面的'load'事件中使用方法。 var userNameNode = this.page.get('userName').node; //获取Dom对象 var urerName = this.getUserName(); //使用initScript脚本中的方法 userNameNode.set('text', urerName ); //为DOM对象设置值 Source o2_core/o2/xScript/Environment.js, line 1880 "},"module-define.html":{"id":"module-define.html","url":"module-define.html","title":"define","kind":"Module","body":" Module define this.define是一个方法，您可以在流程、门户或者内容管理中创建脚本配置，在脚本配置中您可以通过this.define()来定义自己的方法。 通过这种方式定义方法，在不同的应用使用相同的方法名称也不会造成冲突。 Syntax this.define(name, fun, overwrite) Parameters name String 定义的方法名称。 fun function 定义的方法 overwrite Boolean &lt;optional&gt; 定义的方法是否能被覆盖重写。默认值为true。 Examples 样例：在通用脚本中定义返回当前人员名称的方法，在各个门户应用都使用这个方法显示人员名称。 1、在门户应用中有一个commonApp的应用，在该应用中创建一个脚本，命名为initScript，并定义方法。 //定义一个方法 this.define('getUserName', function(){ return ( layout.desktop.session.user || layout.user ).name }.bind(this)) 2、在门户页面中添加事件'queryLoad',在事件中引入 initScript 脚本配置。 this.include({ type : 'portal', application : 'commonApp', name : 'initScript' }) 3、在门户页面的'load'事件中使用方法。 var userNameNode = this.page.get('userName').node; //获取Dom对象 var urerName = this.getUserName(); //使用initScript脚本中的方法 userNameNode.set('text', urerName ); //为DOM对象设置值 Source o2_core/o2/xScript/Environment.js, line 2043 Module define this.define是一个方法，您可以在流程、门户或者内容管理中创建脚本配置，在脚本配置中您可以通过this.define()来定义自己的方法。 通过这种方式定义方法，在不同的应用使用相同的方法名称也不会造成冲突。 Syntax this.define(name, fun, overwrite) Parameters name String 定义的方法名称。 fun function 定义的方法 overwrite Boolean &lt;optional&gt; 定义的方法是否能被覆盖重写。默认值为true。 Examples 样例：在通用脚本中定义返回当前人员名称的方法，在各个门户应用都使用这个方法显示人员名称。 1、在门户应用中有一个commonApp的应用，在该应用中创建一个脚本，命名为initScript，并定义方法。 //定义一个方法 this.define('getUserName', function(){ return ( layout.desktop.session.user || layout.user ).name }.bind(this)) 2、在门户页面中添加事件'queryLoad',在事件中引入 initScript 脚本配置。 this.include({ type : 'portal', application : 'commonApp', name : 'initScript' }) 3、在门户页面的'load'事件中使用方法。 var userNameNode = this.page.get('userName').node; //获取Dom对象 var urerName = this.getUserName(); //使用initScript脚本中的方法 userNameNode.set('text', urerName ); //为DOM对象设置值 Source o2_core/o2/xScript/Environment.js, line 2043 "},"module-wait.html":{"id":"module-wait.html","url":"module-wait.html","title":"wait","kind":"Module","body":" Module wait this.wait是一个方法，可以用来处理异步调用时的页面加载。 该方法使用的具体场景：为了加快速度，需要一次性加载全部外部资源（如：数据字典、外部JS、内容管理文档等）后，再进行表单的加载。 this.wait需和this.goon配合使用。 目前只有流程表单的queryload事件支持此方法。 Usable Range Process Syntax var resolve = this.wait(); //让表单停止加载页面 if (resolve &amp;&amp; resolve.cb){ resolve.cb(); //通过 resolve.cb() 方法继续执行表单加载 }else{ //如果没有发生异步，则resolve.cb方法不存在， //所以在回调中中使用this.goon();使表单继续加载 this.goon(); } Example 需要在加载数据字典，内容管理文档数据，按照条件获取的脚本后，再进行加载表单。 var resolve = this.wait(); //this.wait()让表单加载等待回调 var scriptLoaded = false; //脚本是否加载完成标识，按条件判断的脚本才建议用this.include(),否则使用预加载脚本更快。 var documentLoaded = false; //内容管理文档是否加载完成标识 var dictLoaded = true; //数据字典是否加载完成标识 //检查是否全部资源已加载，如果是继续加载表单 var checkLoad = function(){ if (scriptLoaded &amp;&amp; documentLoaded &amp;&amp; dictLoaded){ //各种资源以及加载完成 if (resolve &amp;&amp; resolve.cb){ resolve.cb(); //通过 resolve.cb() 方法继续执行表单加载 }else{ //如果没有发生异步，则resolve.cb方法不存在， //所以在回调中中使用this.goon();使表单继续加载 this.goon(); } } }.bind(this); //判断内容管理文档加载 if( this.data.documentId ){ //异步载入内容管理文档 o2.Actions.get('x_cms_assemble_control').getDocument(this.data.documentId, function (json) { this.form.documentJson = json; //将数据存在this.form上，以便其他地方使用 documentLoaded = true; //标记内容管理加载完成 checkLoad(); //检查全部资源是否完成加载 }.bind(this), null, true); //true 为异步加载标志 }else{ documentLoaded = true; ////标记内容管理加载完成 checkLoad(); //检查全部资源是否完成加载 } //判断脚本加载 if( this.data.scriptName ){ //假设scriptName为判断条件 //加载脚本 this.include( this.data.scriptName, function(){ //第二个参数为异步加载后的回调 scriptLoaded = true; //标记脚本加载完成 checkLoad(); //检查全部资源是否完成加载 }, true ); //第三个参数表示异步 }else{ scriptLoaded = true; ////标记脚本加载完成 checkLoad(); //检查全部资源是否完成加载 } //加载数据字典bulletinDictionary的category数据 var dict = new Dict('bulletinDictionary'); dict.get('category', function(data){ //成功的回调 this.form.bulletinCategory = data; //将数据存在this.form上，以便其他地方使用 dictLoaded = true; //标记数据字典加载完成 checkLoad(); //检查全部资源是否完成加载 }.bind(this), function(xhr){ //错误的回调 dictLoaded = true; ////标记数据字典加载完成 checkLoad(); //检查全部资源是否完成加载 }, true //异步执行 ) Source o2_core/o2/xScript/Environment.js, line 2096 Module wait this.wait是一个方法，可以用来处理异步调用时的页面加载。 该方法使用的具体场景：为了加快速度，需要一次性加载全部外部资源（如：数据字典、外部JS、内容管理文档等）后，再进行表单的加载。 this.wait需和this.goon配合使用。 目前只有流程表单的queryload事件支持此方法。 Usable Range Process Syntax var resolve = this.wait(); //让表单停止加载页面 if (resolve &amp;&amp; resolve.cb){ resolve.cb(); //通过 resolve.cb() 方法继续执行表单加载 }else{ //如果没有发生异步，则resolve.cb方法不存在， //所以在回调中中使用this.goon();使表单继续加载 this.goon(); } Example 需要在加载数据字典，内容管理文档数据，按照条件获取的脚本后，再进行加载表单。 var resolve = this.wait(); //this.wait()让表单加载等待回调 var scriptLoaded = false; //脚本是否加载完成标识，按条件判断的脚本才建议用this.include(),否则使用预加载脚本更快。 var documentLoaded = false; //内容管理文档是否加载完成标识 var dictLoaded = true; //数据字典是否加载完成标识 //检查是否全部资源已加载，如果是继续加载表单 var checkLoad = function(){ if (scriptLoaded &amp;&amp; documentLoaded &amp;&amp; dictLoaded){ //各种资源以及加载完成 if (resolve &amp;&amp; resolve.cb){ resolve.cb(); //通过 resolve.cb() 方法继续执行表单加载 }else{ //如果没有发生异步，则resolve.cb方法不存在， //所以在回调中中使用this.goon();使表单继续加载 this.goon(); } } }.bind(this); //判断内容管理文档加载 if( this.data.documentId ){ //异步载入内容管理文档 o2.Actions.get('x_cms_assemble_control').getDocument(this.data.documentId, function (json) { this.form.documentJson = json; //将数据存在this.form上，以便其他地方使用 documentLoaded = true; //标记内容管理加载完成 checkLoad(); //检查全部资源是否完成加载 }.bind(this), null, true); //true 为异步加载标志 }else{ documentLoaded = true; ////标记内容管理加载完成 checkLoad(); //检查全部资源是否完成加载 } //判断脚本加载 if( this.data.scriptName ){ //假设scriptName为判断条件 //加载脚本 this.include( this.data.scriptName, function(){ //第二个参数为异步加载后的回调 scriptLoaded = true; //标记脚本加载完成 checkLoad(); //检查全部资源是否完成加载 }, true ); //第三个参数表示异步 }else{ scriptLoaded = true; ////标记脚本加载完成 checkLoad(); //检查全部资源是否完成加载 } //加载数据字典bulletinDictionary的category数据 var dict = new Dict('bulletinDictionary'); dict.get('category', function(data){ //成功的回调 this.form.bulletinCategory = data; //将数据存在this.form上，以便其他地方使用 dictLoaded = true; //标记数据字典加载完成 checkLoad(); //检查全部资源是否完成加载 }.bind(this), function(xhr){ //错误的回调 dictLoaded = true; ////标记数据字典加载完成 checkLoad(); //检查全部资源是否完成加载 }, true //异步执行 ) Source o2_core/o2/xScript/Environment.js, line 2096 "},"module-page.html":{"id":"module-page.html","url":"module-page.html","title":"page","kind":"Module","body":" Module page page对象可在门户页面中可用。它的很多方法与form类似。（仅前端脚本可用） Usable Range Portal Syntax //您可以在门户表单中，通过this来获取page对象，如下： var page = this.page; Source o2_core/o2/xScript/PageEnvironment.js, line 1479 Members static parameters 在打开的页面的任意脚本中，获取传入的参数。 Syntax var par = this.page.parameters Example //打开页面时传入参数： this.form.openPortal(id, '', {'type': 'my type'}); //在打开的页面的任意脚本中，可以获取parameters： var par = this.page.parameters; //par的内容：{'type': 'my type'} Source o2_core/o2/xScript/PageEnvironment.js, line 1961 Methods static toPage(name, paropt, paropt) 跳转到当前门户的指定页面。（仅门户页面脚本可用） Syntax //跳转到当前门户的指定页面。 this.page.toPage( name, par ); Parameters name String 要跳转的页面名称 par Object &lt;optional&gt; 要传入被打开页面的数据。在被打开的页面可以用this.page.parameters获取 par Boolean &lt;optional&gt; 页面跳转的时候，不往History里增加历史状态，默认为false Example this.page.toPage('列表页面', {'key': '发文列表'});//打开“列表页面”，并传入一个json数据。 //在列表页面中，通过this.page.parameters获取传入的数据。 var key = this.page.parameters.key; //key='发文列表' Source o2_core/o2/xScript/PageEnvironment.js, line 1489 static toPortal(portal, pageopt, paropt) 跳转到指定门户页面。（仅门户页面脚本可用） Syntax this.page.toPortal( portal, page, par ); Parameters portal String 要跳转的门户名称。 page String &lt;optional&gt; 要打开的门户的页面名称。为空则打开指定门户的默认首页。 par String &lt;optional&gt; 在被打开的页面可以用this.page.parameters获取。 Example this.page.toPortal('公文门户', '列表页面', {'key': '发文列表'});//打开“公文门户”的“列表页面”，并传入一个json数据。 //在列表页面中，通过this.page.parameters获取传入的数据。 var key = this.page.parameters.key; //key='发文列表' Source o2_core/o2/xScript/PageEnvironment.js, line 1508 static getInfor() 获取当前页面的基本信息 See module:form.getInfor Source o2_core/o2/xScript/PageEnvironment.js, line 1525 static getApp() 获取打开当前页面的component对象。 See module:form.getApp Source o2_core/o2/xScript/PageEnvironment.js, line 1532 static node() 获取page对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/PageEnvironment.js, line 1539 static get() 获取页面元素对象。 See module:form.get Source o2_core/o2/xScript/PageEnvironment.js, line 1546 static getWidgetModule(widgetId, fieldId) &rarr; {FormComponent} 获取指定部件元素对象。 Syntax this.page.getWidgetModule( widgetId, fieldId ); Parameters widgetId String 在主页面嵌入部件时用的标识。 fieldId String 部件内组件标识。 See module:form.get Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example 1、设计了一个部件，包含一个设计元素subject。 2、在主页面里两次嵌入1步骤创建的部件，一个标识是widget_1, widget_2。 var module = this.page.getWidgetModule( 'widget_1', 'subject'); //部件widget_1的subject组件 var data2 = this.page.getWidgetModule( 'widget_2', 'subject').getData(); //部件widget_2的subject组件的值 Source o2_core/o2/xScript/PageEnvironment.js, line 1553 static getField() 获取页面中可输入的字段元素对象 See module:form.getField Source o2_core/o2/xScript/PageEnvironment.js, line 1575 static close() 关闭当前页面 See module:form.close Source o2_core/o2/xScript/PageEnvironment.js, line 1587 static confirm() 弹出一个确认框 See module:form.confirm Source o2_core/o2/xScript/PageEnvironment.js, line 1598 static alert() 显示一个带关闭按钮的信息框 See module:form.alert Source o2_core/o2/xScript/PageEnvironment.js, line 1625 static notice() 显示一个信息框 See module:form.notice Source o2_core/o2/xScript/PageEnvironment.js, line 1634 static addEvent() 给页面添加事件。 See module:form.addEvent Source o2_core/o2/xScript/PageEnvironment.js, line 1642 static openWork() 打开一个在流转或已完成的流程实例 See module:form.openWork Source o2_core/o2/xScript/PageEnvironment.js, line 1653 static openJob() 使用流程的jobId打开工作 See module:form.openJob Source o2_core/o2/xScript/PageEnvironment.js, line 1666 static openDocument() 打开一个内容管理文档 See module:form.openDocument Source o2_core/o2/xScript/PageEnvironment.js, line 1763 static openPortal() 打开一个门户页面 See module:form.openPortal Source o2_core/o2/xScript/PageEnvironment.js, line 1774 static openCMS() 打开一个内容管理栏目（应用） See module:form.openCMS Source o2_core/o2/xScript/PageEnvironment.js, line 1804 static openProcess() 打开一个流程应用 See module:form.openProcess Source o2_core/o2/xScript/PageEnvironment.js, line 1820 static openApplication() 打开一个任意一个component应用 See module:form.openApplication Source o2_core/o2/xScript/PageEnvironment.js, line 1836 static createDocument() 创建一个内容管理文档 See module:form.createDocument Source o2_core/o2/xScript/PageEnvironment.js, line 1844 static startProcess() 启动一个流程实例 See module:form.startProcess Source o2_core/o2/xScript/PageEnvironment.js, line 1897 static getWidgetPrameters() &rarr; {Object} 在嵌入部件的时候，可以在主页面上传入参数。通过本方法，可以在对应部件或者部件元素的脚本中获取传入的参数。 Syntax var par = this.page.getWidgetPrameters(); Returns Object 任意数据类型，根据传入的参数决定。 Example //在主页面嵌入部件的地方传入参数： return {'type': 'my type'}; //在对应部件脚本中，可以获取parameters： var par = this.page.getWidgetPrameters(); //par的内容：{'type': 'my type'} Source o2_core/o2/xScript/PageEnvironment.js, line 1978 Module page page对象可在门户页面中可用。它的很多方法与form类似。（仅前端脚本可用） Usable Range Portal Syntax //您可以在门户表单中，通过this来获取page对象，如下： var page = this.page; Source o2_core/o2/xScript/PageEnvironment.js, line 1479 Members static parameters 在打开的页面的任意脚本中，获取传入的参数。 Syntax var par = this.page.parameters Example //打开页面时传入参数： this.form.openPortal(id, '', {'type': 'my type'}); //在打开的页面的任意脚本中，可以获取parameters： var par = this.page.parameters; //par的内容：{'type': 'my type'} Source o2_core/o2/xScript/PageEnvironment.js, line 1961 Methods static toPage(name, paropt, paropt) 跳转到当前门户的指定页面。（仅门户页面脚本可用） Syntax //跳转到当前门户的指定页面。 this.page.toPage( name, par ); Parameters name String 要跳转的页面名称 par Object &lt;optional&gt; 要传入被打开页面的数据。在被打开的页面可以用this.page.parameters获取 par Boolean &lt;optional&gt; 页面跳转的时候，不往History里增加历史状态，默认为false Example this.page.toPage('列表页面', {'key': '发文列表'});//打开“列表页面”，并传入一个json数据。 //在列表页面中，通过this.page.parameters获取传入的数据。 var key = this.page.parameters.key; //key='发文列表' Source o2_core/o2/xScript/PageEnvironment.js, line 1489 static toPortal(portal, pageopt, paropt) 跳转到指定门户页面。（仅门户页面脚本可用） Syntax this.page.toPortal( portal, page, par ); Parameters portal String 要跳转的门户名称。 page String &lt;optional&gt; 要打开的门户的页面名称。为空则打开指定门户的默认首页。 par String &lt;optional&gt; 在被打开的页面可以用this.page.parameters获取。 Example this.page.toPortal('公文门户', '列表页面', {'key': '发文列表'});//打开“公文门户”的“列表页面”，并传入一个json数据。 //在列表页面中，通过this.page.parameters获取传入的数据。 var key = this.page.parameters.key; //key='发文列表' Source o2_core/o2/xScript/PageEnvironment.js, line 1508 static getInfor() 获取当前页面的基本信息 See module:form.getInfor Source o2_core/o2/xScript/PageEnvironment.js, line 1525 static getApp() 获取打开当前页面的component对象。 See module:form.getApp Source o2_core/o2/xScript/PageEnvironment.js, line 1532 static node() 获取page对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/PageEnvironment.js, line 1539 static get() 获取页面元素对象。 See module:form.get Source o2_core/o2/xScript/PageEnvironment.js, line 1546 static getWidgetModule(widgetId, fieldId) &rarr; {FormComponent} 获取指定部件元素对象。 Syntax this.page.getWidgetModule( widgetId, fieldId ); Parameters widgetId String 在主页面嵌入部件时用的标识。 fieldId String 部件内组件标识。 See module:form.get Returns FormComponent 请查看本文档的Classes导航下的FormComponents。 Example 1、设计了一个部件，包含一个设计元素subject。 2、在主页面里两次嵌入1步骤创建的部件，一个标识是widget_1, widget_2。 var module = this.page.getWidgetModule( 'widget_1', 'subject'); //部件widget_1的subject组件 var data2 = this.page.getWidgetModule( 'widget_2', 'subject').getData(); //部件widget_2的subject组件的值 Source o2_core/o2/xScript/PageEnvironment.js, line 1553 static getField() 获取页面中可输入的字段元素对象 See module:form.getField Source o2_core/o2/xScript/PageEnvironment.js, line 1575 static close() 关闭当前页面 See module:form.close Source o2_core/o2/xScript/PageEnvironment.js, line 1587 static confirm() 弹出一个确认框 See module:form.confirm Source o2_core/o2/xScript/PageEnvironment.js, line 1598 static alert() 显示一个带关闭按钮的信息框 See module:form.alert Source o2_core/o2/xScript/PageEnvironment.js, line 1625 static notice() 显示一个信息框 See module:form.notice Source o2_core/o2/xScript/PageEnvironment.js, line 1634 static addEvent() 给页面添加事件。 See module:form.addEvent Source o2_core/o2/xScript/PageEnvironment.js, line 1642 static openWork() 打开一个在流转或已完成的流程实例 See module:form.openWork Source o2_core/o2/xScript/PageEnvironment.js, line 1653 static openJob() 使用流程的jobId打开工作 See module:form.openJob Source o2_core/o2/xScript/PageEnvironment.js, line 1666 static openDocument() 打开一个内容管理文档 See module:form.openDocument Source o2_core/o2/xScript/PageEnvironment.js, line 1763 static openPortal() 打开一个门户页面 See module:form.openPortal Source o2_core/o2/xScript/PageEnvironment.js, line 1774 static openCMS() 打开一个内容管理栏目（应用） See module:form.openCMS Source o2_core/o2/xScript/PageEnvironment.js, line 1804 static openProcess() 打开一个流程应用 See module:form.openProcess Source o2_core/o2/xScript/PageEnvironment.js, line 1820 static openApplication() 打开一个任意一个component应用 See module:form.openApplication Source o2_core/o2/xScript/PageEnvironment.js, line 1836 static createDocument() 创建一个内容管理文档 See module:form.createDocument Source o2_core/o2/xScript/PageEnvironment.js, line 1844 static startProcess() 启动一个流程实例 See module:form.startProcess Source o2_core/o2/xScript/PageEnvironment.js, line 1897 static getWidgetPrameters() &rarr; {Object} 在嵌入部件的时候，可以在主页面上传入参数。通过本方法，可以在对应部件或者部件元素的脚本中获取传入的参数。 Syntax var par = this.page.getWidgetPrameters(); Returns Object 任意数据类型，根据传入的参数决定。 Example //在主页面嵌入部件的地方传入参数： return {'type': 'my type'}; //在对应部件脚本中，可以获取parameters： var par = this.page.getWidgetPrameters(); //par的内容：{'type': 'my type'} Source o2_core/o2/xScript/PageEnvironment.js, line 1978 "},"module-Dict.html":{"id":"module-Dict.html","url":"module-Dict.html","title":"Dict","kind":"Module","body":" Module Dict this.Dict是一个工具类，如果您在流程、门户中创建了数据字典，可以使用this.Dict类对数据字典进行增删改查操作。 Syntax //您可以在页面、表单、流程各个嵌入脚本中，通过this.Dict()对本应用或其他应用的数据字典中的数据进行增删改查，如下： var dict = new this.Dict( options ) Parameters optionsOrName String | Object 数据字典标识字符串或者是对象。 如果对本应用的数据字典操作，将optionsOrName设置为string。 var dict = new this.Dict('bulletinDictionary'); //数据字典的名称、别名或id 如果需要对其他应用的数据字典进行操作，将options设置为JsonObject var dict = new this.Dict({ //type: 应用类型。可以为process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在流程的A应用脚本中引用流程B应用的脚本配置，则type可以省略。 type : 'cms', application : 'bulletin', //流程、CMS的名称、别名、id, 默认为当前应用 name : 'bulletinDictionary', // 数据字典的名称、别名、id enableAnonymous : true //允许用户在未登录的情况下读取cms的数据字典, type为process的时候此参数无效，默认为false }); Returns Object Dict对象 Source o2_core/o2/xScript/ViewEnvironment.js, line 222 Methods static get(pathopt, successopt, failureopt, asyncopt, refreshopt) &rarr; {Promise|Object|Array|String|Number|Boolean} 根据路径获取数据字典中的数据。 Syntax var data = dict.get( path, success, failure, async, refresh ) Parameters path String &lt;optional&gt; 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。当值为空的时候，表示获取数据字典中的所有数据。 success function &lt;optional&gt; 获取数据成功时的回调函数。 failure function &lt;optional&gt; 获取数据失败时的回调。 async Boolean &lt;optional&gt; 是否异步执行，默认为false。 refresh Boolean &lt;optional&gt; 是否忽略本地缓存直接从服务器获取，默认为false。 Returns Promise Object Array String Number Boolean 当async为true时返回Promise(Promise说明)； 否则返回数据字典的数据，类型和配置数据字典时候指定的一致。 Examples var dict = new this.Dict('bulletinDictionary'); //没有参数的时候，表示同步获取获取所有数据 var data = dict.get() //同步执行，获取category下key为subCategory的数据 var data = dict.get('category.subCategory'); //异步执行，使用回调处理数据，如果category为数组，获取第0项数据 dict.get('category.0', function(data){ //data 是数据字典的数据 }, function(xhr){ //xhr 为 xmlHttpRequest }, true //异步执行 ) //异步执行，使用Promise处理结果 var promise = dict.get('category', null, null, true); promise.then( function(data){ //data 是数据字典的数据 }) 已经配置好了如下图所示的数据字典 var dict = new this.Dict({ //type: 应用类型。可以为process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在流程的A应用脚本中引用流程B应用的脚本配置，则type可以省略。 type : 'cms', application : 'bulletin', //流程、CMS的名称、别名、id, 默认为当前应用 name : 'bulletinDictionary', // 数据字典的名称、别名、id enableAnonymous : true //允许用户在未登录的情况下读取cms的数据字典, type为process的时候此参数无效，默认为false }); var data = dict.get(); //data的值为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' } ] } var category = dict.get('category'); //category的值为 [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' } ] var array0 = dict.get('category.0'); //array0 的值为 { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' } var enable = dict.get('category.0.eanble'); //enable 的值为 true Source o2_core/o2/xScript/ViewEnvironment.js, line 247 add(path, data, successopt, failureopt) 根据路径新增数据字典的数据。 Syntax dict.add( path, data, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果path在数据字典中已有数据，且原有数据是数组，则数组添加一项；如果原有数据不是数组，则报错。 data Object | Array | String | Number | Boolean 需要新增的数据 success function &lt;optional&gt; 增加数据成功时的回调函数。 failure function &lt;optional&gt; 增加数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.add( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); 对get方法样例的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.add( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr, text, error){ //xhr 为 xmlHttpRequest, text 为错误文本， error为Error对象 }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'text': '系统公告', 'value': 'system' } ] } dict.add( 'category.2.sequence', 3 ); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ] } dict.add( 'archiveOptions', { 'yes' : '是', 'no' : '否' }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ], 'archiveOptions' : { 'yes' : '是', 'no' : '否' } } 下面是错误的赋值，如下： dict.add( 'category.3', { text : '系统公告', value : 'system' }); //出错，因为不能对数组下标直接赋值 dict.add( 'category.1.value', { text : '系统公告' } ); //出错，因为不能对已经存在的非数组路径赋值 Source o2_core/o2/xScript/ViewEnvironment.js, line 348 set(path, data, successopt, failureopt) 根据路径修改数据字典的数据。 Syntax dict.set( path, data, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果数据路径不存在，则报错。 data Object | Array | String | Number | Boolean 修改后的数据 success function &lt;optional&gt; 设置数据成功时的回调函数。 failure function &lt;optional&gt; 设置数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.set( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); 对Example add的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.set( 'archiveOptions', [ { text : '是' }, { text : '否' } ]); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } dict.set( 'category.2', { text : '县级公告', value : 'county' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); /数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'text': '县级公告', 'value': 'county' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } dict.set( 'category.1.sequence', 3 ); dict.set( 'category.2.sequence', 2 ); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'sequence': 2.0, 'text': '县级公告', 'value': 'county' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } 下面是错误的赋值： dict.set( 'category_1', { text : '公司公告' } ); //出错，因为category_1在数据字典中不存在 Source o2_core/o2/xScript/ViewEnvironment.js, line 468 delete(path, successopt, failureopt) 根据路径删除数据字典的数据。 Syntax dict.delete( path, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果数据路径不存在，则报错。 success function &lt;optional&gt; 删除数据成功时的回调函数。 failure function &lt;optional&gt; 删除数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.delete( 'category', function(){ }, function(xhr){ //xhr 为 xmlHttpRequest }); 对Example set的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.delete( 'archiveOptions'); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', * 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'sequence': 2.0, 'text': '县级公告', 'value': 'county' } ] } dict.delete( 'category.2.sequence', function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'text': '县级公告', 'value': 'county' } ] } dict.delete( 'category.2'); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' } ] } 下面是错误的删除： dict.delete( 'category_1' ); //出错，因为category_1在数据字典中不存在 Source o2_core/o2/xScript/ViewEnvironment.js, line 586 Module Dict this.Dict是一个工具类，如果您在流程、门户中创建了数据字典，可以使用this.Dict类对数据字典进行增删改查操作。 Syntax //您可以在页面、表单、流程各个嵌入脚本中，通过this.Dict()对本应用或其他应用的数据字典中的数据进行增删改查，如下： var dict = new this.Dict( options ) Parameters optionsOrName String | Object 数据字典标识字符串或者是对象。 如果对本应用的数据字典操作，将optionsOrName设置为string。 var dict = new this.Dict('bulletinDictionary'); //数据字典的名称、别名或id 如果需要对其他应用的数据字典进行操作，将options设置为JsonObject var dict = new this.Dict({ //type: 应用类型。可以为process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在流程的A应用脚本中引用流程B应用的脚本配置，则type可以省略。 type : 'cms', application : 'bulletin', //流程、CMS的名称、别名、id, 默认为当前应用 name : 'bulletinDictionary', // 数据字典的名称、别名、id enableAnonymous : true //允许用户在未登录的情况下读取cms的数据字典, type为process的时候此参数无效，默认为false }); Returns Object Dict对象 Source o2_core/o2/xScript/ViewEnvironment.js, line 222 Methods static get(pathopt, successopt, failureopt, asyncopt, refreshopt) &rarr; {Promise|Object|Array|String|Number|Boolean} 根据路径获取数据字典中的数据。 Syntax var data = dict.get( path, success, failure, async, refresh ) Parameters path String &lt;optional&gt; 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。当值为空的时候，表示获取数据字典中的所有数据。 success function &lt;optional&gt; 获取数据成功时的回调函数。 failure function &lt;optional&gt; 获取数据失败时的回调。 async Boolean &lt;optional&gt; 是否异步执行，默认为false。 refresh Boolean &lt;optional&gt; 是否忽略本地缓存直接从服务器获取，默认为false。 Returns Promise Object Array String Number Boolean 当async为true时返回Promise(Promise说明)； 否则返回数据字典的数据，类型和配置数据字典时候指定的一致。 Examples var dict = new this.Dict('bulletinDictionary'); //没有参数的时候，表示同步获取获取所有数据 var data = dict.get() //同步执行，获取category下key为subCategory的数据 var data = dict.get('category.subCategory'); //异步执行，使用回调处理数据，如果category为数组，获取第0项数据 dict.get('category.0', function(data){ //data 是数据字典的数据 }, function(xhr){ //xhr 为 xmlHttpRequest }, true //异步执行 ) //异步执行，使用Promise处理结果 var promise = dict.get('category', null, null, true); promise.then( function(data){ //data 是数据字典的数据 }) 已经配置好了如下图所示的数据字典 var dict = new this.Dict({ //type: 应用类型。可以为process cms。 //如果没有该选项或者值为空字符串，则表示应用脚本和被应用的脚本配置类型相同。 //比如在流程的A应用脚本中引用流程B应用的脚本配置，则type可以省略。 type : 'cms', application : 'bulletin', //流程、CMS的名称、别名、id, 默认为当前应用 name : 'bulletinDictionary', // 数据字典的名称、别名、id enableAnonymous : true //允许用户在未登录的情况下读取cms的数据字典, type为process的时候此参数无效，默认为false }); var data = dict.get(); //data的值为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' } ] } var category = dict.get('category'); //category的值为 [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' } ] var array0 = dict.get('category.0'); //array0 的值为 { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' } var enable = dict.get('category.0.eanble'); //enable 的值为 true Source o2_core/o2/xScript/ViewEnvironment.js, line 247 add(path, data, successopt, failureopt) 根据路径新增数据字典的数据。 Syntax dict.add( path, data, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果path在数据字典中已有数据，且原有数据是数组，则数组添加一项；如果原有数据不是数组，则报错。 data Object | Array | String | Number | Boolean 需要新增的数据 success function &lt;optional&gt; 增加数据成功时的回调函数。 failure function &lt;optional&gt; 增加数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.add( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); 对get方法样例的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.add( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr, text, error){ //xhr 为 xmlHttpRequest, text 为错误文本， error为Error对象 }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'text': '系统公告', 'value': 'system' } ] } dict.add( 'category.2.sequence', 3 ); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ] } dict.add( 'archiveOptions', { 'yes' : '是', 'no' : '否' }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ], 'archiveOptions' : { 'yes' : '是', 'no' : '否' } } 下面是错误的赋值，如下： dict.add( 'category.3', { text : '系统公告', value : 'system' }); //出错，因为不能对数组下标直接赋值 dict.add( 'category.1.value', { text : '系统公告' } ); //出错，因为不能对已经存在的非数组路径赋值 Source o2_core/o2/xScript/ViewEnvironment.js, line 348 set(path, data, successopt, failureopt) 根据路径修改数据字典的数据。 Syntax dict.set( path, data, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果数据路径不存在，则报错。 data Object | Array | String | Number | Boolean 修改后的数据 success function &lt;optional&gt; 设置数据成功时的回调函数。 failure function &lt;optional&gt; 设置数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.set( 'category', { text : '系统公告', value : 'system' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); 对Example add的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.set( 'archiveOptions', [ { text : '是' }, { text : '否' } ]); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'sequence' : 3.0, 'text': '系统公告', 'value': 'system' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } dict.set( 'category.2', { text : '县级公告', value : 'county' }, function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); /数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 2.0, 'text': '部门公告', 'value': 'department' }, { 'text': '县级公告', 'value': 'county' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } dict.set( 'category.1.sequence', 3 ); dict.set( 'category.2.sequence', 2 ); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'sequence': 2.0, 'text': '县级公告', 'value': 'county' } ], 'archiveOptions' : [ { text : '是' }, { text : '否' } ] } 下面是错误的赋值： dict.set( 'category_1', { text : '公司公告' } ); //出错，因为category_1在数据字典中不存在 Source o2_core/o2/xScript/ViewEnvironment.js, line 468 delete(path, successopt, failureopt) 根据路径删除数据字典的数据。 Syntax dict.delete( path, success, failure ) Parameters path String 数据字典中的数据路径，允许使用中文。当路径为多级时，用点号(.)分隔。如果数据路径不存在，则报错。 success function &lt;optional&gt; 删除数据成功时的回调函数。 failure function &lt;optional&gt; 删除数据错误时的回调函数。 Examples var dict = new this.Dict('bulletinDictionary'); dict.delete( 'category', function(){ }, function(xhr){ //xhr 为 xmlHttpRequest }); 对Example set的数据字典进行赋值，如下： var dict = new this.Dict('bulletinDictionary'); dict.delete( 'archiveOptions'); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', * 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'sequence': 2.0, 'text': '县级公告', 'value': 'county' } ] } dict.delete( 'category.2.sequence', function(data){ //data 形如 //{ // 'id': '80ed5f60-500f-4358-8bbc-b7e81f77aa39' //id为数据字典ID //} }, function(xhr){ //xhr 为 xmlHttpRequest }); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' }, { 'text': '县级公告', 'value': 'county' } ] } dict.delete( 'category.2'); //数据字典的值变为 { 'category': [ { 'enable': true, 'sequence': 1.0, 'text': '公司公告', 'value': 'company' }, { 'enable': 'false', 'sequence': 3.0, 'text': '部门公告', 'value': 'department' } ] } 下面是错误的删除： dict.delete( 'category_1' ); //出错，因为category_1在数据字典中不存在 Source o2_core/o2/xScript/ViewEnvironment.js, line 586 "},"module-org.html":{"id":"module-org.html","url":"module-org.html","title":"org","kind":"Module","body":" Module org 您可以通过this.org获取组织中的人员、人员属性、组织、组织属性、身份、群组和角色。 Syntax //您可以在流程表单、内容管理表单、门户页面、视图和查询视图中，通过this来获取当前实例的org对象，如下： var org = this.org; Source o2_core/o2/xScript/ViewEnvironment.js, line 710 Methods static getIdentity(name, asyncOrCallbackopt) &rarr; {Promise|IdentityData|Array.&lt;IdentityData>} 根据身份标识获取对应的身份对象或数组 Syntax //同步执行，返回身份，单个是对象，多个是数组。 var identityList = this.org.getIdentity( name ); //异步执行，返回Promise对象 var promise = this.org.getIdentity( name, true); promise.then(function(identityList){ //identityList 为返回的身份，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取身份 this.org.getIdentity( name, function(identityList){ //identityList 为返回的身份，单个是对象，多个是数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise IdentityData Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键,自动生成. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'name': '李四', //名称,可重名. 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名. 'person': '李四@lisi@P', //身份所属个人,存放个人 ID,不为空. 'unit': '开发部@kfb@U', //属性所属组织,不可为空. 'unitName': '开发部', //组织名称. 'unitLevel': 2, //组织级别. 'unitLevelName': '浙江兰德纵横/开发部', //显示的层级名. 'orderNumber': 24920439, //排序号,升序排列,为空在最后 'major': true, //主身份标识 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 721 static listIdentityWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据人员标识获取对应的身份对象数组。 Syntax //同步执行，返回身份对象数组。 var identityList = this.org.listIdentityWithPerson( person ); //异步执行，返回Promise对象 var promise = this.org.listIdentityWithPerson( person, true); promise.then(function(identityList){ //identityList 返回的身份对象数组。 }) //异步执行，在回调方法中获取 this.org.listIdentityWithPerson( person, function(identityList){ //identityList 返回的身份对象数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份对象数组。 { 'matchKey': ' ', //匹配字段 'name': '李四', //身份名称 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //身份标识 'description': ' ', //说明 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名 'person': '李四@lisi@P', //人员 'unit': '开发部@kfb@U', //组织 'unitName': '开发部', //组织名称 'unitLevel': 2, //组织级别 'unitLevelName': '浙江兰德纵横/开发部', //组织级别名 'orderNumber': 24920439, //排序号 'major': true //是否是设定的主身份 } Source o2_core/o2/xScript/ViewEnvironment.js, line 763 static listIdentityWithUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据组织标识获取对应的身份对象数组：identity对象数组。 Syntax //同步执行，返回直接组织身份对象数组。 var identityList = this.org.listIdentityWithUnit( unit ); //同步执行，返回嵌套组织身份对象数组。 var identityList = this.org.listIdentityWithUnit( unit, true ); //异步执行，返回Promise对象 var promise = this.org.listIdentityWithUnit( unit, false, true); promise.then(function(identityList){ //identityList 返回直接组织身份对象数组。 }) //异步执行，在回调方法中获取 this.org.listIdentityWithUnit( unit, false, function(identityList){ //identityList 返回直接组织身份对象数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有身份成员；false直接身份成员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份对象数组。 { 'matchKey': ' ', //匹配字段 'name': '李四', //身份名称 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //身份标识 'description': ' ', //说明 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名 'person': '李四@lisi@P', //人员 'unit': '开发部@kfb@U', //组织 'unitName': '开发部', //组织名称 'unitLevel': 2, //组织级别 'unitLevelName': '浙江兰德纵横/开发部', //组织级别名 'orderNumber': 24920439, //排序号 'major': true //是否是设定的主身份 } Source o2_core/o2/xScript/ViewEnvironment.js, line 805 static getUnit(name, asyncOrCallbackopt) &rarr; {Promise|UnitData|Array.&lt;UnitData>} 根据组织标识获取对应的组织：unit对象或数组 Syntax //同步执行，返回组织，单个是对象，多个是数组。 var unitList = this.org.getUnit( name ); //异步执行，返回Promise对象 var promise = this.org.getUnit( name, true); promise.then(function(unitList){ //unitList 为返回的组织，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取组织 this.org.getUnit( name, function(unitList){ //unitList 为返回的组织，单个是对象，多个是数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise UnitData Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'subDirectUnitCount': 1, //直接下级组织数量 'subDirectIdentityCount': 1, //直接下级身份数量 'id': ' ', //数据库主键,自动生成. 'name': '开发部', //名称,可以重名. 'unique': 'kfb', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '开发部@kfb@U', //识别名.以@U结尾. 'typeList': [ '部门' ], //组织类型. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'shortName': 'kfb', //组织简称。 'level': 2, //组织级别,1为最上层组织.自动计算. 'levelName': '浙江兰德纵横/开发部', //显示的层级名. 'levelOrderNumber': ' ', //层级排序号,使用/进行分割.将逐级unit中的orderNumber的Integer值扩充到在Organization配置中指定位数的文本值,前填充0 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织. 'orderNumber': 1, //排序号,升序排列,为空在最后 'dingdingId': ' ', //钉钉部门ID. 'dingdingHash': ' ', //钉钉部门哈希特征. 'weLinkId': ' ', //WeLink部门ID. 'weLinkHash': ' ', //WeLink部门哈希特征. 'qiyeweixinId': ' ', //企业微信人员ID. 'zhengwuDingdingId': ' ', //政务钉钉人员ID. 'zhengwuDingdingHash': ' ', //政务钉钉人员哈希特征. 'qiyeweixinHash': ' ', //企业微信人员哈希特征. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 869 static listSubUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织标识获取下级组织的对象数组：unit对象数组。 Syntax //同步执行，返回嵌套下级组织数组。 var unitList = this.org.listSubUnit( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubUnit( name, false, true); promise.then(function(unitList){ //unitList 为返回的直接下级组织数组。 }) //异步执行，在回调方法中获取 this.org.listSubUnit( name, true, function(unitList){ //unitList 为返回嵌套下级组织数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级组织；false直接下级组织；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 912 static listSupUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织标识批量获取上级组织的对象数组：unit对象数组。 Syntax //同步执行，返回嵌套上级组织数组。 var unitList = this.org.listSupUnit( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupUnit( name, false, true); promise.then(function(unitList){ //unitList 为返回的直接上级组织数组。 }) //异步执行，在回调方法中获取 this.org.listSupUnit( name, true, function(unitList){ //unitList 为返回嵌套上级组织数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级组织；false直接上级组织；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 961 static getUnitByIdentity(name, flagopt, asyncOrCallbackopt) &rarr; {Promise|UnitData|Array.&lt;UnitData>} 根据个人身份获取组织：unit对象或数组。 Syntax //同步执行，返回直接所在组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name ); //同步执行，返回第一层组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name, 1 ); * //同步执行，返回类型为company的组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name, 'company' ); //异步执行，返回Promise对象 var promise = this.org.getUnitByIdentity( name, null, true); promise.then(function(unitList){ //unitList 返回直接所在组织，单个为对象，多个为数组。 }) //异步执行，在回调方法中获取 this.org.getUnitByIdentity( name, 1, function(unitList){ //unitList 返回第一层组织，单个为对象，多个为数组。 }) Parameters name IdentityFlag 身份的distinguishedName、name、id、unique属性值，身份对象。 flag String | Number &lt;optional&gt; 当值为数字的时候， 表示获取第几层的组织。 当值为字符串的时候，表示获取指定类型的组织。 当值为空的时候，表示获取直接所在组织。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise UnitData Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回对应组织，单个为对象，多个为数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1028 static listAllSupUnitWithIdentity(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 批量查询身份所在的组织,并递归查找其上级组织对象. Syntax //同步执行，返回组织数组。 var unitList = this.org.listAllSupUnitWithIdentity( name ); //异步执行，返回Promise对象 var promise = this.org.listAllSupUnitWithIdentity( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listAllSupUnitWithIdentity( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1125 static listUnitWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据个人标识批量获取组织对象成员：Unit对象数组。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithPerson( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithPerson( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1166 static listAllSupUnitWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据个人标识批量查询所在组织及所有上级组织：Unit对象数组。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listAllSupUnitWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listAllSupUnitWithPerson( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listAllSupUnitWithPerson( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回个人所在组织及所有上级组织。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1207 static listUnitWithAttribute(attributeName, attributeValue, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织属性，获取所有符合的组织。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithAttribute( attributeName, attributeName ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithAttribute( attributeName, attributeName, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithAttribute( attributeName, attributeName, function(unitList){ //unitList 返回组织数组。 }) Parameters attributeName String 组织属性名称。 attributeValue String 组织属性值。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1248 static listUnitWithDuty(dutyName, identity, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织职务，获取所有符合的组织。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithDuty( dutyName, identity ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithDuty( dutyName, identity, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithDuty( dutyName, identity, function(unitList){ //unitList 返回组织数组。 }) Parameters dutyName String 组织职务名称。 identity IdentityFlag 身份的distinguishedName、name、id、unique属性值，身份对象。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1290 static listTopUnit(asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 列式所有顶层组织。 Syntax //同步执行，返回顶层组织数组。 var unitList = this.org.listTopUnit(); //异步执行，返回Promise对象 var promise = this.org.listTopUnit(true); promise.then(function(unitList){ //unitList 返回顶层组织数组。 }) //异步执行，在回调方法中获取 this.org.listTopUnit(function(unitList){ //unitList 返回顶层组织数组。 }) Parameters asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回顶层组织数组。 { 'matchKey': ' ', //匹配字段 'subDirectUnitCount': 1, //直接下级组织数量 'subDirectIdentityCount': 1, //直接下级身份数量 'id': ' ', //数据库主键,自动生成. 'name': '开发部', //名称,可以重名. 'unique': 'kfb', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '开发部@kfb@U', //识别名.以@U结尾. 'typeList': [ '部门' ], //组织类型. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'shortName': 'kfb', //组织简称。 'level': 2, //组织级别,1为最上层组织.自动计算. 'levelName': '浙江兰德纵横/开发部', //显示的层级名. 'levelOrderNumber': ' ', //层级排序号,使用/进行分割.将逐级unit中的orderNumber的Integer值扩充到在Organization配置中指定位数的文本值,前填充0 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织. 'orderNumber': 1, //排序号,升序排列,为空在最后 'dingdingId': ' ', //钉钉部门ID. 'dingdingHash': ' ', //钉钉部门哈希特征. 'weLinkId': ' ', //WeLink部门ID. 'weLinkHash': ' ', //WeLink部门哈希特征. 'qiyeweixinId': ' ', //企业微信人员ID. 'zhengwuDingdingId': ' ', //政务钉钉人员ID. 'zhengwuDingdingHash': ' ', //政务钉钉人员哈希特征. 'qiyeweixinHash': ' ', //企业微信人员哈希特征. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 1332 static getPerson(name, asyncOrCallbackopt) &rarr; {Promise|PersonData|Array.&lt;PersonData>} 根据人员标识获取对应的人员对象或数组：person对象或数组 Syntax //同步执行，返回人员，单个是对象，多个是数组。 var personList = this.org.getPerson( name ); //异步执行，返回Promise对象 var promise = this.org.getPerson( name, true); promise.then(function(personList){ //personList 为返回的人员，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取人员 this.org.getPerson( name, function(personList){ //personList 为返回的人员，单个是对象，多个是数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise PersonData Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1373 static listSubPerson(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员标识获取下级人员的对象数组：person对象数组。该上下级关系被人员的汇报对象值（superior）决定。 Syntax //同步执行，返回嵌套下级人员数组。 var personList = this.org.listSubPerson( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubPerson( name, false, true); promise.then(function(personList){ //personList 为返回的直接下级人员数组。 }) //异步执行，在回调方法中获取 this.org.listSubPerson( name, true, function(personList){ //personList 为返回嵌套下级人员数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级人员；false直接下级人员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1420 static listSupPerson(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员标识获取上级人员的对象数组：person对象数组。该上下级关系被人员的汇报对象值（superior）决定。 Syntax //同步执行，返回嵌套上级人员数组。 var personList = this.org.listSupPerson( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupPerson( name, false, true); promise.then(function(personList){ //personList 为返回的直接上级人员数组。 }) //异步执行，在回调方法中获取 this.org.listSupPerson( name, true, function(personList){ //personList 为返回嵌套上级人员数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级人员；false直接上级人员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1469 static listPersonWithGroup(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据群组标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithGroup( group ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithGroup( group, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithGroup( group, function(personList){ //personList 为返回的人员数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1516 static listPersonWithRole(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据角色标识获取人员对象数组：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithRole( role ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithRole( role, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithRole( role, function(personList){ //personList 为返回的人员数组。 }) Parameters name RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1558 static listPersonWithIdentity(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据身份标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithIdentity( identity ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithIdentity( identity, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithIdentity( identity, function(personList){ //personList 为返回的人员数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1600 static listPersonWithUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据组织标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回组织的直接人员数组。 var personList = this.org.listPersonWithUnit( unit ); //同步执行，返回组织的以及嵌套下级组织所有的人员数组。 var personList = this.org.listPersonWithUnit( unit, true ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithUnit( unit, false, true); promise.then(function(personList){ //personList 为返回的组织的直接人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithUnit( unit, false, function(personList){ //personList 为返回的群组的直接人员数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; 是否嵌套获取组织以及下级组织的人员，true表示嵌套，flase表示获取直接组织。默认为false asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1657 static listPersonWithAttribute(name, value, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员属性名称和属性值获取人员对象成员：person对象数组。 Syntax //同步执行，返回拥有对应属性名和属性值人员数组。 var personList = this.org.listPersonWithAttribute( name, value ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithAttribute( name, value, true); promise.then(function(personList){ //personList 返回拥有对应属性名和属性值人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithAttribute( name, value, function(personList){ //personList 返回拥有对应属性名和属性值人员数组。 }) Parameters name String 人员属性名称。 value String 人员属性值。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1709 static getDuty(dutyName, unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据职务名称和组织名称获取身份。 Syntax //同步执行，返回身份数组。 var identityList = this.org.getDuty( dutyName, unit ); //异步执行，返回Promise对象 var promise = this.org.getDuty( dutyName, unit, true); promise.then(function(identityList){ //identityList 返回身份数组。 }) //异步执行，在回调方法中获取 this.org.getDuty( dutyName, unit, function(unitList){ //unitList 返回身份数组。 }) Parameters dutyName String 组织职务名称。 unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份数组。 { 'id': ' ', //数据库主键,自动生成. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'name': '李四', //名称,同一组织下不可重名. 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名,自动填充,@UD结尾. 'unit': '开发部@kfb@U', //组织职务所属组织,不可为空. 'orderNumber': 24920439, //排序号,升序排列,为空在最后 'identityList': [ ' ' ], //组织职务身份成员,多值. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 1769 static listDutyNameWithIdentity(identity, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;String>} 批量获取身份的所有职务名称。 Syntax //同步执行，返回职务名称数组。 var dutyNameList = this.org.listDutyNameWithIdentity( identity ); //异步执行，返回Promise对象 var promise = this.org.listDutyNameWithIdentity( identity, true); promise.then(function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) //异步执行，在回调方法中获取 this.org.listDutyNameWithIdentity( identity, function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) Parameters identity IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;String> 当async为true时，返回 Promise。 否则返回职务名称数组。 Source o2_core/o2/xScript/ViewEnvironment.js, line 1812 static listDutyNameWithUnit(unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;String>} 批量获取组织的所有职务名称。 Syntax //同步执行，返回职务名称数组。 var dutyNameList = this.org.listDutyNameWithUnit( unit ); //异步执行，返回Promise对象 var promise = this.org.listDutyNameWithUnit( unit, true); promise.then(function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) //异步执行，在回调方法中获取 this.org.listDutyNameWithUnit( unit, function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) Parameters unit UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;String> 当async为true时，返回 Promise。 否则返回职务名称数组。 Source o2_core/o2/xScript/ViewEnvironment.js, line 1852 static listUnitAllDuty(unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;Object>} 批量获取组织的所有职务。 Syntax //同步执行，返回职务数组。 var dutyList = this.org.listUnitAllDuty( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAllDuty( unit, true); promise.then(function(dutyList){ //dutyList 返回职务数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAllDuty( unit, function(dutyList){ //dutyList 返回职务数组。 }) Parameters unit UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;Object> 当async为true时，返回 Promise。 否则返回职务数组 { 'name': '李四', //个人属性名称 'unit': '开发部@kfb@U', //组织 'identityList': [ { 'matchKey': ' ', //匹配字段 'name': ' ', //身份名称 'unique': ' ', //身份标识 'description': ' ', //说明 'distinguishedName': ' ', //识别名 'person': ' ', //人员 'unit': ' ', //组织 'unitName': ' ', //组织名称 'unitLevel': 1, //组织级别 'unitLevelName': ' ', //组织级别名 'orderNumber': 1, //排序号 'major': true, //是否是设定的主身份 'serialVersionUID': 1 } ] //身份对象 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1892 static getGroup(name, asyncOrCallbackopt) &rarr; {Promise|GroupData|Array.&lt;GroupData>} 根据群组标识获取对应的群组对象或数组：group对象或数组 Syntax //同步执行，返回群组，单个是Object，多个是Array。 var groupList = this.org.getGroup( name ); //异步执行，返回Promise对象 var promise = this.org.getGroup( name, true); promise.then(function(groupList){ //groupList 为返回的群组，单个是Object，多个是Array。 }) //异步执行，在回调方法中获取群组 this.org.getGroup( name, function(groupList){ //groupList 为返回的群组，单个是Object，多个是Array。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise GroupData Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1935 static listSubGroup(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据群组标识获取下级群组的对象数组：group对象数组。 Syntax //同步执行，返回嵌套下级群组数组。 var groupList = this.org.listSubGroup( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubGroup( name, false, true); promise.then(function(groupList){ //groupList 为返回的直接下级群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listSubGroup( name, true, function(groupList){ //groupList 为返回嵌套下级群组数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级群组；false直接下级群组；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1984 static listSupGroup(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据群组标识获取上级群组的对象数组：group对象数组。 Syntax //同步执行，返回嵌套上级群组数组。 var groupList = this.org.listSupGroup( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupGroup( name, false, true); promise.then(function(groupList){ //groupList 为返回的直接上级群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listSupGroup( name, true, function(groupList){ //groupList 为返回嵌套上级群组数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级群组；false直接上级群组；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2045 static listGroupWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据人员标识获取所有的群组对象数组。如果群组具有群组（group）成员，且群组成员中包含该人员，那么该群组也被返回。 Syntax //同步执行，返回群组数组。 var groupList = this.org.listGroupWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listGroupWithPerson( name, true); promise.then(function(groupList){ //groupList 为返回的群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listGroupWithPerson( name, function(groupList){ //groupList 为返回的群组数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2100 static getRole(name, asyncOrCallbackopt) &rarr; {Promise|RoleData|Array.&lt;RoleData>} 根据角色标识获取对应的角色对象或数组。 Syntax //同步执行，返回角色，单个为对象，多个为数组。 var roleList = this.org.getRole( name ); //异步执行，返回Promise对象 var promise = this.org.getRole( name, true); promise.then(function(roleList){ //roleList 为返回的角色，单个为对象，多个为数组。 }) //异步执行，在回调方法中获取角色，单个为对象，多个为数组 this.org.getRole( name, function(roleList){ //roleList 为返回判断结果。 }) Parameters name RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise RoleData Array.&lt;RoleData> 当async为true时，返回 Promise。 否则返回角色，单个为Object，多个为Array。 { 'name': 'Manager', //角色名称 'unique': 'ManagerSystemRole', //唯一标识 'description': ' ', //说明 'distinguishedName': 'Manager@ManagerSystemRole@R', //识别名 'orderNumber': 7897556, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //成员个人 'groupList': [ '测试群组@ceshizu@G' ] //成员群组 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2147 static listRoleWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;RoleData>} 根据人员标识获取所有的角色对象数组。如果角色具有群组（group）成员，且群组中包含该人员，那么该角色也被返回。 Syntax //同步执行，返回角色数组。 var roleList = this.org.listRoleWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listRoleWithPerson( name, true); promise.then(function(roleList){ //roleList 为返回的角色数组。 }) //异步执行，在回调方法中获取角色 this.org.listRoleWithPerson( name, function(roleList){ //roleList 为返回的角色数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;RoleData> 当async为true时，返回 Promise。 否则返回角色对象数组。 { 'name': 'Manager', //角色名称 'unique': 'ManagerSystemRole', //唯一标识 'description': ' ', //说明 'distinguishedName': 'Manager@ManagerSystemRole@R', //识别名 'orderNumber': 7897556, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //成员个人 'groupList': [ '测试群组@ceshizu@G' ] //成员群组 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2194 static personHasRole(name, roleList, asyncOrCallbackopt) &rarr; {Promise|Boolean} 人员是否拥有角色。 Syntax //同步执行，返回判断结果。 var groupList = this.org.personHasRole( name, roleList ); //异步执行，返回Promise对象 var promise = this.org.personHasRole( name, roleList, true); promise.then(function(flag){ //flag 为返回判断结果。 }) //异步执行，在回调方法中获取判断结果 this.org.personHasRole( name, roleList, function(flag){ //flag 为返回判断结果。 }) Parameters name PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 roleList RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Boolean 当async为true时，返回 Promise。 否则如果人员拥有角色返回true, 否则返回false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2241 static groupHasRole(name, roleList, asyncOrCallbackopt) &rarr; {Promise|Boolean} 群组是否拥有角色。 Syntax //同步执行，返回判断结果。 var groupList = this.org.groupHasRole( name, roleList ); //异步执行，返回Promise对象 var promise = this.org.groupHasRole( name, roleList, true); promise.then(function(flag){ //flag 为返回判断结果。 }) //异步执行，在回调方法中获取判断结果 this.org.groupHasRole( name, roleList, function(flag){ //flag 为返回判断结果。 }) Parameters name GroupFlag 群组的distinguishedName、name、id、unique属性值，群组对象。 roleList RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Boolean 当async为true时，返回 Promise。 否则如果群组拥有角色返回true, 否则返回false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2288 static appendPersonAttribute(person, attr, values, successopt, failureopt, asyncopt) 添加人员属性值(在属性中添加values值，如果没有此属性，则创建一个) Syntax //同步执行 this.org.appendPersonAttribute( person, attribute, valueArray); //异步执行 this.org.appendPersonAttribute( person, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 values Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2337 static setPersonAttribute(person, attr, values, successopt, failureopt, asyncopt) 设置人员属性值(将属性值修改为values，如果没有此属性，则创建一个) Syntax //同步执行 this.org.setPersonAttribute( person, attribute, valueArray); //异步执行 this.org.setPersonAttribute( person, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 values Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2381 static getPersonAttribute(person, attr, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 根据人员和属性名称获取属性值数组。 Syntax //同步执行，返回该人员的属性值数组。 var attributeList = this.org.getPersonAttribute( person, attr ); //异步执行，返回Promise对象 var promise = this.org.getPersonAttribute( person, attr, true); promise.then(function(attributeList){ //attributeList 为返回该人员的属性值数组。 }) //异步执行，在回调方法中获取 this.org.getPersonAttribute( person, attr, function(attributeList){ //attributeList 为返回该人员的属性值数组。 }) Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回属性值数组， 如：[ value1, value2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2425 static listPersonAttributeName(name, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 列出人员所有属性的名称数组。 Syntax //同步执行，返回人员所有属性的名称数组。 var attributeNameList = this.org.listPersonAttributeName( person ); //异步执行，返回Promise对象 var promise = this.org.listPersonAttributeName( person, true); promise.then(function(attributeNameList){ //attributeNameList 为人员所有属性的名称数组。 }) //异步执行，在回调方法中获取 this.org.listPersonAttributeName( person, function(attributeNameList){ //attributeNameList 为人员所有属性的名称数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回人员属性名称数组， 如：[ attributeName1, attributeName2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2468 static listPersonAllAttribute(name, asyncOrCallbackopt) &rarr; {Array.&lt;Object>} 列出人员的所有属性对象数组。 Syntax //同步执行，返回人员所有属性的对象数组。 var attributeObjectList = this.org.listPersonAllAttribute( person ); //异步执行，返回Promise对象 var promise = this.org.listPersonAllAttribute( person, true); promise.then(function(attributeObjectList){ //attributeObjectList 为人员所有属性的对象数组。 }) //异步执行，在回调方法中获取 this.org.listPersonAllAttribute( person, function(attributeObjectList){ //attributeObjectList 为人员所有属性的对象数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;Object> 当async为true时，返回 Promise。 否则返回人员属性对象数组，如： [{ 'name': '住址', 'person': '张三@zhangsan@P', 'attributeList': [ '杭州市','绍兴市' ] }] Source o2_core/o2/xScript/ViewEnvironment.js, line 2509 static appendUnitAttribute(unit, attribute, valueArray, successopt, failureopt, asyncopt) 添加组织属性值(在属性中添加values值，如果没有此属性，则创建一个) Syntax //同步执行 this.org.appendUnitAttribute( unit, attribute, valueArray); //异步执行 this.org.appendUnitAttribute( unit, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attribute String 属性名称。 valueArray Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2558 static setUnitAttribute(unit, attribute, valueArray, successopt, failureopt, asyncopt) 设置组织属性值(将属性值修改为values，如果没有此属性，则创建一个) Syntax //同步执行 this.org.setUnitAttribute( unit, attribute, valueArray); //异步执行 this.org.setUnitAttribute( unit, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attribute String 属性名称。 valueArray Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2612 static getUnitAttribute(unit, attr, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 根据组织标识和属性名称获取对应属性值。 Syntax //同步执行，返回该组织的属性值数组。 var attributeList = this.org.getUnitAttribute( unit, attr ); //异步执行，返回Promise对象 var promise = this.org.getUnitAttribute( unit, attr, true); promise.then(function(attributeList){ //attributeList 为返回该组织的属性值数组。 }) //异步执行，在回调方法中获取 this.org.getUnitAttribute( unit, attr, function(attributeList){ //attributeList 为返回该组织的属性值数组。 }) Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attr String 属性名称。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回属性值数组， 如：[ value1, value2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2665 static listUnitAttributeName(name, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 列出组织所有属性的名称数组。 Syntax //同步执行，返回组织所有属性的名称数组。 var attributeNameList = this.org.listUnitAttributeName( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAttributeName( unit, true); promise.then(function(attributeNameList){ //attributeNameList 为组织所有属性的名称数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAttributeName( unit, function(attributeNameList){ //attributeNameList 为组织所有属性的名称数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回组织属性名称数组， 如：[ attributeName1, attributeName2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2708 static listUnitAllAttribute(name, asyncOrCallbackopt) &rarr; {Array.&lt;Object>} 列出组织的所有属性对象数组。 Syntax //同步执行，返回组织所有属性的对象数组。 var attributeObjectList = this.org.listUnitAllAttribute( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAllAttribute( unit, true); promise.then(function(attributeObjectList){ //attributeObjectList 为组织所有属性的对象数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAllAttribute( unit, function(attributeObjectList){ //attributeObjectList 为组织所有属性的对象数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;Object> 当async为true时，返回 Promise。 否则返回组织属性对象数组，如： [{ 'name': '部门类别', 'unit': '开发部@kfb@U', 'attributeList': [ '生产部门', '二级部门' ] }] Source o2_core/o2/xScript/ViewEnvironment.js, line 2749 Module org 您可以通过this.org获取组织中的人员、人员属性、组织、组织属性、身份、群组和角色。 Syntax //您可以在流程表单、内容管理表单、门户页面、视图和查询视图中，通过this来获取当前实例的org对象，如下： var org = this.org; Source o2_core/o2/xScript/ViewEnvironment.js, line 710 Methods static getIdentity(name, asyncOrCallbackopt) &rarr; {Promise|IdentityData|Array.&lt;IdentityData>} 根据身份标识获取对应的身份对象或数组 Syntax //同步执行，返回身份，单个是对象，多个是数组。 var identityList = this.org.getIdentity( name ); //异步执行，返回Promise对象 var promise = this.org.getIdentity( name, true); promise.then(function(identityList){ //identityList 为返回的身份，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取身份 this.org.getIdentity( name, function(identityList){ //identityList 为返回的身份，单个是对象，多个是数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise IdentityData Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键,自动生成. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'name': '李四', //名称,可重名. 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名. 'person': '李四@lisi@P', //身份所属个人,存放个人 ID,不为空. 'unit': '开发部@kfb@U', //属性所属组织,不可为空. 'unitName': '开发部', //组织名称. 'unitLevel': 2, //组织级别. 'unitLevelName': '浙江兰德纵横/开发部', //显示的层级名. 'orderNumber': 24920439, //排序号,升序排列,为空在最后 'major': true, //主身份标识 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 721 static listIdentityWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据人员标识获取对应的身份对象数组。 Syntax //同步执行，返回身份对象数组。 var identityList = this.org.listIdentityWithPerson( person ); //异步执行，返回Promise对象 var promise = this.org.listIdentityWithPerson( person, true); promise.then(function(identityList){ //identityList 返回的身份对象数组。 }) //异步执行，在回调方法中获取 this.org.listIdentityWithPerson( person, function(identityList){ //identityList 返回的身份对象数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份对象数组。 { 'matchKey': ' ', //匹配字段 'name': '李四', //身份名称 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //身份标识 'description': ' ', //说明 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名 'person': '李四@lisi@P', //人员 'unit': '开发部@kfb@U', //组织 'unitName': '开发部', //组织名称 'unitLevel': 2, //组织级别 'unitLevelName': '浙江兰德纵横/开发部', //组织级别名 'orderNumber': 24920439, //排序号 'major': true //是否是设定的主身份 } Source o2_core/o2/xScript/ViewEnvironment.js, line 763 static listIdentityWithUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据组织标识获取对应的身份对象数组：identity对象数组。 Syntax //同步执行，返回直接组织身份对象数组。 var identityList = this.org.listIdentityWithUnit( unit ); //同步执行，返回嵌套组织身份对象数组。 var identityList = this.org.listIdentityWithUnit( unit, true ); //异步执行，返回Promise对象 var promise = this.org.listIdentityWithUnit( unit, false, true); promise.then(function(identityList){ //identityList 返回直接组织身份对象数组。 }) //异步执行，在回调方法中获取 this.org.listIdentityWithUnit( unit, false, function(identityList){ //identityList 返回直接组织身份对象数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有身份成员；false直接身份成员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份对象数组。 { 'matchKey': ' ', //匹配字段 'name': '李四', //身份名称 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //身份标识 'description': ' ', //说明 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名 'person': '李四@lisi@P', //人员 'unit': '开发部@kfb@U', //组织 'unitName': '开发部', //组织名称 'unitLevel': 2, //组织级别 'unitLevelName': '浙江兰德纵横/开发部', //组织级别名 'orderNumber': 24920439, //排序号 'major': true //是否是设定的主身份 } Source o2_core/o2/xScript/ViewEnvironment.js, line 805 static getUnit(name, asyncOrCallbackopt) &rarr; {Promise|UnitData|Array.&lt;UnitData>} 根据组织标识获取对应的组织：unit对象或数组 Syntax //同步执行，返回组织，单个是对象，多个是数组。 var unitList = this.org.getUnit( name ); //异步执行，返回Promise对象 var promise = this.org.getUnit( name, true); promise.then(function(unitList){ //unitList 为返回的组织，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取组织 this.org.getUnit( name, function(unitList){ //unitList 为返回的组织，单个是对象，多个是数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise UnitData Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'subDirectUnitCount': 1, //直接下级组织数量 'subDirectIdentityCount': 1, //直接下级身份数量 'id': ' ', //数据库主键,自动生成. 'name': '开发部', //名称,可以重名. 'unique': 'kfb', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '开发部@kfb@U', //识别名.以@U结尾. 'typeList': [ '部门' ], //组织类型. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'shortName': 'kfb', //组织简称。 'level': 2, //组织级别,1为最上层组织.自动计算. 'levelName': '浙江兰德纵横/开发部', //显示的层级名. 'levelOrderNumber': ' ', //层级排序号,使用/进行分割.将逐级unit中的orderNumber的Integer值扩充到在Organization配置中指定位数的文本值,前填充0 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织. 'orderNumber': 1, //排序号,升序排列,为空在最后 'dingdingId': ' ', //钉钉部门ID. 'dingdingHash': ' ', //钉钉部门哈希特征. 'weLinkId': ' ', //WeLink部门ID. 'weLinkHash': ' ', //WeLink部门哈希特征. 'qiyeweixinId': ' ', //企业微信人员ID. 'zhengwuDingdingId': ' ', //政务钉钉人员ID. 'zhengwuDingdingHash': ' ', //政务钉钉人员哈希特征. 'qiyeweixinHash': ' ', //企业微信人员哈希特征. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 869 static listSubUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织标识获取下级组织的对象数组：unit对象数组。 Syntax //同步执行，返回嵌套下级组织数组。 var unitList = this.org.listSubUnit( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubUnit( name, false, true); promise.then(function(unitList){ //unitList 为返回的直接下级组织数组。 }) //异步执行，在回调方法中获取 this.org.listSubUnit( name, true, function(unitList){ //unitList 为返回嵌套下级组织数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级组织；false直接下级组织；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 912 static listSupUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织标识批量获取上级组织的对象数组：unit对象数组。 Syntax //同步执行，返回嵌套上级组织数组。 var unitList = this.org.listSupUnit( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupUnit( name, false, true); promise.then(function(unitList){ //unitList 为返回的直接上级组织数组。 }) //异步执行，在回调方法中获取 this.org.listSupUnit( name, true, function(unitList){ //unitList 为返回嵌套上级组织数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级组织；false直接上级组织；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 961 static getUnitByIdentity(name, flagopt, asyncOrCallbackopt) &rarr; {Promise|UnitData|Array.&lt;UnitData>} 根据个人身份获取组织：unit对象或数组。 Syntax //同步执行，返回直接所在组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name ); //同步执行，返回第一层组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name, 1 ); * //同步执行，返回类型为company的组织，单个为对象，多个为数组。 var unitList = this.org.getUnitByIdentity( name, 'company' ); //异步执行，返回Promise对象 var promise = this.org.getUnitByIdentity( name, null, true); promise.then(function(unitList){ //unitList 返回直接所在组织，单个为对象，多个为数组。 }) //异步执行，在回调方法中获取 this.org.getUnitByIdentity( name, 1, function(unitList){ //unitList 返回第一层组织，单个为对象，多个为数组。 }) Parameters name IdentityFlag 身份的distinguishedName、name、id、unique属性值，身份对象。 flag String | Number &lt;optional&gt; 当值为数字的时候， 表示获取第几层的组织。 当值为字符串的时候，表示获取指定类型的组织。 当值为空的时候，表示获取直接所在组织。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise UnitData Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回对应组织，单个为对象，多个为数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1028 static listAllSupUnitWithIdentity(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 批量查询身份所在的组织,并递归查找其上级组织对象. Syntax //同步执行，返回组织数组。 var unitList = this.org.listAllSupUnitWithIdentity( name ); //异步执行，返回Promise对象 var promise = this.org.listAllSupUnitWithIdentity( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listAllSupUnitWithIdentity( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1125 static listUnitWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据个人标识批量获取组织对象成员：Unit对象数组。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithPerson( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithPerson( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1166 static listAllSupUnitWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据个人标识批量查询所在组织及所有上级组织：Unit对象数组。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listAllSupUnitWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listAllSupUnitWithPerson( name, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listAllSupUnitWithPerson( name, function(unitList){ //unitList 返回组织数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回个人所在组织及所有上级组织。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1207 static listUnitWithAttribute(attributeName, attributeValue, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织属性，获取所有符合的组织。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithAttribute( attributeName, attributeName ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithAttribute( attributeName, attributeName, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithAttribute( attributeName, attributeName, function(unitList){ //unitList 返回组织数组。 }) Parameters attributeName String 组织属性名称。 attributeValue String 组织属性值。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1248 static listUnitWithDuty(dutyName, identity, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 根据组织职务，获取所有符合的组织。 Syntax //同步执行，返回组织数组。 var unitList = this.org.listUnitWithDuty( dutyName, identity ); //异步执行，返回Promise对象 var promise = this.org.listUnitWithDuty( dutyName, identity, true); promise.then(function(unitList){ //unitList 返回组织数组。 }) //异步执行，在回调方法中获取 this.org.listUnitWithDuty( dutyName, identity, function(unitList){ //unitList 返回组织数组。 }) Parameters dutyName String 组织职务名称。 identity IdentityFlag 身份的distinguishedName、name、id、unique属性值，身份对象。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回组织数组。 { 'name': '开发部', //组织名称 'unique': 'kfb', //唯一标识 'distinguishedName': '开发部@kfb@U', //识别名 'typeList': [ '部门' ], //组织类型 'description': ' ', //说明 'shortName': 'kfb', //简称 'level': 2, //组织层次 'levelName': '浙江兰德纵横/开发部', //组织层次名 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织 'orderNumber': 1, //排序号 'levelOrderNumber': ' ', //层级排序号 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink Id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1290 static listTopUnit(asyncOrCallbackopt) &rarr; {Promise|Array.&lt;UnitData>} 列式所有顶层组织。 Syntax //同步执行，返回顶层组织数组。 var unitList = this.org.listTopUnit(); //异步执行，返回Promise对象 var promise = this.org.listTopUnit(true); promise.then(function(unitList){ //unitList 返回顶层组织数组。 }) //异步执行，在回调方法中获取 this.org.listTopUnit(function(unitList){ //unitList 返回顶层组织数组。 }) Parameters asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;UnitData> 当async为true时，返回 Promise。 否则返回顶层组织数组。 { 'matchKey': ' ', //匹配字段 'subDirectUnitCount': 1, //直接下级组织数量 'subDirectIdentityCount': 1, //直接下级身份数量 'id': ' ', //数据库主键,自动生成. 'name': '开发部', //名称,可以重名. 'unique': 'kfb', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '开发部@kfb@U', //识别名.以@U结尾. 'typeList': [ '部门' ], //组织类型. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'shortName': 'kfb', //组织简称。 'level': 2, //组织级别,1为最上层组织.自动计算. 'levelName': '浙江兰德纵横/开发部', //显示的层级名. 'levelOrderNumber': ' ', //层级排序号,使用/进行分割.将逐级unit中的orderNumber的Integer值扩充到在Organization配置中指定位数的文本值,前填充0 'superior': '浙江兰德纵横@a706f5f0-4a3b-4785-8e1d-0a944bfad4eb@U', //上级组织. 'orderNumber': 1, //排序号,升序排列,为空在最后 'dingdingId': ' ', //钉钉部门ID. 'dingdingHash': ' ', //钉钉部门哈希特征. 'weLinkId': ' ', //WeLink部门ID. 'weLinkHash': ' ', //WeLink部门哈希特征. 'qiyeweixinId': ' ', //企业微信人员ID. 'zhengwuDingdingId': ' ', //政务钉钉人员ID. 'zhengwuDingdingHash': ' ', //政务钉钉人员哈希特征. 'qiyeweixinHash': ' ', //企业微信人员哈希特征. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 1332 static getPerson(name, asyncOrCallbackopt) &rarr; {Promise|PersonData|Array.&lt;PersonData>} 根据人员标识获取对应的人员对象或数组：person对象或数组 Syntax //同步执行，返回人员，单个是对象，多个是数组。 var personList = this.org.getPerson( name ); //异步执行，返回Promise对象 var promise = this.org.getPerson( name, true); promise.then(function(personList){ //personList 为返回的人员，单个是对象，多个是数组。 }) //异步执行，在回调方法中获取人员 this.org.getPerson( name, function(personList){ //personList 为返回的人员，单个是对象，多个是数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise PersonData Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1373 static listSubPerson(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员标识获取下级人员的对象数组：person对象数组。该上下级关系被人员的汇报对象值（superior）决定。 Syntax //同步执行，返回嵌套下级人员数组。 var personList = this.org.listSubPerson( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubPerson( name, false, true); promise.then(function(personList){ //personList 为返回的直接下级人员数组。 }) //异步执行，在回调方法中获取 this.org.listSubPerson( name, true, function(personList){ //personList 为返回嵌套下级人员数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级人员；false直接下级人员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1420 static listSupPerson(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员标识获取上级人员的对象数组：person对象数组。该上下级关系被人员的汇报对象值（superior）决定。 Syntax //同步执行，返回嵌套上级人员数组。 var personList = this.org.listSupPerson( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupPerson( name, false, true); promise.then(function(personList){ //personList 为返回的直接上级人员数组。 }) //异步执行，在回调方法中获取 this.org.listSupPerson( name, true, function(personList){ //personList 为返回嵌套上级人员数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级人员；false直接上级人员；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1469 static listPersonWithGroup(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据群组标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithGroup( group ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithGroup( group, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithGroup( group, function(personList){ //personList 为返回的人员数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1516 static listPersonWithRole(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据角色标识获取人员对象数组：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithRole( role ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithRole( role, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithRole( role, function(personList){ //personList 为返回的人员数组。 }) Parameters name RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1558 static listPersonWithIdentity(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据身份标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回人员数组。 var personList = this.org.listPersonWithIdentity( identity ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithIdentity( identity, true); promise.then(function(personList){ //personList 为返回的人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithIdentity( identity, function(personList){ //personList 为返回的人员数组。 }) Parameters name IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1600 static listPersonWithUnit(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据组织标识获取人员对象成员：person对象数组。 Syntax //同步执行，返回组织的直接人员数组。 var personList = this.org.listPersonWithUnit( unit ); //同步执行，返回组织的以及嵌套下级组织所有的人员数组。 var personList = this.org.listPersonWithUnit( unit, true ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithUnit( unit, false, true); promise.then(function(personList){ //personList 为返回的组织的直接人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithUnit( unit, false, function(personList){ //personList 为返回的群组的直接人员数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; 是否嵌套获取组织以及下级组织的人员，true表示嵌套，flase表示获取直接组织。默认为false asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1657 static listPersonWithAttribute(name, value, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;PersonData>} 根据人员属性名称和属性值获取人员对象成员：person对象数组。 Syntax //同步执行，返回拥有对应属性名和属性值人员数组。 var personList = this.org.listPersonWithAttribute( name, value ); //异步执行，返回Promise对象 var promise = this.org.listPersonWithAttribute( name, value, true); promise.then(function(personList){ //personList 返回拥有对应属性名和属性值人员数组。 }) //异步执行，在回调方法中获取 this.org.listPersonWithAttribute( name, value, function(personList){ //personList 返回拥有对应属性名和属性值人员数组。 }) Parameters name String 人员属性名称。 value String 人员属性值。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;PersonData> 当async为true时，返回 Promise。 否则返回人员对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //数据库主键 'name': '李四', //个人名称 'genderType': ' ',//可选值:f,m,d, //性别,m:男,f:女,d:未知 'signature': ' ', //签名 'description': ' ', //说明 'employee': '1111', //员工号 'unique': 'lisi', //唯一标识 'distinguishedName': '李四@lisi@P', //识别名 'orderNumber': 14214946, //排序号 'superior': ' ', //主管 'mail': ' ', //邮件地址 'weixin': ' ', //微信号 'qq': ' ', //qq号 'mobile': '85252281460', //手机号 'officePhone': ' ', //办公电话 'boardDate': '2021-07-05 19:18:03', //入职时间 'birthday': '2021-07-05 19:18:03', //生日 'age': 1, //年龄 'qiyeweixinId': ' ', //企业微信Id 'dingdingId': ' ', //钉钉Id 'zhengwuDingdingId': ' ', //政务钉钉Id 'weLinkId': ' ' //华为WeLink id } Source o2_core/o2/xScript/ViewEnvironment.js, line 1709 static getDuty(dutyName, unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;IdentityData>} 根据职务名称和组织名称获取身份。 Syntax //同步执行，返回身份数组。 var identityList = this.org.getDuty( dutyName, unit ); //异步执行，返回Promise对象 var promise = this.org.getDuty( dutyName, unit, true); promise.then(function(identityList){ //identityList 返回身份数组。 }) //异步执行，在回调方法中获取 this.org.getDuty( dutyName, unit, function(unitList){ //unitList 返回身份数组。 }) Parameters dutyName String 组织职务名称。 unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;IdentityData> 当async为true时，返回 Promise。 否则返回身份数组。 { 'id': ' ', //数据库主键,自动生成. 'pinyin': ' ', //name拼音,自动生成 'pinyinInitial': ' ', //name拼音首字母,自动生成 'description': ' ', //描述. 'name': '李四', //名称,同一组织下不可重名. 'unique': '23dd1b53-feed-485d-8c9c-1a4e64ff58a2', //唯一标识,不可重复,为空则使用自动填充值 'distinguishedName': '李四@23dd1b53-feed-485d-8c9c-1a4e64ff58a2@I', //识别名,自动填充,@UD结尾. 'unit': '开发部@kfb@U', //组织职务所属组织,不可为空. 'orderNumber': 24920439, //排序号,升序排列,为空在最后 'identityList': [ ' ' ], //组织职务身份成员,多值. 'createTime': '2021-07-05 19:18:03', //创建时间,自动生成,索引创建在约束中. 'updateTime': '2021-07-05 19:18:03' //修改时间,自动生成,索引创建在约束中. } Source o2_core/o2/xScript/ViewEnvironment.js, line 1769 static listDutyNameWithIdentity(identity, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;String>} 批量获取身份的所有职务名称。 Syntax //同步执行，返回职务名称数组。 var dutyNameList = this.org.listDutyNameWithIdentity( identity ); //异步执行，返回Promise对象 var promise = this.org.listDutyNameWithIdentity( identity, true); promise.then(function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) //异步执行，在回调方法中获取 this.org.listDutyNameWithIdentity( identity, function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) Parameters identity IdentityFlag | Array.&lt;IdentityFlag> 身份的distinguishedName、name、id、unique属性值，身份对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;String> 当async为true时，返回 Promise。 否则返回职务名称数组。 Source o2_core/o2/xScript/ViewEnvironment.js, line 1812 static listDutyNameWithUnit(unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;String>} 批量获取组织的所有职务名称。 Syntax //同步执行，返回职务名称数组。 var dutyNameList = this.org.listDutyNameWithUnit( unit ); //异步执行，返回Promise对象 var promise = this.org.listDutyNameWithUnit( unit, true); promise.then(function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) //异步执行，在回调方法中获取 this.org.listDutyNameWithUnit( unit, function(dutyNameList){ //dutyNameList 返回职务名称数组。 }) Parameters unit UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;String> 当async为true时，返回 Promise。 否则返回职务名称数组。 Source o2_core/o2/xScript/ViewEnvironment.js, line 1852 static listUnitAllDuty(unit, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;Object>} 批量获取组织的所有职务。 Syntax //同步执行，返回职务数组。 var dutyList = this.org.listUnitAllDuty( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAllDuty( unit, true); promise.then(function(dutyList){ //dutyList 返回职务数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAllDuty( unit, function(dutyList){ //dutyList 返回职务数组。 }) Parameters unit UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;Object> 当async为true时，返回 Promise。 否则返回职务数组 { 'name': '李四', //个人属性名称 'unit': '开发部@kfb@U', //组织 'identityList': [ { 'matchKey': ' ', //匹配字段 'name': ' ', //身份名称 'unique': ' ', //身份标识 'description': ' ', //说明 'distinguishedName': ' ', //识别名 'person': ' ', //人员 'unit': ' ', //组织 'unitName': ' ', //组织名称 'unitLevel': 1, //组织级别 'unitLevelName': ' ', //组织级别名 'orderNumber': 1, //排序号 'major': true, //是否是设定的主身份 'serialVersionUID': 1 } ] //身份对象 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1892 static getGroup(name, asyncOrCallbackopt) &rarr; {Promise|GroupData|Array.&lt;GroupData>} 根据群组标识获取对应的群组对象或数组：group对象或数组 Syntax //同步执行，返回群组，单个是Object，多个是Array。 var groupList = this.org.getGroup( name ); //异步执行，返回Promise对象 var promise = this.org.getGroup( name, true); promise.then(function(groupList){ //groupList 为返回的群组，单个是Object，多个是Array。 }) //异步执行，在回调方法中获取群组 this.org.getGroup( name, function(groupList){ //groupList 为返回的群组，单个是Object，多个是Array。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise GroupData Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组，单个是Object，多个是Array。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1935 static listSubGroup(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据群组标识获取下级群组的对象数组：group对象数组。 Syntax //同步执行，返回嵌套下级群组数组。 var groupList = this.org.listSubGroup( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSubGroup( name, false, true); promise.then(function(groupList){ //groupList 为返回的直接下级群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listSubGroup( name, true, function(groupList){ //groupList 为返回嵌套下级群组数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有下级群组；false直接下级群组；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 1984 static listSupGroup(name, nestedopt, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据群组标识获取上级群组的对象数组：group对象数组。 Syntax //同步执行，返回嵌套上级群组数组。 var groupList = this.org.listSupGroup( name, true ); //异步执行，返回Promise对象 var promise = this.org.listSupGroup( name, false, true); promise.then(function(groupList){ //groupList 为返回的直接上级群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listSupGroup( name, true, function(groupList){ //groupList 为返回嵌套上级群组数组。 }) Parameters name GroupFlag | Array.&lt;GroupFlag> 群组的distinguishedName、name、id、unique属性值，群组对象，或上述属性值和对象的数组。 nested Boolean &lt;optional&gt; true嵌套的所有上级群组；false直接上级群组；默认false。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2045 static listGroupWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;GroupData>} 根据人员标识获取所有的群组对象数组。如果群组具有群组（group）成员，且群组成员中包含该人员，那么该群组也被返回。 Syntax //同步执行，返回群组数组。 var groupList = this.org.listGroupWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listGroupWithPerson( name, true); promise.then(function(groupList){ //groupList 为返回的群组数组。 }) //异步执行，在回调方法中获取群组 this.org.listGroupWithPerson( name, function(groupList){ //groupList 为返回的群组数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;GroupData> 当async为true时，返回 Promise。 否则返回群组对象数组。 { 'matchKey': ' ', //匹配字段 'id': ' ', //群组id 'name': '工作汇报读者', //群组名称 'unique': 'ReportReader', //群组标识 'description': '可查看所有部门所有状态的工作汇报', //说明 'distinguishedName': '工作汇报读者@ReportReader@G', //识别名 'orderNumber': 13699599, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //个人成员 'groupList': [ '所有部门领导@AllDepartLeader@G' '所有部门汇报管理员@AllDepartReportManager@G' ], //群组成员 'unitList': [ ' ' ], //组织成员 'identityList': [ ' ' ], //身份成员 'subDirectGroupCount': 1, //直接下级组织数量 'subDirectPersonCount': 1, //直接下级用户数量 'subDirectIdentityCount': 1, //直接下级身份数量 'subDirectOrgCount': 1 //直接下级组织数量 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2100 static getRole(name, asyncOrCallbackopt) &rarr; {Promise|RoleData|Array.&lt;RoleData>} 根据角色标识获取对应的角色对象或数组。 Syntax //同步执行，返回角色，单个为对象，多个为数组。 var roleList = this.org.getRole( name ); //异步执行，返回Promise对象 var promise = this.org.getRole( name, true); promise.then(function(roleList){ //roleList 为返回的角色，单个为对象，多个为数组。 }) //异步执行，在回调方法中获取角色，单个为对象，多个为数组 this.org.getRole( name, function(roleList){ //roleList 为返回判断结果。 }) Parameters name RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise RoleData Array.&lt;RoleData> 当async为true时，返回 Promise。 否则返回角色，单个为Object，多个为Array。 { 'name': 'Manager', //角色名称 'unique': 'ManagerSystemRole', //唯一标识 'description': ' ', //说明 'distinguishedName': 'Manager@ManagerSystemRole@R', //识别名 'orderNumber': 7897556, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //成员个人 'groupList': [ '测试群组@ceshizu@G' ] //成员群组 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2147 static listRoleWithPerson(name, asyncOrCallbackopt) &rarr; {Promise|Array.&lt;RoleData>} 根据人员标识获取所有的角色对象数组。如果角色具有群组（group）成员，且群组中包含该人员，那么该角色也被返回。 Syntax //同步执行，返回角色数组。 var roleList = this.org.listRoleWithPerson( name ); //异步执行，返回Promise对象 var promise = this.org.listRoleWithPerson( name, true); promise.then(function(roleList){ //roleList 为返回的角色数组。 }) //异步执行，在回调方法中获取角色 this.org.listRoleWithPerson( name, function(roleList){ //roleList 为返回的角色数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Array.&lt;RoleData> 当async为true时，返回 Promise。 否则返回角色对象数组。 { 'name': 'Manager', //角色名称 'unique': 'ManagerSystemRole', //唯一标识 'description': ' ', //说明 'distinguishedName': 'Manager@ManagerSystemRole@R', //识别名 'orderNumber': 7897556, //排序号 'personList': [ '张三@zhangsan@P' '李四@lisi@P' ], //成员个人 'groupList': [ '测试群组@ceshizu@G' ] //成员群组 } Source o2_core/o2/xScript/ViewEnvironment.js, line 2194 static personHasRole(name, roleList, asyncOrCallbackopt) &rarr; {Promise|Boolean} 人员是否拥有角色。 Syntax //同步执行，返回判断结果。 var groupList = this.org.personHasRole( name, roleList ); //异步执行，返回Promise对象 var promise = this.org.personHasRole( name, roleList, true); promise.then(function(flag){ //flag 为返回判断结果。 }) //异步执行，在回调方法中获取判断结果 this.org.personHasRole( name, roleList, function(flag){ //flag 为返回判断结果。 }) Parameters name PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 roleList RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Boolean 当async为true时，返回 Promise。 否则如果人员拥有角色返回true, 否则返回false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2241 static groupHasRole(name, roleList, asyncOrCallbackopt) &rarr; {Promise|Boolean} 群组是否拥有角色。 Syntax //同步执行，返回判断结果。 var groupList = this.org.groupHasRole( name, roleList ); //异步执行，返回Promise对象 var promise = this.org.groupHasRole( name, roleList, true); promise.then(function(flag){ //flag 为返回判断结果。 }) //异步执行，在回调方法中获取判断结果 this.org.groupHasRole( name, roleList, function(flag){ //flag 为返回判断结果。 }) Parameters name GroupFlag 群组的distinguishedName、name、id、unique属性值，群组对象。 roleList RoleFlag | Array.&lt;RoleFlag> 角色的distinguishedName、name、id、unique属性值，角色对象；或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Promise Boolean 当async为true时，返回 Promise。 否则如果群组拥有角色返回true, 否则返回false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2288 static appendPersonAttribute(person, attr, values, successopt, failureopt, asyncopt) 添加人员属性值(在属性中添加values值，如果没有此属性，则创建一个) Syntax //同步执行 this.org.appendPersonAttribute( person, attribute, valueArray); //异步执行 this.org.appendPersonAttribute( person, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 values Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2337 static setPersonAttribute(person, attr, values, successopt, failureopt, asyncopt) 设置人员属性值(将属性值修改为values，如果没有此属性，则创建一个) Syntax //同步执行 this.org.setPersonAttribute( person, attribute, valueArray); //异步执行 this.org.setPersonAttribute( person, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 values Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2381 static getPersonAttribute(person, attr, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 根据人员和属性名称获取属性值数组。 Syntax //同步执行，返回该人员的属性值数组。 var attributeList = this.org.getPersonAttribute( person, attr ); //异步执行，返回Promise对象 var promise = this.org.getPersonAttribute( person, attr, true); promise.then(function(attributeList){ //attributeList 为返回该人员的属性值数组。 }) //异步执行，在回调方法中获取 this.org.getPersonAttribute( person, attr, function(attributeList){ //attributeList 为返回该人员的属性值数组。 }) Parameters person PersonFlag 人员的distinguishedName、name、id、unique属性值，人员对象。 attr String 属性名称。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回属性值数组， 如：[ value1, value2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2425 static listPersonAttributeName(name, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 列出人员所有属性的名称数组。 Syntax //同步执行，返回人员所有属性的名称数组。 var attributeNameList = this.org.listPersonAttributeName( person ); //异步执行，返回Promise对象 var promise = this.org.listPersonAttributeName( person, true); promise.then(function(attributeNameList){ //attributeNameList 为人员所有属性的名称数组。 }) //异步执行，在回调方法中获取 this.org.listPersonAttributeName( person, function(attributeNameList){ //attributeNameList 为人员所有属性的名称数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回人员属性名称数组， 如：[ attributeName1, attributeName2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2468 static listPersonAllAttribute(name, asyncOrCallbackopt) &rarr; {Array.&lt;Object>} 列出人员的所有属性对象数组。 Syntax //同步执行，返回人员所有属性的对象数组。 var attributeObjectList = this.org.listPersonAllAttribute( person ); //异步执行，返回Promise对象 var promise = this.org.listPersonAllAttribute( person, true); promise.then(function(attributeObjectList){ //attributeObjectList 为人员所有属性的对象数组。 }) //异步执行，在回调方法中获取 this.org.listPersonAllAttribute( person, function(attributeObjectList){ //attributeObjectList 为人员所有属性的对象数组。 }) Parameters name PersonFlag | Array.&lt;PersonFlag> 人员的distinguishedName、name、id、unique属性值，人员对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;Object> 当async为true时，返回 Promise。 否则返回人员属性对象数组，如： [{ 'name': '住址', 'person': '张三@zhangsan@P', 'attributeList': [ '杭州市','绍兴市' ] }] Source o2_core/o2/xScript/ViewEnvironment.js, line 2509 static appendUnitAttribute(unit, attribute, valueArray, successopt, failureopt, asyncopt) 添加组织属性值(在属性中添加values值，如果没有此属性，则创建一个) Syntax //同步执行 this.org.appendUnitAttribute( unit, attribute, valueArray); //异步执行 this.org.appendUnitAttribute( unit, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attribute String 属性名称。 valueArray Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2558 static setUnitAttribute(unit, attribute, valueArray, successopt, failureopt, asyncopt) 设置组织属性值(将属性值修改为values，如果没有此属性，则创建一个) Syntax //同步执行 this.org.setUnitAttribute( unit, attribute, valueArray); //异步执行 this.org.setUnitAttribute( unit, attribute, valueArray, function(){ //执行成功的回调 }, null, true); Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attribute String 属性名称。 valueArray Array.&lt;String> 属性值，必须为数组。 success function &lt;optional&gt; 执行成功的回调。 failure function &lt;optional&gt; 执行失败的回调。 async Boolean &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。 Source o2_core/o2/xScript/ViewEnvironment.js, line 2612 static getUnitAttribute(unit, attr, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 根据组织标识和属性名称获取对应属性值。 Syntax //同步执行，返回该组织的属性值数组。 var attributeList = this.org.getUnitAttribute( unit, attr ); //异步执行，返回Promise对象 var promise = this.org.getUnitAttribute( unit, attr, true); promise.then(function(attributeList){ //attributeList 为返回该组织的属性值数组。 }) //异步执行，在回调方法中获取 this.org.getUnitAttribute( unit, attr, function(attributeList){ //attributeList 为返回该组织的属性值数组。 }) Parameters unit UnitFlag 组织的distinguishedName、name、id、unique属性值，组织对象。 attr String 属性名称。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回属性值数组， 如：[ value1, value2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2665 static listUnitAttributeName(name, asyncOrCallbackopt) &rarr; {Array.&lt;String>} 列出组织所有属性的名称数组。 Syntax //同步执行，返回组织所有属性的名称数组。 var attributeNameList = this.org.listUnitAttributeName( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAttributeName( unit, true); promise.then(function(attributeNameList){ //attributeNameList 为组织所有属性的名称数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAttributeName( unit, function(attributeNameList){ //attributeNameList 为组织所有属性的名称数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;String> 当async为true时，返回 Promise。 否则返回组织属性名称数组， 如：[ attributeName1, attributeName2 ] Source o2_core/o2/xScript/ViewEnvironment.js, line 2708 static listUnitAllAttribute(name, asyncOrCallbackopt) &rarr; {Array.&lt;Object>} 列出组织的所有属性对象数组。 Syntax //同步执行，返回组织所有属性的对象数组。 var attributeObjectList = this.org.listUnitAllAttribute( unit ); //异步执行，返回Promise对象 var promise = this.org.listUnitAllAttribute( unit, true); promise.then(function(attributeObjectList){ //attributeObjectList 为组织所有属性的对象数组。 }) //异步执行，在回调方法中获取 this.org.listUnitAllAttribute( unit, function(attributeObjectList){ //attributeObjectList 为组织所有属性的对象数组。 }) Parameters name UnitFlag | Array.&lt;UnitFlag> 组织的distinguishedName、name、id、unique属性值，组织对象，或上述属性值和对象的数组。 asyncOrCallback Boolean | function &lt;optional&gt; 当参数为boolean，表示是否异步执行，默认为false。当参数为function，表示回调方法。 Returns Array.&lt;Object> 当async为true时，返回 Promise。 否则返回组织属性对象数组，如： [{ 'name': '部门类别', 'unit': '开发部@kfb@U', 'attributeList': [ '生产部门', '二级部门' ] }] Source o2_core/o2/xScript/ViewEnvironment.js, line 2749 "},"module-view.html":{"id":"module-view.html","url":"module-view.html","title":"view","kind":"Module","body":" Module view 您可以通过view对象，获取视图数据或选择视图数据。 Syntax //您可以在流程表单、内容管理表单或门户页面中，通过this来获取view对象，如下： var view = this.view; Source o2_core/o2/xScript/ViewEnvironment.js, line 2838 Methods static lookup(view, callback, asyncopt) 获取指定视图的数据。 Syntax this.view.lookup(view, callback, async); Parameters view Object 要访问的视图信息。数据格式如下： 以下的filter参数参考ViewFilter { 'view' : 'testView', //（String）必选，视图的名称、别名或ID 'application' : 'test数据中心应用', //（String）必选，视图所在数据应用的名称、别名或ID 'filter': [ //（Array of Object）可选，对视图进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件。 { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] } callback function 访问成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Examples //获取“财务管理”应用中“报销审批数据”视图中的数据 //过滤条件为标题（$work.title）包含包含（like））“7月”。 this.view.lookup({ 'view': '报销审批数据', 'application': '财务管理', 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] }, function(data){ var grid = data.grid; //得到过滤后的数据 var groupGrid = data.groupGrid; //如果有分类，得到带分类的数据 //...... }); //获取“财务管理”应用中“报销审批数据”视图中的数据 //过滤条件为标题（$work.title）包含包含（like））“7月”，并且总金额大于500小于5000 this.view.lookup({ 'view': '报销审批数据', 'application': '财务管理', 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' }, { 'logic':'and', 'path':'amount', 'comparison':'range', 'value':500, 'otherValue':5000, 'formatType':'numberValue' }, ] }, function(data){ var grid = data.grid; //得到过滤后的数据 var groupGrid = data.groupGrid; //如果有分类，得到带分类的数据 //...... }); Source o2_core/o2/xScript/ViewEnvironment.js, line 2847 static select(view, callback) 通过视图进行数据选择。 Syntax this.view.select(view, callback); Parameters view Object 要访问的视图信息。数据格式如下： 以下的filter参数参考ViewFilter { 'view' : 'testView', //（String）必选，视图的名称、别名或ID 'application' : 'test数据中心应用', //（String）必选，视图所在数据应用的名称、别名或ID 'isTitle' : true, //（Boolean）可选，是否显示视图标题。默认true 'isMulti' : true, //（Boolean）可选，是否允许多选。默认true 'width' : 700, //（Number）可选，选择框的宽度。默认700 'height' : 400, //（Number）可选，选择框的高度。默认400 'caption' : '标题', //（String）可选，选择框的标题 'filter': [ //（Array of Object）可选，对视图进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件。 { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] } callback function 必选，当选择完成，点击“确定”之后的回调函数。 Example this.view.select({ 'application': '物业材料', //数据中心中的应用 'view': '物业材料视图', //视图的名称 'isMulti': false, //只允许单选 }, function(items) { //如果选择了某个数据，将数据赋值给表单输入框 if (items.length) { //物料名称，表单中输入框名为“materialName”， 视图中列的名称为“ylmc” this.data.materialName = items[0].data.ylmc; //规格，表单中输入框名为“specification”， 视图中列的名称为“gg” this.data.specification = items[0].data.gg; //单价，表单中输入框名为“price”， 视图中列的名称为“dj” this.data.price = items[0].data.dj; } }.bind(this)); Source o2_core/o2/xScript/ViewEnvironment.js, line 2946 Module view 您可以通过view对象，获取视图数据或选择视图数据。 Syntax //您可以在流程表单、内容管理表单或门户页面中，通过this来获取view对象，如下： var view = this.view; Source o2_core/o2/xScript/ViewEnvironment.js, line 2838 Methods static lookup(view, callback, asyncopt) 获取指定视图的数据。 Syntax this.view.lookup(view, callback, async); Parameters view Object 要访问的视图信息。数据格式如下： 以下的filter参数参考ViewFilter { 'view' : 'testView', //（String）必选，视图的名称、别名或ID 'application' : 'test数据中心应用', //（String）必选，视图所在数据应用的名称、别名或ID 'filter': [ //（Array of Object）可选，对视图进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件。 { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] } callback function 访问成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Examples //获取“财务管理”应用中“报销审批数据”视图中的数据 //过滤条件为标题（$work.title）包含包含（like））“7月”。 this.view.lookup({ 'view': '报销审批数据', 'application': '财务管理', 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] }, function(data){ var grid = data.grid; //得到过滤后的数据 var groupGrid = data.groupGrid; //如果有分类，得到带分类的数据 //...... }); //获取“财务管理”应用中“报销审批数据”视图中的数据 //过滤条件为标题（$work.title）包含包含（like））“7月”，并且总金额大于500小于5000 this.view.lookup({ 'view': '报销审批数据', 'application': '财务管理', 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' }, { 'logic':'and', 'path':'amount', 'comparison':'range', 'value':500, 'otherValue':5000, 'formatType':'numberValue' }, ] }, function(data){ var grid = data.grid; //得到过滤后的数据 var groupGrid = data.groupGrid; //如果有分类，得到带分类的数据 //...... }); Source o2_core/o2/xScript/ViewEnvironment.js, line 2847 static select(view, callback) 通过视图进行数据选择。 Syntax this.view.select(view, callback); Parameters view Object 要访问的视图信息。数据格式如下： 以下的filter参数参考ViewFilter { 'view' : 'testView', //（String）必选，视图的名称、别名或ID 'application' : 'test数据中心应用', //（String）必选，视图所在数据应用的名称、别名或ID 'isTitle' : true, //（Boolean）可选，是否显示视图标题。默认true 'isMulti' : true, //（Boolean）可选，是否允许多选。默认true 'width' : 700, //（Number）可选，选择框的宽度。默认700 'height' : 400, //（Number）可选，选择框的高度。默认400 'caption' : '标题', //（String）可选，选择框的标题 'filter': [ //（Array of Object）可选，对视图进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件。 { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] } callback function 必选，当选择完成，点击“确定”之后的回调函数。 Example this.view.select({ 'application': '物业材料', //数据中心中的应用 'view': '物业材料视图', //视图的名称 'isMulti': false, //只允许单选 }, function(items) { //如果选择了某个数据，将数据赋值给表单输入框 if (items.length) { //物料名称，表单中输入框名为“materialName”， 视图中列的名称为“ylmc” this.data.materialName = items[0].data.ylmc; //规格，表单中输入框名为“specification”， 视图中列的名称为“gg” this.data.specification = items[0].data.gg; //单价，表单中输入框名为“price”， 视图中列的名称为“dj” this.data.price = items[0].data.dj; } }.bind(this)); Source o2_core/o2/xScript/ViewEnvironment.js, line 2946 "},"module-statement.html":{"id":"module-statement.html","url":"module-statement.html","title":"statement","kind":"Module","body":" Module statement 您可以通过statement对象，获取执行查询语句或者对查询结果进行选择。 Syntax //您可以在流程表单、内容管理表单、门户页面或视图中，通过this来获取statement对象，如下： var statement = this.statement; Source o2_core/o2/xScript/ViewEnvironment.js, line 3080 Methods static execute(statement, callback, asyncopt) 执行指定的查询语句。 Syntax this.statement.execute(statement, callback, async); Parameters statement Object 要执行的查询语句的信息。数据格式如下： 以下的filter参数参考StatementFilter, parameter参数参考StatementParameter { 'name' : 'tesStatement', //（String）必选，查询配置的名称、别名或ID 'mode' : 'all', //（String）必选，“all”、“data”或者“count”，all表示同时执行查询语句和总数语句，data表示执行查询语句，count表示执行总数语句 'page' : 1, //（number）可选，当前页码，默认为1 'pageSize' : 20, //（number）可选，每页的数据条数，默认为20 'filter': [ //（Array）可选，对查询进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件，每个元素数据格式如下： { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ], parameter : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } } callback function 访问成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Example //获取“task”查询中的数据 //查询语句为 select o from Task o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) //总数语句为 select count(o.id) from Task o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) //过滤条件为标题o.title包含包含（like））“7月”。 this.statement.execute({ 'name': 'task', 'mode' : 'all', 'filter': [ { 'path':'o.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ], 'parameter' : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } }, function(json){ var count = json.count; //总数语句执行后返回的数字 var list = json.data; //查询语句后返回的数组 //...... }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3089 static select(statement, callback) 如果查询的类型是&quot;select&quot;，并且配置了查询视图，可以通过本方法进行数据选择。 Syntax this.statement.select(statement, callback); Parameters statement Object 要访问的查询配置的信息。数据格式如下： 以下的filter参数参考StatementFilter, parameter参数参考StatementParameter { 'name' : 'tesStatement', //（String）必选，查询配置的名称、别名或ID 'isTitle' : true, //（Boolean）可选，是否显示视图标题。默认true 'isMulti' : true, //（Boolean）可选，是否允许多选。默认true 'width' : 700, //（Number）可选，选择框的宽度。默认700 'height' : 400, //（Number）可选，选择框的高度。默认400 'caption' : '标题', //（String）可选，选择框的标题 'filter': [ //（Array）可选，对查询进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件，每个元素数据格式如下： { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ], parameter : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } } callback function 访问成功后的回调函数 Example this.statement.select({ 'name': '物业材料查询', //查询的名称 'isMulti': false, //只允许单选 }, function(items) { //如果选择了某个数据，将数据赋值给表单输入框 if (items.length) { //物料名称，表单中输入框名为“materialName”， 查询语句返回的字段名为“ylmc” this.data.materialName = items[0].ylmc; //规格，表单中输入框名为“specification”， 查询语句返回的字段名为“gg” this.data.specification = items[0].gg; //单价，表单中输入框名为“price”， 查询语句返回的字段名为“dj” this.data.price = items[0].dj; } }.bind(this)); Source o2_core/o2/xScript/ViewEnvironment.js, line 3203 Module statement 您可以通过statement对象，获取执行查询语句或者对查询结果进行选择。 Syntax //您可以在流程表单、内容管理表单、门户页面或视图中，通过this来获取statement对象，如下： var statement = this.statement; Source o2_core/o2/xScript/ViewEnvironment.js, line 3080 Methods static execute(statement, callback, asyncopt) 执行指定的查询语句。 Syntax this.statement.execute(statement, callback, async); Parameters statement Object 要执行的查询语句的信息。数据格式如下： 以下的filter参数参考StatementFilter, parameter参数参考StatementParameter { 'name' : 'tesStatement', //（String）必选，查询配置的名称、别名或ID 'mode' : 'all', //（String）必选，“all”、“data”或者“count”，all表示同时执行查询语句和总数语句，data表示执行查询语句，count表示执行总数语句 'page' : 1, //（number）可选，当前页码，默认为1 'pageSize' : 20, //（number）可选，每页的数据条数，默认为20 'filter': [ //（Array）可选，对查询进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件，每个元素数据格式如下： { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ], parameter : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } } callback function 访问成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Example //获取“task”查询中的数据 //查询语句为 select o from Task o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) //总数语句为 select count(o.id) from Task o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) //过滤条件为标题o.title包含包含（like））“7月”。 this.statement.execute({ 'name': 'task', 'mode' : 'all', 'filter': [ { 'path':'o.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ], 'parameter' : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } }, function(json){ var count = json.count; //总数语句执行后返回的数字 var list = json.data; //查询语句后返回的数组 //...... }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3089 static select(statement, callback) 如果查询的类型是&quot;select&quot;，并且配置了查询视图，可以通过本方法进行数据选择。 Syntax this.statement.select(statement, callback); Parameters statement Object 要访问的查询配置的信息。数据格式如下： 以下的filter参数参考StatementFilter, parameter参数参考StatementParameter { 'name' : 'tesStatement', //（String）必选，查询配置的名称、别名或ID 'isTitle' : true, //（Boolean）可选，是否显示视图标题。默认true 'isMulti' : true, //（Boolean）可选，是否允许多选。默认true 'width' : 700, //（Number）可选，选择框的宽度。默认700 'height' : 400, //（Number）可选，选择框的高度。默认400 'caption' : '标题', //（String）可选，选择框的标题 'filter': [ //（Array）可选，对查询进行过滤的条件。json数组格式，每个数组元素描述一个过滤条件，每个元素数据格式如下： { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ], parameter : { 'person' : '', //参数名称为下列值时，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } } callback function 访问成功后的回调函数 Example this.statement.select({ 'name': '物业材料查询', //查询的名称 'isMulti': false, //只允许单选 }, function(items) { //如果选择了某个数据，将数据赋值给表单输入框 if (items.length) { //物料名称，表单中输入框名为“materialName”， 查询语句返回的字段名为“ylmc” this.data.materialName = items[0].ylmc; //规格，表单中输入框名为“specification”， 查询语句返回的字段名为“gg” this.data.specification = items[0].gg; //单价，表单中输入框名为“price”， 查询语句返回的字段名为“dj” this.data.price = items[0].dj; } }.bind(this)); Source o2_core/o2/xScript/ViewEnvironment.js, line 3203 "},"module-importer.html":{"id":"module-importer.html","url":"module-importer.html","title":"importer","kind":"Module","body":" Module importer 您可以通过importer对象，执行导入模型的Excel导入数据功能。 Syntax //您可以在流程表单、内容管理表单、门户页面或视图中，通过this来获取statement对象，如下： var importer = this.importer; Source o2_core/o2/xScript/ViewEnvironment.js, line 3343 Methods static upload(options, callbackopt, asyncopt) 根据指定的导入模型进行上传。 Syntax this.importer.upload(options, callback, async); Parameters options Object 要执行的导入模型的选项。数据格式如下： { 'name' : 'testImporter', //（String）必选，导入模型的名称、别名或ID 'application' : 'testQuery' //（String）必选，导入模型所在应用的名称、别名或ID } callback function &lt;optional&gt; 导入成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Example this.importer.upload({ 'name': 'testImporter', 'application' : 'testQuery', }, function(json){ }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3352 static downloadTemplate(options, fileName, callback) 根据指定的导入模型下载Excel模板。 Syntax this.importer.downloadTemplate(object, fileName, callback); Parameters options Object 要执行的导入模型的选项。数据格式如下： { 'name' : 'testImporter', //（String）必选，导入模型的名称、别名或ID 'application' : 'testQuery' //（String）必选，导入模型所在应用的名称、别名或ID } fileName String 导出的Excel名称 callback function 整理好数据，在导出之前执行的方法，可接收参数如下: { 'data' : ['标题','拟稿人'], //导出的表头数组 'colWidthArray' : [200, 150] //列宽度 } Example this.importer.downloadTemplate({ 'name': 'testImporter', 'application' : 'testQuery', },'导入模板', function( object ){ //添加一项 object.data.push('备注'); object.colWidthArray.push(300) }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3386 Module importer 您可以通过importer对象，执行导入模型的Excel导入数据功能。 Syntax //您可以在流程表单、内容管理表单、门户页面或视图中，通过this来获取statement对象，如下： var importer = this.importer; Source o2_core/o2/xScript/ViewEnvironment.js, line 3343 Methods static upload(options, callbackopt, asyncopt) 根据指定的导入模型进行上传。 Syntax this.importer.upload(options, callback, async); Parameters options Object 要执行的导入模型的选项。数据格式如下： { 'name' : 'testImporter', //（String）必选，导入模型的名称、别名或ID 'application' : 'testQuery' //（String）必选，导入模型所在应用的名称、别名或ID } callback function &lt;optional&gt; 导入成功后的回调函数 async Boolean &lt;optional&gt; 同步或异步调用。true：异步；false：同步。默认为true。 Example this.importer.upload({ 'name': 'testImporter', 'application' : 'testQuery', }, function(json){ }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3352 static downloadTemplate(options, fileName, callback) 根据指定的导入模型下载Excel模板。 Syntax this.importer.downloadTemplate(object, fileName, callback); Parameters options Object 要执行的导入模型的选项。数据格式如下： { 'name' : 'testImporter', //（String）必选，导入模型的名称、别名或ID 'application' : 'testQuery' //（String）必选，导入模型所在应用的名称、别名或ID } fileName String 导出的Excel名称 callback function 整理好数据，在导出之前执行的方法，可接收参数如下: { 'data' : ['标题','拟稿人'], //导出的表头数组 'colWidthArray' : [200, 150] //列宽度 } Example this.importer.downloadTemplate({ 'name': 'testImporter', 'application' : 'testQuery', },'导入模板', function( object ){ //添加一项 object.data.push('备注'); object.colWidthArray.push(300) }); Source o2_core/o2/xScript/ViewEnvironment.js, line 3386 "},"module-queryStatement.html":{"id":"module-queryStatement.html","url":"module-queryStatement.html","title":"queryStatement","kind":"Module","body":" Module queryStatement 当查询设计中使用了select语句，并且配置了视图，可以在查询视图中使用本章API。 queryStatement对象在查询视图中可用。它的很多方法与queryView类似。（仅前端脚本可用） Usable Range QueryStatement Syntax //您可以在查询视图中，通过this来获取queryStatement对象，如下： var queryStatement = this.queryStatement; Source o2_core/o2/xScript/ViewEnvironment.js, line 3522 Methods static getParentEnvironment() &rarr; {MWF.xScript.Environment|MWF.xScript.CMSEnvironment} 当查询视图被嵌入到门户页面、流程表单或内容管理表单的时候，可以在查询视图写脚本的地方通过这个方法来获取页面或表单的上下文。 Syntax this.queryStatement.getParentEnvironment(); Returns MWF.xScript.Environment MWF.xScript.CMSEnvironment 页面或表单的上下文. Example var env = this.queryStatement.getParentEnvironment(); //当视图被嵌入到页面的时候，可以在视图里获取页面的上下文 env.page.toPortal( '公文门户' ); //调用page的toPage() 跳转到其他门户 Source o2_core/o2/xScript/ViewEnvironment.js, line 3546 static getPageInfor() &rarr; {Object} 获取查询视图当前页的基本信息。 Syntax this.queryStatement.getPageInfor(); Returns Object 当前页的信息，格式如下: { 'pages': 3, //总页数 'perPageCount': 50, //每页的条数 'currentPageNumber': 1 // 当前页数 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3559 static getPageData() &rarr; {Array.&lt;Object>|Array.&lt;Array>} 获取当前页的数据。 Syntax var data = this.queryStatement.getPageData(); Returns Array.&lt;Object> Array.&lt;Array> 当前页数据。 数据格式和 jpql 语句的写法有关 如: 'select o from table o' 返回 json数组 [ { 'id' : 'id1', 'title' : 'title1' }, { 'id' : 'id2', 'title' : 'title2' }, ... ] 如：'select id, title from table o' 返回 二维数组： [ ['id1', 'title1'], ['id2', 'title2'], ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3575 static toPage(pageNumber, callbackopt) 跳转到指定的页面。 Syntax var data = this.queryStatement.toPage( pageNumber, callback ); Parameters pageNumber Number 需要跳转的页码。 callback function &lt;optional&gt; 跳转的页面数据加载完成以后的回调方法。 Example //　跳转到第2页并且获取该页的数据。 this.queryStatement.toPage( 2, function(){ var data = this.queryStatement.getPageData(); }.bind(this) ) Source o2_core/o2/xScript/ViewEnvironment.js, line 3606 static selectAll() 当查询视图设置了允许多选的时候，可以通过这个方法全部选中当前页面的条目。 Syntax this.queryStatement.selectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3622 static unSelectAll() 当查询视图设置了允许多选的时候，可以通过这个方法取消选中的条目。 Syntax this.queryStatement.unSelectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3631 static getSelectedData() &rarr; {Array.&lt;Object>|Array.&lt;Array>} 获取选中的条目的数据。 Syntax var data = this.queryStatement.getSelectedData(); Returns Array.&lt;Object> Array.&lt;Array> 选中的条目的数据。 数据格式和 jpql 语句的写法有关 如: 'select o from table o' 返回 json数组 [ { 'id' : 'id1', 'title' : 'title1' }, { 'id' : 'id2', 'title' : 'title2' }, ... ] 如：'select id, title from table o' 返回 二维数组： [ ['id1', 'title1'], ['id2', 'title2'], ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3640 static node() 获取queryStatement对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/ViewEnvironment.js, line 3671 static getStatementInfor() &rarr; {Object} 获取查询的配置信息。 Syntax this.queryStatement.getStatementInfor(); Returns Object 查询的配置信息. { 'query': '26d21c71-5114-4496-8ca1-a69e56324841', //所属应用id 'id': 'ee334220-66d3-4f78-afce-8ccf6b995c8c', //查询id 'name': '测试查询', //名称 'alias': '', //别名 'description': '', //描述 'table': '', //自建表的id 'entityClassName': 'com.x.processplatform.core.entity.content.Task', //系统表表名 'entityCategory': 'official', //表类型 official(系统表) 或 dynamic(自建表) 'format': 'jpql', //语句类型,jpql 或者 script(脚本) 'type': 'select', //select/update/delete 'data': 'SELECT o FROM Task o where o.person = :person', //查询语句 'countData': 'SELECT count(o.id) FROM Task o where o.person = :person', //总数语句 'countScriptText' : '', //总数语句脚本 'scriptText' : '', //查询语句脚本 'viewJson': { ... } //视图相关信息 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3702 static setStatementFilter(filteropt, parameteropt, callbackopt) 增加查询语句where子句的过滤条件。 Syntax this.queryStatement.setStatementFilter( filter, parameter, callback ); Parameters filter Array.&lt;StatementFilter> | Null &lt;optional&gt; 过滤条件。 过滤条件。当不传参数、参数为null或为空数组的情况下，表示清空非视图默认的过滤条件。 如果传入非空数组的时候，参数如下： [ { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ] parameter StatementParameter &lt;optional&gt; 过滤条件。对查询语句where子句的形如&quot;:person&quot;的参数部分进行赋值，参数如下： //假设语句为 select count(o.id) from Read o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName)。 //那么可能的参数如下： { 'person' : '', //出于安全考虑参数名称为下列值时，不需要填写参数值，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } callback function &lt;optional&gt; 过滤完成并重新加载数据后的回调方法。 Source o2_core/o2/xScript/ViewEnvironment.js, line 3901 static switchStatement(options) 把当前查询视图切换成另外一个查询视图。 Syntax this.queryStatement.switchStatement( options ); Parameters options Object 需要跳转的参数配置。参数说明如下： 下列说明的filter属性参考StatementFilter， parameter属性参考StatementParameter this.queryStatement.switchStatement({ 'statementId': statementId, //必选，查询的名称、别名、id 'isTitle': 'yes', //可选，是否显示视图的标题行，可选值有:yes no 'select': 'multi', //可选，是否允许新视图选择，如果不传，则使用原视图的配置, 可选值有： 不允许选择 none, 单选 single，多选 multi 'showActionbar': false, //可选，是否显示操作条 'filter': [ //可选，增加查询语句where子句的过滤条件 { 'path': 'o.title', 'title': '标题', 'type': 'filter', 'comparison': 'like', 'formatType': 'textValue', 'value': '测试' } ], //假设语句为 select count(o.id) from Read o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) 'parameter' : { //可选，对查询语句where语句的形如':person'的参数部分进行赋值 'person' : '', //出于安全考虑参数名称为下列值时，不需要填写参数值，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } }) Source o2_core/o2/xScript/ViewEnvironment.js, line 3972 static confirm() 弹出一个确认框。 See module:form.confirm Source o2_core/o2/xScript/ViewEnvironment.js, line 4049 static alert() 显示一个带关闭按钮的信息框。 See module:form.alert Source o2_core/o2/xScript/ViewEnvironment.js, line 4078 static notice() 显示一个信息框。 See module:form.notice Source o2_core/o2/xScript/ViewEnvironment.js, line 4088 static addEvent() 给视图添加事件。 See module:form.addEvent Source o2_core/o2/xScript/ViewEnvironment.js, line 4098 static openWork() 打开一个在流转或已完成的流程实例。 See module:form.openWork Source o2_core/o2/xScript/ViewEnvironment.js, line 4116 static openJob() 根据流程的jobId打开工作。 See module:form.openJob Source o2_core/o2/xScript/ViewEnvironment.js, line 4131 static openDocument() 打开一个内容管理文档。 See module:form.openDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4230 static openPortal() 打开一个门户页面。 See module:form.openPortal Source o2_core/o2/xScript/ViewEnvironment.js, line 4243 static openCMS() 打开一个内容管理栏目。 See module:form.openCMS Source o2_core/o2/xScript/ViewEnvironment.js, line 4275 static openProcess() 打开一个流程应用。 See module:form.openProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4293 static openApplication() 打开一个任意一个component应用。 See module:form.openApplication Source o2_core/o2/xScript/ViewEnvironment.js, line 4311 static createDocument() 创建一个内容管理文档。 See module:form.createDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4321 static startProcess() 启动一个流程实例。 See module:form.startProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4376 Module queryStatement 当查询设计中使用了select语句，并且配置了视图，可以在查询视图中使用本章API。 queryStatement对象在查询视图中可用。它的很多方法与queryView类似。（仅前端脚本可用） Usable Range QueryStatement Syntax //您可以在查询视图中，通过this来获取queryStatement对象，如下： var queryStatement = this.queryStatement; Source o2_core/o2/xScript/ViewEnvironment.js, line 3522 Methods static getParentEnvironment() &rarr; {MWF.xScript.Environment|MWF.xScript.CMSEnvironment} 当查询视图被嵌入到门户页面、流程表单或内容管理表单的时候，可以在查询视图写脚本的地方通过这个方法来获取页面或表单的上下文。 Syntax this.queryStatement.getParentEnvironment(); Returns MWF.xScript.Environment MWF.xScript.CMSEnvironment 页面或表单的上下文. Example var env = this.queryStatement.getParentEnvironment(); //当视图被嵌入到页面的时候，可以在视图里获取页面的上下文 env.page.toPortal( '公文门户' ); //调用page的toPage() 跳转到其他门户 Source o2_core/o2/xScript/ViewEnvironment.js, line 3546 static getPageInfor() &rarr; {Object} 获取查询视图当前页的基本信息。 Syntax this.queryStatement.getPageInfor(); Returns Object 当前页的信息，格式如下: { 'pages': 3, //总页数 'perPageCount': 50, //每页的条数 'currentPageNumber': 1 // 当前页数 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3559 static getPageData() &rarr; {Array.&lt;Object>|Array.&lt;Array>} 获取当前页的数据。 Syntax var data = this.queryStatement.getPageData(); Returns Array.&lt;Object> Array.&lt;Array> 当前页数据。 数据格式和 jpql 语句的写法有关 如: 'select o from table o' 返回 json数组 [ { 'id' : 'id1', 'title' : 'title1' }, { 'id' : 'id2', 'title' : 'title2' }, ... ] 如：'select id, title from table o' 返回 二维数组： [ ['id1', 'title1'], ['id2', 'title2'], ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3575 static toPage(pageNumber, callbackopt) 跳转到指定的页面。 Syntax var data = this.queryStatement.toPage( pageNumber, callback ); Parameters pageNumber Number 需要跳转的页码。 callback function &lt;optional&gt; 跳转的页面数据加载完成以后的回调方法。 Example //　跳转到第2页并且获取该页的数据。 this.queryStatement.toPage( 2, function(){ var data = this.queryStatement.getPageData(); }.bind(this) ) Source o2_core/o2/xScript/ViewEnvironment.js, line 3606 static selectAll() 当查询视图设置了允许多选的时候，可以通过这个方法全部选中当前页面的条目。 Syntax this.queryStatement.selectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3622 static unSelectAll() 当查询视图设置了允许多选的时候，可以通过这个方法取消选中的条目。 Syntax this.queryStatement.unSelectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3631 static getSelectedData() &rarr; {Array.&lt;Object>|Array.&lt;Array>} 获取选中的条目的数据。 Syntax var data = this.queryStatement.getSelectedData(); Returns Array.&lt;Object> Array.&lt;Array> 选中的条目的数据。 数据格式和 jpql 语句的写法有关 如: 'select o from table o' 返回 json数组 [ { 'id' : 'id1', 'title' : 'title1' }, { 'id' : 'id2', 'title' : 'title2' }, ... ] 如：'select id, title from table o' 返回 二维数组： [ ['id1', 'title1'], ['id2', 'title2'], ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3640 static node() 获取queryStatement对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/ViewEnvironment.js, line 3671 static getStatementInfor() &rarr; {Object} 获取查询的配置信息。 Syntax this.queryStatement.getStatementInfor(); Returns Object 查询的配置信息. { 'query': '26d21c71-5114-4496-8ca1-a69e56324841', //所属应用id 'id': 'ee334220-66d3-4f78-afce-8ccf6b995c8c', //查询id 'name': '测试查询', //名称 'alias': '', //别名 'description': '', //描述 'table': '', //自建表的id 'entityClassName': 'com.x.processplatform.core.entity.content.Task', //系统表表名 'entityCategory': 'official', //表类型 official(系统表) 或 dynamic(自建表) 'format': 'jpql', //语句类型,jpql 或者 script(脚本) 'type': 'select', //select/update/delete 'data': 'SELECT o FROM Task o where o.person = :person', //查询语句 'countData': 'SELECT count(o.id) FROM Task o where o.person = :person', //总数语句 'countScriptText' : '', //总数语句脚本 'scriptText' : '', //查询语句脚本 'viewJson': { ... } //视图相关信息 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3702 static setStatementFilter(filteropt, parameteropt, callbackopt) 增加查询语句where子句的过滤条件。 Syntax this.queryStatement.setStatementFilter( filter, parameter, callback ); Parameters filter Array.&lt;StatementFilter> | Null &lt;optional&gt; 过滤条件。 过滤条件。当不传参数、参数为null或为空数组的情况下，表示清空非视图默认的过滤条件。 如果传入非空数组的时候，参数如下： [ { 'path':'o.title', 'comparison':'like', 'value':'关于', 'formatType':'textValue' } ] parameter StatementParameter &lt;optional&gt; 过滤条件。对查询语句where子句的形如&quot;:person&quot;的参数部分进行赋值，参数如下： //假设语句为 select count(o.id) from Read o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName)。 //那么可能的参数如下： { 'person' : '', //出于安全考虑参数名称为下列值时，不需要填写参数值，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } callback function &lt;optional&gt; 过滤完成并重新加载数据后的回调方法。 Source o2_core/o2/xScript/ViewEnvironment.js, line 3901 static switchStatement(options) 把当前查询视图切换成另外一个查询视图。 Syntax this.queryStatement.switchStatement( options ); Parameters options Object 需要跳转的参数配置。参数说明如下： 下列说明的filter属性参考StatementFilter， parameter属性参考StatementParameter this.queryStatement.switchStatement({ 'statementId': statementId, //必选，查询的名称、别名、id 'isTitle': 'yes', //可选，是否显示视图的标题行，可选值有:yes no 'select': 'multi', //可选，是否允许新视图选择，如果不传，则使用原视图的配置, 可选值有： 不允许选择 none, 单选 single，多选 multi 'showActionbar': false, //可选，是否显示操作条 'filter': [ //可选，增加查询语句where子句的过滤条件 { 'path': 'o.title', 'title': '标题', 'type': 'filter', 'comparison': 'like', 'formatType': 'textValue', 'value': '测试' } ], //假设语句为 select count(o.id) from Read o where (o.person = :person) and (o.startTime > :startTime) and (o.applicationName like :applicationName) and (o.processName = :processName) 'parameter' : { //可选，对查询语句where语句的形如':person'的参数部分进行赋值 'person' : '', //出于安全考虑参数名称为下列值时，不需要填写参数值，后台默认赋值，person(当前人),identityList(当前人身份列表),unitList(当前人所在直接组织), unitAllList(当前人所在所有组织), groupList(当前人所在群组) 'startTime' : (new Date('2020-01-01')), //如果对比的是日期，需要传入 Date 类型 'applicationName' : '%test%', //如果运算符用的是 like, noLike，模糊查询 'processName' : 'test流程' //其他写确定的值 } }) Source o2_core/o2/xScript/ViewEnvironment.js, line 3972 static confirm() 弹出一个确认框。 See module:form.confirm Source o2_core/o2/xScript/ViewEnvironment.js, line 4049 static alert() 显示一个带关闭按钮的信息框。 See module:form.alert Source o2_core/o2/xScript/ViewEnvironment.js, line 4078 static notice() 显示一个信息框。 See module:form.notice Source o2_core/o2/xScript/ViewEnvironment.js, line 4088 static addEvent() 给视图添加事件。 See module:form.addEvent Source o2_core/o2/xScript/ViewEnvironment.js, line 4098 static openWork() 打开一个在流转或已完成的流程实例。 See module:form.openWork Source o2_core/o2/xScript/ViewEnvironment.js, line 4116 static openJob() 根据流程的jobId打开工作。 See module:form.openJob Source o2_core/o2/xScript/ViewEnvironment.js, line 4131 static openDocument() 打开一个内容管理文档。 See module:form.openDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4230 static openPortal() 打开一个门户页面。 See module:form.openPortal Source o2_core/o2/xScript/ViewEnvironment.js, line 4243 static openCMS() 打开一个内容管理栏目。 See module:form.openCMS Source o2_core/o2/xScript/ViewEnvironment.js, line 4275 static openProcess() 打开一个流程应用。 See module:form.openProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4293 static openApplication() 打开一个任意一个component应用。 See module:form.openApplication Source o2_core/o2/xScript/ViewEnvironment.js, line 4311 static createDocument() 创建一个内容管理文档。 See module:form.createDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4321 static startProcess() 启动一个流程实例。 See module:form.startProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4376 "},"module-queryView.html":{"id":"module-queryView.html","url":"module-queryView.html","title":"queryView","kind":"Module","body":" Module queryView queryView对象可在视图中可用。它的很多方法与form类似。（仅前端脚本可用） Usable Range QueryView Syntax //您可以在视图中，通过this来获取queryView对象，如下： var queryView = this.queryView; Source o2_core/o2/xScript/ViewEnvironment.js, line 3679 Methods static getParentEnvironment() &rarr; {MWF.xScript.Environment|MWF.xScript.CMSEnvironment} 当视图被嵌入到门户页面、流程表单或内容管理表单的时候，可以在视图可以写脚本的地方中通过这个方法来获取页面或表单的上下文。 Syntax this.queryView.getParentEnvironment(); Returns MWF.xScript.Environment MWF.xScript.CMSEnvironment 页面或表单的上下文. Example var env = this.queryView.getParentEnvironment(); //当视图被嵌入到页面的时候，可以在视图里获取页面的上下文 env.page.toPortal( '公文门户' ); //调用page的toPage() 跳转到其他门户 Source o2_core/o2/xScript/ViewEnvironment.js, line 3689 static getViewInfor() &rarr; {Object} 获取查询的配置信息。 Syntax this.queryView.getViewInfor(); Returns Object 视图的配置信息. { 'application': 'db9fc893-7dbc-4e0f-a617-99089d2c6323', //视图所在应用 'query': 'db9fc893-7dbc-4e0f-a617-99089d2c6323', //视图所在应用，同application 'name': '视图自定义测试', //视图名称 'viewName': '视图自定义测试', //视图名称，同name 'isExpand': 'no', //如果有分类，默认是否展开开 'id': '705ce967-2f9c-425c-8873-3bd729249e1d', //视图id 'alias': '', //视图别名 'description': '', //视图描述 'display': true, //视图是否显示 'type': 'cms', //视图嵌入的数据类型, cms 或 process 'count': 2000, //最多返回2000条 'pageSize': 20, //每页的条数 'createTime': '2019-09-02 10:18:27', 'updateTime': '2020-03-26 15:53:03' } Source o2_core/o2/xScript/ViewEnvironment.js, line 3730 static getPageInfor() &rarr; {Object} 获取视图当前页的基本信息。 Syntax this.queryView.getPageInfor(); Returns Object 当前页的信息，格式如下: { 'pages': 3, //总页数 'perPageCount': 50, //每页的条数 'currentPageNumber': 1 // 当前页数 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3757 static getPageData() &rarr; {Array.&lt;Object>} 获取当前页的数据。 Syntax var data = this.queryView.getPageData(); Returns Array.&lt;Object> 当前页数据。 没有分类时候，数据格式如下： [ { 'bundle': '099ed3c9-dfbc-4094-a8b7-5bfd6c5f7070', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '考勤管理-配置-统计周期设置', //列名称及列值 'time': '2018-08-25 11:29:45' } }, ... ] 有分类的时候，数据格式如下： [ { 'group': '工作日志', //分类1 'list': [ //分类下的数据 { 'bundle': '001257be-725a-43cf-9679-3892bbab696a', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '标题', //列名称及列值 'time': '2018-07-31 15:39:13', 'category': '工作日志' } }, ... ] }, ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3774 static toPage(pageNumber, callbackopt) 跳转到指定的页面。 Syntax var data = this.queryView.toPage( pageNumber, callback ); Parameters pageNumber Number 需要跳转的页码。 callback function &lt;optional&gt; 跳转的页面数据加载完成以后的回调方法。 Example //　跳转到第2页并且获取该页的数据。 this.queryView.toPage( 2, function(){ var data = this.queryView.getPageData(); }.bind(this) ) Source o2_core/o2/xScript/ViewEnvironment.js, line 3816 static selectAll() 当视图设置了允许多选的时候，可以通过这个方法全部选中当前页面的条目。 Syntax this.queryView.selectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3833 static unSelectAll() 当视图设置了允许多选的时候，可以通过这个方法取消选中的条目。 Syntax this.queryView.unSelectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3843 static getSelectedData() &rarr; {Array.&lt;Object>} 获取选中的条目的数据。 Syntax var data = this.queryView.getSelectedData(); Returns Array.&lt;Object> 选中的条目的数据。 格式如下： [ { 'bundle': '099ed3c9-dfbc-4094-a8b7-5bfd6c5f7070', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '考勤管理-配置-统计周期设置', //列名称及列值 'time': '2018-08-25 11:29:45' } }, ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3853 static setFilter(filteropt, callbackopt) 设置视图的过滤条件，该方法不能修改视图中默认的过滤条件（在开发视图的时候添加的过滤条件），而是在这上面新增。 Syntax this.queryView.setFilter( filter ); Parameters filter Array.&lt;ViewFilter> | ViewFilter | Null &lt;optional&gt; 过滤条件。 当不传参数、参数为null或为空数组的情况下，表示清空非视图默认的过滤条件。 如果传入对象或者非空数组的时候，参数如下： [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] callback function &lt;optional&gt; 过滤完成并重新加载数据后的回调方法。 Source o2_core/o2/xScript/ViewEnvironment.js, line 3877 static switchView(options) 把当前视图切换成另外一个视图。 Syntax this.queryView.switchView( options ); Parameters options Object 需要跳转的参数配置。参数说明如下： 下列说明的filter属性参考ViewFilter { 'application': application, //必选，视图的所在应用id 'viewName': viewName, //必选，视图的名称 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ], //可选，增加视图的过滤条件（ViewFilter），如果不传，则使用原视图的配置；如果需要去掉原视图的配置，则传入空数组 [] 'isTitle': 'yes', //可选，是否显示t视图的标题行，可选值有:yes no 'select': 'none', //可选，是否允许新视图选择，如果不传，则使用原视图的配置, 可选值有： 不允许选择 none, 单选 single，多选 multi 'titleStyles': { 'color' : 'red', 'font-size' : '14px' }, //可选，标题行样式，如果不传，则使用原视图的配置 'itemStyles': { 'color' : '#333', 'font-size' : '12px' }, //可选，内容行样式，如果不传，则使用原视图的配置 'isExpand': 'no', //可选，默认是否展开分类，如果不传，则使用原视图的配置, 可选值有:yes no } Source o2_core/o2/xScript/ViewEnvironment.js, line 3935 static reload() 重新加载视图。 Syntax this.queryView.reload(); Source o2_core/o2/xScript/ViewEnvironment.js, line 4009 static node() 获取queryView对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/ViewEnvironment.js, line 4024 static confirm() 弹出一个确认框。 See module:form.confirm Source o2_core/o2/xScript/ViewEnvironment.js, line 4049 static alert() 显示一个带关闭按钮的信息框。 See module:form.alert Source o2_core/o2/xScript/ViewEnvironment.js, line 4078 static notice() 显示一个信息框。 See module:form.notice Source o2_core/o2/xScript/ViewEnvironment.js, line 4088 static addEvent() 给视图添加事件。 See module:form.addEvent Source o2_core/o2/xScript/ViewEnvironment.js, line 4098 static openWork() 打开一个在流转或已完成的流程实例。 See module:form.openWork Source o2_core/o2/xScript/ViewEnvironment.js, line 4116 static openJob() 根据流程的jobId打开工作。 See module:form.openJob Source o2_core/o2/xScript/ViewEnvironment.js, line 4131 static openDocument() 打开一个内容管理文档。 See module:form.openDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4230 static openPortal() 打开一个门户页面。 See module:form.openPortal Source o2_core/o2/xScript/ViewEnvironment.js, line 4243 static openCMS() 打开一个内容管理栏目。 See module:form.openCMS Source o2_core/o2/xScript/ViewEnvironment.js, line 4275 static openProcess() 打开一个流程应用。 See module:form.openProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4293 static openApplication() 打开一个任意一个component应用。 See module:form.openApplication Source o2_core/o2/xScript/ViewEnvironment.js, line 4311 static createDocument() 创建一个内容管理文档。 See module:form.createDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4321 static startProcess() 启动一个流程实例。 See module:form.startProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4376 Module queryView queryView对象可在视图中可用。它的很多方法与form类似。（仅前端脚本可用） Usable Range QueryView Syntax //您可以在视图中，通过this来获取queryView对象，如下： var queryView = this.queryView; Source o2_core/o2/xScript/ViewEnvironment.js, line 3679 Methods static getParentEnvironment() &rarr; {MWF.xScript.Environment|MWF.xScript.CMSEnvironment} 当视图被嵌入到门户页面、流程表单或内容管理表单的时候，可以在视图可以写脚本的地方中通过这个方法来获取页面或表单的上下文。 Syntax this.queryView.getParentEnvironment(); Returns MWF.xScript.Environment MWF.xScript.CMSEnvironment 页面或表单的上下文. Example var env = this.queryView.getParentEnvironment(); //当视图被嵌入到页面的时候，可以在视图里获取页面的上下文 env.page.toPortal( '公文门户' ); //调用page的toPage() 跳转到其他门户 Source o2_core/o2/xScript/ViewEnvironment.js, line 3689 static getViewInfor() &rarr; {Object} 获取查询的配置信息。 Syntax this.queryView.getViewInfor(); Returns Object 视图的配置信息. { 'application': 'db9fc893-7dbc-4e0f-a617-99089d2c6323', //视图所在应用 'query': 'db9fc893-7dbc-4e0f-a617-99089d2c6323', //视图所在应用，同application 'name': '视图自定义测试', //视图名称 'viewName': '视图自定义测试', //视图名称，同name 'isExpand': 'no', //如果有分类，默认是否展开开 'id': '705ce967-2f9c-425c-8873-3bd729249e1d', //视图id 'alias': '', //视图别名 'description': '', //视图描述 'display': true, //视图是否显示 'type': 'cms', //视图嵌入的数据类型, cms 或 process 'count': 2000, //最多返回2000条 'pageSize': 20, //每页的条数 'createTime': '2019-09-02 10:18:27', 'updateTime': '2020-03-26 15:53:03' } Source o2_core/o2/xScript/ViewEnvironment.js, line 3730 static getPageInfor() &rarr; {Object} 获取视图当前页的基本信息。 Syntax this.queryView.getPageInfor(); Returns Object 当前页的信息，格式如下: { 'pages': 3, //总页数 'perPageCount': 50, //每页的条数 'currentPageNumber': 1 // 当前页数 } Source o2_core/o2/xScript/ViewEnvironment.js, line 3757 static getPageData() &rarr; {Array.&lt;Object>} 获取当前页的数据。 Syntax var data = this.queryView.getPageData(); Returns Array.&lt;Object> 当前页数据。 没有分类时候，数据格式如下： [ { 'bundle': '099ed3c9-dfbc-4094-a8b7-5bfd6c5f7070', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '考勤管理-配置-统计周期设置', //列名称及列值 'time': '2018-08-25 11:29:45' } }, ... ] 有分类的时候，数据格式如下： [ { 'group': '工作日志', //分类1 'list': [ //分类下的数据 { 'bundle': '001257be-725a-43cf-9679-3892bbab696a', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '标题', //列名称及列值 'time': '2018-07-31 15:39:13', 'category': '工作日志' } }, ... ] }, ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3774 static toPage(pageNumber, callbackopt) 跳转到指定的页面。 Syntax var data = this.queryView.toPage( pageNumber, callback ); Parameters pageNumber Number 需要跳转的页码。 callback function &lt;optional&gt; 跳转的页面数据加载完成以后的回调方法。 Example //　跳转到第2页并且获取该页的数据。 this.queryView.toPage( 2, function(){ var data = this.queryView.getPageData(); }.bind(this) ) Source o2_core/o2/xScript/ViewEnvironment.js, line 3816 static selectAll() 当视图设置了允许多选的时候，可以通过这个方法全部选中当前页面的条目。 Syntax this.queryView.selectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3833 static unSelectAll() 当视图设置了允许多选的时候，可以通过这个方法取消选中的条目。 Syntax this.queryView.unSelectAll(); Source o2_core/o2/xScript/ViewEnvironment.js, line 3843 static getSelectedData() &rarr; {Array.&lt;Object>} 获取选中的条目的数据。 Syntax var data = this.queryView.getSelectedData(); Returns Array.&lt;Object> 选中的条目的数据。 格式如下： [ { 'bundle': '099ed3c9-dfbc-4094-a8b7-5bfd6c5f7070', //cms 的 documentId, process 的 jobId 'data': { //视图中配置的数据 'title': '考勤管理-配置-统计周期设置', //列名称及列值 'time': '2018-08-25 11:29:45' } }, ... ] Source o2_core/o2/xScript/ViewEnvironment.js, line 3853 static setFilter(filteropt, callbackopt) 设置视图的过滤条件，该方法不能修改视图中默认的过滤条件（在开发视图的时候添加的过滤条件），而是在这上面新增。 Syntax this.queryView.setFilter( filter ); Parameters filter Array.&lt;ViewFilter> | ViewFilter | Null &lt;optional&gt; 过滤条件。 当不传参数、参数为null或为空数组的情况下，表示清空非视图默认的过滤条件。 如果传入对象或者非空数组的时候，参数如下： [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ] callback function &lt;optional&gt; 过滤完成并重新加载数据后的回调方法。 Source o2_core/o2/xScript/ViewEnvironment.js, line 3877 static switchView(options) 把当前视图切换成另外一个视图。 Syntax this.queryView.switchView( options ); Parameters options Object 需要跳转的参数配置。参数说明如下： 下列说明的filter属性参考ViewFilter { 'application': application, //必选，视图的所在应用id 'viewName': viewName, //必选，视图的名称 'filter': [ { 'logic':'and', 'path':'$work.title', 'comparison':'like', 'value':'7月', 'formatType':'textValue' } ], //可选，增加视图的过滤条件（ViewFilter），如果不传，则使用原视图的配置；如果需要去掉原视图的配置，则传入空数组 [] 'isTitle': 'yes', //可选，是否显示t视图的标题行，可选值有:yes no 'select': 'none', //可选，是否允许新视图选择，如果不传，则使用原视图的配置, 可选值有： 不允许选择 none, 单选 single，多选 multi 'titleStyles': { 'color' : 'red', 'font-size' : '14px' }, //可选，标题行样式，如果不传，则使用原视图的配置 'itemStyles': { 'color' : '#333', 'font-size' : '12px' }, //可选，内容行样式，如果不传，则使用原视图的配置 'isExpand': 'no', //可选，默认是否展开分类，如果不传，则使用原视图的配置, 可选值有:yes no } Source o2_core/o2/xScript/ViewEnvironment.js, line 3935 static reload() 重新加载视图。 Syntax this.queryView.reload(); Source o2_core/o2/xScript/ViewEnvironment.js, line 4009 static node() 获取queryView对应的DOM对象。 See module:form.node Source o2_core/o2/xScript/ViewEnvironment.js, line 4024 static confirm() 弹出一个确认框。 See module:form.confirm Source o2_core/o2/xScript/ViewEnvironment.js, line 4049 static alert() 显示一个带关闭按钮的信息框。 See module:form.alert Source o2_core/o2/xScript/ViewEnvironment.js, line 4078 static notice() 显示一个信息框。 See module:form.notice Source o2_core/o2/xScript/ViewEnvironment.js, line 4088 static addEvent() 给视图添加事件。 See module:form.addEvent Source o2_core/o2/xScript/ViewEnvironment.js, line 4098 static openWork() 打开一个在流转或已完成的流程实例。 See module:form.openWork Source o2_core/o2/xScript/ViewEnvironment.js, line 4116 static openJob() 根据流程的jobId打开工作。 See module:form.openJob Source o2_core/o2/xScript/ViewEnvironment.js, line 4131 static openDocument() 打开一个内容管理文档。 See module:form.openDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4230 static openPortal() 打开一个门户页面。 See module:form.openPortal Source o2_core/o2/xScript/ViewEnvironment.js, line 4243 static openCMS() 打开一个内容管理栏目。 See module:form.openCMS Source o2_core/o2/xScript/ViewEnvironment.js, line 4275 static openProcess() 打开一个流程应用。 See module:form.openProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4293 static openApplication() 打开一个任意一个component应用。 See module:form.openApplication Source o2_core/o2/xScript/ViewEnvironment.js, line 4311 static createDocument() 创建一个内容管理文档。 See module:form.createDocument Source o2_core/o2/xScript/ViewEnvironment.js, line 4321 static startProcess() 启动一个流程实例。 See module:form.startProcess Source o2_core/o2/xScript/ViewEnvironment.js, line 4376 "},"module-session.html":{"id":"module-session.html","url":"module-session.html","title":"session","kind":"Module","body":" Module session 在前端脚本中，可以通过this.session.user来获取当前用户信息。 Syntax var user = this.session.user; Returns Object 当前用户信息，内容和格式如下： { 'id': '267a7bcc-f27a-49c8-8364-f1c12061085a', //人员ID 'genderType': 'm', //性别 'icon': '...', //头像 'signature': '', //个人签名 'name': '胡起', //姓名 'employee': 'huqi', //员工号 'unique': 'huqi', //唯一标识 'distinguishedName': 'xx@huqi@P', //人员全称 'superior': '', //上级人员id 'changePasswordTime': '2017-03-13', //修改密码时间 'lastLoginTime': '2019-01-02', //最后登录时间 'mail': 'huqi@zoneland.net', //邮件地址 'weixin': '', //微信号 'qq': '', //QQ 'mobile': '18057190078', //手机号码 'officePhone': '', //办公电话 'createTime': '2017-03-13 12:27:04', //人员创建时间 'updateTime': '2019-01-02 13:00:04', //人员修改时间 'token': '...', //当前用户token 'roleList': [ //人员角色 'ProcessPlatformCreator@ProcessPlatformCreatorSystemRole@R', 'ProcessPlatformManager@ProcessPlatformManagerSystemRole@R', 'Manager@ManagerSystemRole@R' ], 'identityList': [ //人员身份列表 { 'id': '709328c8-44a0-4f5d-a3fa-3c31208232d5', //身份ID 'name': 'xx', //身份名称 'unique': '709328c8-44a0-4f5d-a3fa-3c31208232d5', //身份唯一标识 'distinguishedName': 'xx@709328c8-44a0-4f5d-a3fa-3c31208232d5@I', //身份全称 'person': '267a7bcc-f27a-49c8-8364-f1c12061085a', //人员ID 'unit': 'd5356fd4-6675-45ad-9a00-5eff20b83dfa', //所属组织ID 'unitName': '开发部', //所属组织名称 'unitLevel': 2, //所属组织层级 'unitLevelName': '兰德纵横/开发部', //所属组织层次名 'major': true //是否是主身份 }, { 'id': '343510af-57c2-4a55-a1f2-f30d7af6d284', 'description': '', 'name': 'xx', 'unique': '343510af-57c2-4a55-a1f2-f30d7af6d284', 'distinguishedName': 'xx@343510af-57c2-4a55-a1f2-f30d7af6d284@I', 'person': '267a7bcc-f27a-49c8-8364-f1c12061085a', 'unit': '108b1b7c-cc78-49ab-9ab1-e67073bd6541', 'unitName': '开发部', 'unitLevel': 2, 'unitLevelName': '浙江兰德纵横/开发部', 'major': false } ] } Example //获取当前用户信息 var user = this.session.user Source o2_core/o2/xScript/ViewEnvironment.js, line 4450 Module session 在前端脚本中，可以通过this.session.user来获取当前用户信息。 Syntax var user = this.session.user; Returns Object 当前用户信息，内容和格式如下： { 'id': '267a7bcc-f27a-49c8-8364-f1c12061085a', //人员ID 'genderType': 'm', //性别 'icon': '...', //头像 'signature': '', //个人签名 'name': '胡起', //姓名 'employee': 'huqi', //员工号 'unique': 'huqi', //唯一标识 'distinguishedName': 'xx@huqi@P', //人员全称 'superior': '', //上级人员id 'changePasswordTime': '2017-03-13', //修改密码时间 'lastLoginTime': '2019-01-02', //最后登录时间 'mail': 'huqi@zoneland.net', //邮件地址 'weixin': '', //微信号 'qq': '', //QQ 'mobile': '18057190078', //手机号码 'officePhone': '', //办公电话 'createTime': '2017-03-13 12:27:04', //人员创建时间 'updateTime': '2019-01-02 13:00:04', //人员修改时间 'token': '...', //当前用户token 'roleList': [ //人员角色 'ProcessPlatformCreator@ProcessPlatformCreatorSystemRole@R', 'ProcessPlatformManager@ProcessPlatformManagerSystemRole@R', 'Manager@ManagerSystemRole@R' ], 'identityList': [ //人员身份列表 { 'id': '709328c8-44a0-4f5d-a3fa-3c31208232d5', //身份ID 'name': 'xx', //身份名称 'unique': '709328c8-44a0-4f5d-a3fa-3c31208232d5', //身份唯一标识 'distinguishedName': 'xx@709328c8-44a0-4f5d-a3fa-3c31208232d5@I', //身份全称 'person': '267a7bcc-f27a-49c8-8364-f1c12061085a', //人员ID 'unit': 'd5356fd4-6675-45ad-9a00-5eff20b83dfa', //所属组织ID 'unitName': '开发部', //所属组织名称 'unitLevel': 2, //所属组织层级 'unitLevelName': '兰德纵横/开发部', //所属组织层次名 'major': true //是否是主身份 }, { 'id': '343510af-57c2-4a55-a1f2-f30d7af6d284', 'description': '', 'name': 'xx', 'unique': '343510af-57c2-4a55-a1f2-f30d7af6d284', 'distinguishedName': 'xx@343510af-57c2-4a55-a1f2-f30d7af6d284@I', 'person': '267a7bcc-f27a-49c8-8364-f1c12061085a', 'unit': '108b1b7c-cc78-49ab-9ab1-e67073bd6541', 'unitName': '开发部', 'unitLevel': 2, 'unitLevelName': '浙江兰德纵横/开发部', 'major': false } ] } Example //获取当前用户信息 var user = this.session.user Source o2_core/o2/xScript/ViewEnvironment.js, line 4450 "},"module-Actions.html":{"id":"module-Actions.html","url":"module-Actions.html","title":"Actions","kind":"Module","body":" Module Actions 本文档说明如何在前台脚本中使用Actions调用平台的RESTful服务。 通过访问以下地址来查询服务列表：http://server:20030/x_program_center/jest/list.html Syntax //获取Actions this.Actions //或者 o2.Actions Source o2_core/o2/xScript/ViewEnvironment.js, line 4519 Methods static getHost(root) &rarr; {String} 本平台不同的服务根可能对应不同的域名或端口，您可以使用this.Actions.getHost来获取服务跟对应的host。 Syntax var actions = this.Actions.getHost( root ); Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: &quot;x_processplatform_assemble_surface&quot; //流程平台相关服务根 Returns String 对应服务跟对应的host。如：http://127.0.0.1:20020 Source o2_core/o2/xScript/ViewEnvironment.js, line 4531 load(root) &rarr; {Object} 平台预置了Actions对象用于调用平台提供的服务，您可以使用this.Actions.load来获取这些方法。 Syntax var actions = o2.Actions.load( root ); //或 var actions = this.Actions.load( root ); //获取流程平台服务对象。 var processAction = this.Actions.load('x_processplatform_assemble_surface'); 通过this.Actions.load(root)方法得到action对象，就可以访问此服务下的方法了。 访问方法的规则如下： var promise = this.Actions.load( root )[actionName][methodName]( arguements ); promise : Promise对象，可以通过promise.then接收返回数据 promise.then( function(json){ //json为返回的数据 } ) root : 平台服务根名称，如果 x_processplatform_assemble_surface actionName : 服务下的Action分类名称，如 TaskAction methodName : Action分类下的方法名称，如 get arguements : 需调用的RESTful服务的相关参数。这些参数需要按照先后顺序传入。根据实际情况可以省略某些参数。参数序列分别是: uri的参数, data/formData(Post, Put方法), file(附件), success, failure, async。 uri参数：如果有uri有多个参数，需要按先后顺序传入。 data（formData）参数：提交到后台的数据，如果是上传附件，传入formData。POST 和 PUT 方法需要传入，GET方法和DELETE方法省略。 file参数：POST 或者 PUT方法中有效，当需要上传附件时传入,否则可以省略。 success参数：服务执行成功时的回调方法，形如 function(json){ json为后台服务传回的数据 }。 failure 参数：服务执行失败时的回调方法，形如 function(xhr){ xhr XmlHttpRequest对象，服务器请求失败时有值 } 此参数可以省略，如果省略，系统会自动弹出错误信息。 async : 方法同步或者异步执行，默认为true。 处理返回的数据有两种方式，二选一即可： 1、该方法return的结果是Promise对象，可以通过 promise.then() 方法来处理。 Promise说明 2、通过success方法作为第一个参数来处理结果 promise.then( function(json){ //json为返回的数据 } ) //success：arguements中的第一个function对象 function(json){ //json为后台服务传回的数据 } Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: 'x_processplatform_assemble_surface' //流程平台相关服务根 Returns Object 返回action对象，用于后续服务调用 Examples 样例1: 根据x_processplatform_assemble_surface服务获取当前用户的待办列表： 可以通过对应服务的查询页面，http://server:20020/x_processplatform_assemble_surface/jest/index.html 可以看到以下界面： 我们可以找到TaskAction的V2ListPaging服务是列式当前用户待办的服务。 该服务有以下信息： 1、actionName是：TaskAction 2、methodName是：V2ListPaging 3、有两个url参数，分别是 page(分页), size(每页数量) 4、有一系列的body参数 5、该服务方法类型是POST 根据这些信息我们可以组织出下面的方法： var processAction = this.Actions.load('x_processplatform_assemble_surface'); //获取action var method = processAction.TaskAction.V2ListPaging; //获取列式方法 //执行方法1 method( 1, //uri 第1个参数，如果无uri参数，可以省略 20, //uri 第2个参数，如果无uri参数，可以省略，如果还有其他uri参数，可以用逗号, 分隔 { //body 参数，对POST和PUT请求，该参数必须传，可以为空对象 processList : [xxx] //具体参数 }, function(json){ //正确调用的回调 //json.data得到服务返回数据 }, function(xhr){ //可选，错误调用的回调 //xhr为XmlHttpRequest对象，服务器请求失败时有值 var responseJSON = JSON.parse( xhr.responseText ) //xhr.responseText {String}是后台返回的出错信息 //responseJSON见下面的说明 var message = responseJSON.message; //message为错误提示文本 }, true //可选，true为异步调用，false为同步调用，默认为true ); //执行方法2 var promise = method( 1, 20, {processList : [xxx]} ) promise.then( function(json){ //json.data得到服务返回数据 }) 出错信息responseJSON的格式 { 'type': 'error', //类型为错误 'message': '标识为:343434 的 Task 对象不存在.', //提示文本 'date': '2020-12-29 17:02:13', //出错时间 'prompt': 'com.x.base.core.project.exception.ExceptionEntityNotExist' //后台错误类 } 样例2: 已知流程实例的workid，在脚本中获取数据，修改后进行保存。 //查询服务列表找到获取data数据服务为DataAction的getWithWork方法 //查询服务列表找到更新data数据服务为DataAction的updateWithWork方法 var workid = 'cce8bc22-225a-4f85-8132-7374d546886e'; var data; this.Actions.load('x_processplatform_assemble_surface').DataAction.getWithWork( //平台封装好的方法 workid, //uri的参数 function( json ){ //服务调用成功的回调函数, json为服务传回的数据 data = json.data; //为变量data赋值 }.bind(this), false //同步执行 ) data.subject = '新标题'; //修改数据 this.Actions.load('x_processplatform_assemble_surface').DataAction.updateWithWork( workid, //uri的参数 data, //保存的数据 function(){ //服务调用成功的回调函数 o2.xDesktop.notice('success', {'y':'top', 'x': 'right'}, '保存成功'); //提示，{'y':'top', 'x': 'right'}指提示框在顶部右边 }.bind(this) ); Source o2_core/o2/xScript/ViewEnvironment.js, line 4545 get(root) &rarr; {String} 已过时。平台预置了Action的调用方法，您可以使用o2.Actions.get来获取这些方法。RESTful配置文件在{服务器目录}/webServer/o2_core/o2/xAction/services下。 Syntax var actions = o2.Actions.get( root ); actions[ methodName ]( arguements ); or o2.Actions.get( root )[methodName]( arguements ); methodName :（string）方法名称。 arguements : 见load方法的arguements说明 Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: &quot;x_processplatform_assemble_surface&quot; //流程平台相关服务根 Deprecated Yes Returns String 对应服务根的host。如：http://127.0.0.1:20020 Examples 样例一:已知流程实例的workid，在脚本中获取数据，修改后进行保存。 //现已知获取数据的方法名称是 getWorkData uri为： /jaxrs/data/work/{workid} //已知更新数据的方法名称是 saveData uri为： /jaxrs/data/work/{workid} var workid = 'cce8bc22-225a-4f85-8132-7374d546886e'; var action = o2.Actions.get('x_processplatform_assemble_surface'); var data; action.getWorkData( //平台封装好的方法 workid, //uri的参数 function( json ){ //服务调用成功的回调函数, json为服务传回的数据 data = json.data; //为变量data赋值 }.bind(this), false //同步执行 ); data.subject = '新标题'; //修改数据 action.saveData( workid, //uri的参数 data, //保存的数据 function(){ //服务调用成功的回调函数 o2.xDesktop.notice('success', {'y':'top', 'x': 'right'}, '保存成功'); //提示，{'y':'top', 'x': 'right'}指提示框在顶部右边 }.bind(this) ); 样例二:已知流程应用的workid，分页列式出流程实例。 //现已知获取数据的方法名称是 listWorkNext uri为： {'uri': '/jaxrs/work/list/{id}/next/{count}/application/{applicationId}'}, var id = '(0)'; //如果是第一页id是(0)，否则传上一页最后一个流程实例的id var count = 10; var applicationId = 'dde8bc22-225a-4f85-8132-7374d546886e'; o2.Actions.get('x_processplatform_assemble_surface').listWorkNext( id, //listWorkNext服务有3个uri参数，要按先后顺序列出 count, applicationId, function( json ){ //json.data }.bind(this) ); Source o2_core/o2/xScript/ViewEnvironment.js, line 4698 Module Actions 本文档说明如何在前台脚本中使用Actions调用平台的RESTful服务。 通过访问以下地址来查询服务列表：http://server:20030/x_program_center/jest/list.html Syntax //获取Actions this.Actions //或者 o2.Actions Source o2_core/o2/xScript/ViewEnvironment.js, line 4519 Methods static getHost(root) &rarr; {String} 本平台不同的服务根可能对应不同的域名或端口，您可以使用this.Actions.getHost来获取服务跟对应的host。 Syntax var actions = this.Actions.getHost( root ); Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: &quot;x_processplatform_assemble_surface&quot; //流程平台相关服务根 Returns String 对应服务跟对应的host。如：http://127.0.0.1:20020 Source o2_core/o2/xScript/ViewEnvironment.js, line 4531 load(root) &rarr; {Object} 平台预置了Actions对象用于调用平台提供的服务，您可以使用this.Actions.load来获取这些方法。 Syntax var actions = o2.Actions.load( root ); //或 var actions = this.Actions.load( root ); //获取流程平台服务对象。 var processAction = this.Actions.load('x_processplatform_assemble_surface'); 通过this.Actions.load(root)方法得到action对象，就可以访问此服务下的方法了。 访问方法的规则如下： var promise = this.Actions.load( root )[actionName][methodName]( arguements ); promise : Promise对象，可以通过promise.then接收返回数据 promise.then( function(json){ //json为返回的数据 } ) root : 平台服务根名称，如果 x_processplatform_assemble_surface actionName : 服务下的Action分类名称，如 TaskAction methodName : Action分类下的方法名称，如 get arguements : 需调用的RESTful服务的相关参数。这些参数需要按照先后顺序传入。根据实际情况可以省略某些参数。参数序列分别是: uri的参数, data/formData(Post, Put方法), file(附件), success, failure, async。 uri参数：如果有uri有多个参数，需要按先后顺序传入。 data（formData）参数：提交到后台的数据，如果是上传附件，传入formData。POST 和 PUT 方法需要传入，GET方法和DELETE方法省略。 file参数：POST 或者 PUT方法中有效，当需要上传附件时传入,否则可以省略。 success参数：服务执行成功时的回调方法，形如 function(json){ json为后台服务传回的数据 }。 failure 参数：服务执行失败时的回调方法，形如 function(xhr){ xhr XmlHttpRequest对象，服务器请求失败时有值 } 此参数可以省略，如果省略，系统会自动弹出错误信息。 async : 方法同步或者异步执行，默认为true。 处理返回的数据有两种方式，二选一即可： 1、该方法return的结果是Promise对象，可以通过 promise.then() 方法来处理。 Promise说明 2、通过success方法作为第一个参数来处理结果 promise.then( function(json){ //json为返回的数据 } ) //success：arguements中的第一个function对象 function(json){ //json为后台服务传回的数据 } Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: 'x_processplatform_assemble_surface' //流程平台相关服务根 Returns Object 返回action对象，用于后续服务调用 Examples 样例1: 根据x_processplatform_assemble_surface服务获取当前用户的待办列表： 可以通过对应服务的查询页面，http://server:20020/x_processplatform_assemble_surface/jest/index.html 可以看到以下界面： 我们可以找到TaskAction的V2ListPaging服务是列式当前用户待办的服务。 该服务有以下信息： 1、actionName是：TaskAction 2、methodName是：V2ListPaging 3、有两个url参数，分别是 page(分页), size(每页数量) 4、有一系列的body参数 5、该服务方法类型是POST 根据这些信息我们可以组织出下面的方法： var processAction = this.Actions.load('x_processplatform_assemble_surface'); //获取action var method = processAction.TaskAction.V2ListPaging; //获取列式方法 //执行方法1 method( 1, //uri 第1个参数，如果无uri参数，可以省略 20, //uri 第2个参数，如果无uri参数，可以省略，如果还有其他uri参数，可以用逗号, 分隔 { //body 参数，对POST和PUT请求，该参数必须传，可以为空对象 processList : [xxx] //具体参数 }, function(json){ //正确调用的回调 //json.data得到服务返回数据 }, function(xhr){ //可选，错误调用的回调 //xhr为XmlHttpRequest对象，服务器请求失败时有值 var responseJSON = JSON.parse( xhr.responseText ) //xhr.responseText {String}是后台返回的出错信息 //responseJSON见下面的说明 var message = responseJSON.message; //message为错误提示文本 }, true //可选，true为异步调用，false为同步调用，默认为true ); //执行方法2 var promise = method( 1, 20, {processList : [xxx]} ) promise.then( function(json){ //json.data得到服务返回数据 }) 出错信息responseJSON的格式 { 'type': 'error', //类型为错误 'message': '标识为:343434 的 Task 对象不存在.', //提示文本 'date': '2020-12-29 17:02:13', //出错时间 'prompt': 'com.x.base.core.project.exception.ExceptionEntityNotExist' //后台错误类 } 样例2: 已知流程实例的workid，在脚本中获取数据，修改后进行保存。 //查询服务列表找到获取data数据服务为DataAction的getWithWork方法 //查询服务列表找到更新data数据服务为DataAction的updateWithWork方法 var workid = 'cce8bc22-225a-4f85-8132-7374d546886e'; var data; this.Actions.load('x_processplatform_assemble_surface').DataAction.getWithWork( //平台封装好的方法 workid, //uri的参数 function( json ){ //服务调用成功的回调函数, json为服务传回的数据 data = json.data; //为变量data赋值 }.bind(this), false //同步执行 ) data.subject = '新标题'; //修改数据 this.Actions.load('x_processplatform_assemble_surface').DataAction.updateWithWork( workid, //uri的参数 data, //保存的数据 function(){ //服务调用成功的回调函数 o2.xDesktop.notice('success', {'y':'top', 'x': 'right'}, '保存成功'); //提示，{'y':'top', 'x': 'right'}指提示框在顶部右边 }.bind(this) ); Source o2_core/o2/xScript/ViewEnvironment.js, line 4545 get(root) &rarr; {String} 已过时。平台预置了Action的调用方法，您可以使用o2.Actions.get来获取这些方法。RESTful配置文件在{服务器目录}/webServer/o2_core/o2/xAction/services下。 Syntax var actions = o2.Actions.get( root ); actions[ methodName ]( arguements ); or o2.Actions.get( root )[methodName]( arguements ); methodName :（string）方法名称。 arguements : 见load方法的arguements说明 Parameters root String 平台RESTful服务根，具体服务列表参见:http://server:20030/x_program_center/jest/list.html。 如: &quot;x_processplatform_assemble_surface&quot; //流程平台相关服务根 Deprecated Yes Returns String 对应服务根的host。如：http://127.0.0.1:20020 Examples 样例一:已知流程实例的workid，在脚本中获取数据，修改后进行保存。 //现已知获取数据的方法名称是 getWorkData uri为： /jaxrs/data/work/{workid} //已知更新数据的方法名称是 saveData uri为： /jaxrs/data/work/{workid} var workid = 'cce8bc22-225a-4f85-8132-7374d546886e'; var action = o2.Actions.get('x_processplatform_assemble_surface'); var data; action.getWorkData( //平台封装好的方法 workid, //uri的参数 function( json ){ //服务调用成功的回调函数, json为服务传回的数据 data = json.data; //为变量data赋值 }.bind(this), false //同步执行 ); data.subject = '新标题'; //修改数据 action.saveData( workid, //uri的参数 data, //保存的数据 function(){ //服务调用成功的回调函数 o2.xDesktop.notice('success', {'y':'top', 'x': 'right'}, '保存成功'); //提示，{'y':'top', 'x': 'right'}指提示框在顶部右边 }.bind(this) ); 样例二:已知流程应用的workid，分页列式出流程实例。 //现已知获取数据的方法名称是 listWorkNext uri为： {'uri': '/jaxrs/work/list/{id}/next/{count}/application/{applicationId}'}, var id = '(0)'; //如果是第一页id是(0)，否则传上一页最后一个流程实例的id var count = 10; var applicationId = 'dde8bc22-225a-4f85-8132-7374d546886e'; o2.Actions.get('x_processplatform_assemble_surface').listWorkNext( id, //listWorkNext服务有3个uri参数，要按先后顺序列出 count, applicationId, function( json ){ //json.data }.bind(this) ); Source o2_core/o2/xScript/ViewEnvironment.js, line 4698 "},"module-o2m.html":{"id":"module-o2m.html","url":"module-o2m.html","title":"o2m","kind":"Module","body":" Module o2m o2m 是O2OA移动端APP提供的调用原生控件的能力，帮助开发者高效使用拍照、定位等手机系统的能力，同时可以直接使用扫一扫、打开原生应用、选择时间，人员，组织等业务的能力，带给门户接近原生代码的体验 o2m 只有在O2OA移动端APP中才能提供能力 Usable Range 流程表单 门户 Syntax // 可以在移动端 流程表单、门户 上使用 this.o2m Source x_desktop/js/o2m.api.js, line 30 Methods static alert(obj) 原生Alert提示弹出窗 Parameters obj Object 提示窗传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonName': '确定', //确定按钮名称 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.alert({ message: '亲爱的', title: '提示',//可传空 buttonName: '收到', onSuccess : function() {//onSuccess将在点击button之后回调}, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 114 static confirm(obj) 原生confirm提示弹出窗 Parameters obj Object 提示窗传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonLabels': ['确定', '取消'], //按钮名称 Array[String] 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.confirm({ message: '你爱我吗', title: '提示',//可传空 buttonLabels: ['爱', '不爱'], onSuccess : function(buttonIndex) { //onSuccess将在点击button之后回调 //buttonIndex: 0 被点击按钮的索引值，Number类型，从0开始 }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 175 static prompt(obj) 原生prompt提示弹出窗 Parameters obj Object prompt需要传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonLabels': ['继续', '不玩了'], //按钮名称 Array[String] 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.prompt({ message: '再说一遍？', title: '提示',//可传空 buttonLabels: ['继续', '不玩了'], onSuccess : function(result) { //result是一个字符串，格式是json格式，内容如下： //{ // buttonIndex: 0, //被点击按钮的索引值，Number类型，从0开始 // value: '' //输入的值 //} }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 239 static vibrate(obj) 手机震动 Parameters obj Object 震动需要传入对象 { 'duration': 300, //震动时间，android可配置 iOS忽略 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.vibrate({ duration: 300, onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 297 static toast(obj) toast提示 Parameters obj Object toast需要传入对象 { 'message': '这里是提示信息', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.toast({ message: '提示消息内容', onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 346 static actionSheet(obj) 底部弹出菜单 Parameters obj Object actionSheet需要传入对象 { 'title': '谁是最棒哒？',//标题 'cancelButton': '取消', //取消按钮文本 'otherButtons': ['孙悟空','猪八戒','唐僧','沙和尚'], //其他选项按钮名称 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.actionSheet({ title: '谁是最棒哒？', //标题 cancelButton: '取消', //取消按钮文本 otherButtons: ['孙悟空','猪八戒','唐僧','沙和尚'], onSuccess : function(buttonIndex) { //buttonIndex: 0 被点击按钮的索引值，Number，从0开始, 取消按钮为-1 }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 400 static showLoading(obj) 显示Loading浮层，请和hideLoading配合使用 Parameters obj Object showLoading需要传入对象 { text: '使劲加载中..', //loading显示的字符，空表示不显示文字 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.showLoading({ text: '使劲加载中..', //loading显示的字符，空表示不显示文字 onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 451 static hideLoading(obj) 隐藏Loading浮层 Parameters obj Object hideLoading需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.hideLoading({ onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 495 static datePicker(obj) 日期选择器 Parameters obj Object datePicker需要传入对象 { value: '2019-04-17', //默认显示日期 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.datePicker({ value: '2019-04-17', //默认显示日期 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-02-10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 587 static timePicker(obj) 时间选择器 Parameters obj Object timePicker需要传入对象 { value: '14:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.timePicker({ value: '14:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '18:10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 636 static dateTimePicker(obj) 日期时间选择器 Parameters obj Object dateTimePicker需要传入对象 { value: '2019-05-05 14:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.dateTimePicker({ value: '2019-05-05 14:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18 18:10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 687 static chooseOneDay(obj) 月历日期选择器 Parameters obj Object chooseOneDay需要传入对象 { value: '2019-05-05', //默认显示日期 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseOneDay({ value: '2019-05-05', //默认显示日期 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 738 static chooseDateTime(obj) 月历日期时间选择器 Parameters obj Object chooseDateTime需要传入对象 { value: '2019-05-05 11:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseDateTime({ value: '2019-05-05 11:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18 18:45' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 788 static chooseInterval(obj) 月历日期区间选择器 Parameters obj Object chooseInterval需要传入对象 { startDate: '2019-05-05', endDate: '2019-05-06', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseInterval({ value: '2019-05-05 11:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { startDate: '2019-05-05', endDate: '2019-05-06', } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 840 static getPhoneInfo(obj) 获取手机基础信息 Parameters obj Object getPhoneInfo需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.getPhoneInfo({ onSuccess : function(result) { { screenWidth: 1080, // 手机屏幕宽度 screenHeight: 1920, // 手机屏幕高度 brand:'Mi'， // 手机品牌 model:'Note4', // 手机型号 version:'7.0'. // 版本 netInfo:'wifi' , // 网络类型 wifi／4g／3g operatorType :'xx' // 运营商信息 } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 891 static scan(obj) 扫二维码 Parameters obj Object scan需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.scan({ onSuccess : function(result) { { 'text': '扫码内容'} }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 939 static location(obj) 单次定位 Parameters obj Object location需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.location({ onSuccess : function(result) { //这里返回百度坐标系的定位信息 { 'latitude': 39.903578, // 纬度 'longitude': 116.473565, // 经度 'address': '地址描述' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 979 static setTitle(obj) 设置原生页面标题 Parameters obj Object setTitle需要传入对象 { title : '导航标题', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.navigation.setTitle({ title : '导航标题', onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1025 static close() 关闭当前原生页面 Example o2m.util.navigation.close(); Source x_desktop/js/o2m.api.js, line 1065 static goBack() 返回上级原生页面 Example o2m.util.navigation.goBack(); Source x_desktop/js/o2m.api.js, line 1094 static workClose() 关闭当前工作页面，只能在工作表单中可以使用 Example o2m.biz.workClose(); Source x_desktop/js/o2m.api.js, line 1149 static departmentsPicker(obj) 通讯录选部门 Parameters obj Object departmentsPicker需要传入对象 { topList: [],//Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 orgType: '',//String 可选择的组织类别。为空就是全部组织类型都可以 multiple:true, //是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的部门数 pickedDepartments:[],//Array[String] 已经选择的部门distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.departmentsPicker({ topList: [],//不传或者空列表，显示全部组织 orgType: '',//可传空 只显示某种类型的组织 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedDepartments:[],//已选部门 onSuccess : function(result) { //返回结果样例 { departments:[{ 'id':'xxxx', 'name':'部门名称', 'unique':'xxxx', 'distinguishedName':'部门@xxxx@U', 'typeList':['xxxx'], 'shortName':'xxxx', 'level': 0, 'levelName':'xxxx', }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1188 static IdentityPicker(obj) 通讯录选身份 Parameters obj Object IdentityPicker需要传入对象 { topList: [],//Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedIdentities:[],//Array[String] 已经选择的身份distinguishedName列表 duty: [],//Array[String] 可选择的人员职责 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.IdentityPicker({ topList: [],//不传或者空列表，显示全部组织 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedIdentities:[],//已选身份列表 duty: [],//人员职责 onSuccess : function(result) { //返回结果样例 { identities:[{ 'id':'xxxx', 'name':'姓名', 'distinguishedName':'姓名@xxxx@I', 'person':'xxx', 'unique':'xxxx', 'unit':'xxx', 'unitName':'xxxx', 'unitLevel': 0, 'unitLevelName':'xxxx', 'personName':'xxxx', 'personUnique':'xxx', 'personDn':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1264 static GroupPicker(obj) 群组选择 Parameters obj Object GroupPicker需要传入对象 { multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedGroups:[],//Array[String] 已经选择的群组distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.GroupPicker({ multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedGroups:[],//已选群组列表 onSuccess : function(result) { //返回结果样例 { groups:[{ 'id':'xxxx', 'name':'群组名称', 'distinguishedName':'群组名称@xxxx@G' 'unique':'xxxx', }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1341 static PersonPicker(obj) 人员选择 Parameters obj Object PersonPicker需要传入对象 { multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedUsers:[],//Array[String] 已经选择的人员distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.PersonPicker({ multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedUsers:[],//已选人员列表 onSuccess : function(result) { //返回结果样例 { users:[{ 'id':'xxx', 'name':'姓名', 'unique':'xxx', 'distinguishedName':'姓名@xxxx@P' 'genderType':'xxx', 'employee':'xxx', 'mail':'xxx', 'weixin':'xxx', 'qq':'xxx', 'mobile':'xxx', 'officePhone':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1405 static ComplexPicker(obj) 复合选择器，可配置选择多种数据 Parameters obj Object ComplexPicker需要传入对象 { pickMode: ['departmentPicker', 'identityPicker'], //Array[String] 选择器类型，可传入值：departmentPicker、identityPicker、groupPicker、personPicker topList：Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 duty: Array[String] 可选择的人员职责 orgType：String 可选择的组织类别。为空就是全部组织类型都可以 multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedDepartments：Array[String] 已经选择的部门distinguishedName列表 pickedIdentities：Array[String] 已经选择的身份distinguishedName列表 pickedGroups： Array[String] 已经选择的群组distinguishedName列表 pickedUsers:[],//Array[String] 已经选择的人员distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.ComplexPicker({ pickMode: ['departmentPicker', 'identityPicker'], //选择器类型 topList: [],//不传或者空列表，显示全部组织 orgType: '',//可传空 只显示某种类型的组织 duty: [],//人员职责 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedDepartments:[],//已选部门 pickedIdentities:[],//已选身份列表 pickedGroups:[],//已选群组列表 pickedUsers:[],//已选人员列表 onSuccess : function(result) { //返回结果样例 { departments:[{ 'id':'xxxx', 'name':'部门名称', 'unique':'xxxx', 'distinguishedName':'部门@xxxx@U', 'typeList':['xxxx'], 'shortName':'xxxx', 'level': 0, 'levelName':'xxxx', }], identities:[{ 'id':'xxxx', 'name':'姓名', 'distinguishedName':'姓名@xxxx@I', 'person':'xxx', 'unique':'xxxx', 'unit':'xxx', 'unitName':'xxxx', 'unitLevel': 0, 'unitLevelName':'xxxx', 'personName':'xxxx', 'personUnique':'xxx', 'personDn':'xxx' }], groups:[{ 'id':'xxxx', 'name':'群组名称', 'distinguishedName':'群组名称@xxxx@G' 'unique':'xxxx', }], users:[{ 'id':'xxx', 'name':'姓名', 'unique':'xxx', 'distinguishedName':'姓名@xxxx@P' 'genderType':'xxx', 'employee':'xxx', 'mail':'xxx', 'weixin':'xxx', 'qq':'xxx', 'mobile':'xxx', 'officePhone':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1490 Module o2m o2m 是O2OA移动端APP提供的调用原生控件的能力，帮助开发者高效使用拍照、定位等手机系统的能力，同时可以直接使用扫一扫、打开原生应用、选择时间，人员，组织等业务的能力，带给门户接近原生代码的体验 o2m 只有在O2OA移动端APP中才能提供能力 Usable Range 流程表单 门户 Syntax // 可以在移动端 流程表单、门户 上使用 this.o2m Source x_desktop/js/o2m.api.js, line 30 Methods static alert(obj) 原生Alert提示弹出窗 Parameters obj Object 提示窗传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonName': '确定', //确定按钮名称 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.alert({ message: '亲爱的', title: '提示',//可传空 buttonName: '收到', onSuccess : function() {//onSuccess将在点击button之后回调}, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 114 static confirm(obj) 原生confirm提示弹出窗 Parameters obj Object 提示窗传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonLabels': ['确定', '取消'], //按钮名称 Array[String] 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.confirm({ message: '你爱我吗', title: '提示',//可传空 buttonLabels: ['爱', '不爱'], onSuccess : function(buttonIndex) { //onSuccess将在点击button之后回调 //buttonIndex: 0 被点击按钮的索引值，Number类型，从0开始 }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 175 static prompt(obj) 原生prompt提示弹出窗 Parameters obj Object prompt需要传入对象 { 'title': '提示', //消息标题，可为空 'message': '这里是消息内容', //消息内容 'buttonLabels': ['继续', '不玩了'], //按钮名称 Array[String] 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.prompt({ message: '再说一遍？', title: '提示',//可传空 buttonLabels: ['继续', '不玩了'], onSuccess : function(result) { //result是一个字符串，格式是json格式，内容如下： //{ // buttonIndex: 0, //被点击按钮的索引值，Number类型，从0开始 // value: '' //输入的值 //} }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 239 static vibrate(obj) 手机震动 Parameters obj Object 震动需要传入对象 { 'duration': 300, //震动时间，android可配置 iOS忽略 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.vibrate({ duration: 300, onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 297 static toast(obj) toast提示 Parameters obj Object toast需要传入对象 { 'message': '这里是提示信息', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.toast({ message: '提示消息内容', onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 346 static actionSheet(obj) 底部弹出菜单 Parameters obj Object actionSheet需要传入对象 { 'title': '谁是最棒哒？',//标题 'cancelButton': '取消', //取消按钮文本 'otherButtons': ['孙悟空','猪八戒','唐僧','沙和尚'], //其他选项按钮名称 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.actionSheet({ title: '谁是最棒哒？', //标题 cancelButton: '取消', //取消按钮文本 otherButtons: ['孙悟空','猪八戒','唐僧','沙和尚'], onSuccess : function(buttonIndex) { //buttonIndex: 0 被点击按钮的索引值，Number，从0开始, 取消按钮为-1 }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 400 static showLoading(obj) 显示Loading浮层，请和hideLoading配合使用 Parameters obj Object showLoading需要传入对象 { text: '使劲加载中..', //loading显示的字符，空表示不显示文字 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.notification.showLoading({ text: '使劲加载中..', //loading显示的字符，空表示不显示文字 onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 451 static hideLoading(obj) 隐藏Loading浮层 Parameters obj Object hideLoading需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.notification.hideLoading({ onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 495 static datePicker(obj) 日期选择器 Parameters obj Object datePicker需要传入对象 { value: '2019-04-17', //默认显示日期 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.datePicker({ value: '2019-04-17', //默认显示日期 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-02-10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 587 static timePicker(obj) 时间选择器 Parameters obj Object timePicker需要传入对象 { value: '14:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.timePicker({ value: '14:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '18:10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 636 static dateTimePicker(obj) 日期时间选择器 Parameters obj Object dateTimePicker需要传入对象 { value: '2019-05-05 14:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.dateTimePicker({ value: '2019-05-05 14:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18 18:10' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 687 static chooseOneDay(obj) 月历日期选择器 Parameters obj Object chooseOneDay需要传入对象 { value: '2019-05-05', //默认显示日期 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseOneDay({ value: '2019-05-05', //默认显示日期 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 738 static chooseDateTime(obj) 月历日期时间选择器 Parameters obj Object chooseDateTime需要传入对象 { value: '2019-05-05 11:00', //默认显示时间 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseDateTime({ value: '2019-05-05 11:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { value: '2019-03-18 18:45' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 788 static chooseInterval(obj) 月历日期区间选择器 Parameters obj Object chooseInterval需要传入对象 { startDate: '2019-05-05', endDate: '2019-05-06', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.util.date.chooseInterval({ value: '2019-05-05 11:00', //默认显示时间 onSuccess : function(result) { //onSuccess将在点击完成之后回调 { startDate: '2019-05-05', endDate: '2019-05-06', } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 840 static getPhoneInfo(obj) 获取手机基础信息 Parameters obj Object getPhoneInfo需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.getPhoneInfo({ onSuccess : function(result) { { screenWidth: 1080, // 手机屏幕宽度 screenHeight: 1920, // 手机屏幕高度 brand:'Mi'， // 手机品牌 model:'Note4', // 手机型号 version:'7.0'. // 版本 netInfo:'wifi' , // 网络类型 wifi／4g／3g operatorType :'xx' // 运营商信息 } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 891 static scan(obj) 扫二维码 Parameters obj Object scan需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.scan({ onSuccess : function(result) { { 'text': '扫码内容'} }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 939 static location(obj) 单次定位 Parameters obj Object location需要传入对象 { 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.device.location({ onSuccess : function(result) { //这里返回百度坐标系的定位信息 { 'latitude': 39.903578, // 纬度 'longitude': 116.473565, // 经度 'address': '地址描述' } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 979 static setTitle(obj) 设置原生页面标题 Parameters obj Object setTitle需要传入对象 { title : '导航标题', 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example o2m.util.navigation.setTitle({ title : '导航标题', onSuccess : function() { }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1025 static close() 关闭当前原生页面 Example o2m.util.navigation.close(); Source x_desktop/js/o2m.api.js, line 1065 static goBack() 返回上级原生页面 Example o2m.util.navigation.goBack(); Source x_desktop/js/o2m.api.js, line 1094 static workClose() 关闭当前工作页面，只能在工作表单中可以使用 Example o2m.biz.workClose(); Source x_desktop/js/o2m.api.js, line 1149 static departmentsPicker(obj) 通讯录选部门 Parameters obj Object departmentsPicker需要传入对象 { topList: [],//Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 orgType: '',//String 可选择的组织类别。为空就是全部组织类型都可以 multiple:true, //是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的部门数 pickedDepartments:[],//Array[String] 已经选择的部门distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.departmentsPicker({ topList: [],//不传或者空列表，显示全部组织 orgType: '',//可传空 只显示某种类型的组织 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedDepartments:[],//已选部门 onSuccess : function(result) { //返回结果样例 { departments:[{ 'id':'xxxx', 'name':'部门名称', 'unique':'xxxx', 'distinguishedName':'部门@xxxx@U', 'typeList':['xxxx'], 'shortName':'xxxx', 'level': 0, 'levelName':'xxxx', }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1188 static IdentityPicker(obj) 通讯录选身份 Parameters obj Object IdentityPicker需要传入对象 { topList: [],//Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedIdentities:[],//Array[String] 已经选择的身份distinguishedName列表 duty: [],//Array[String] 可选择的人员职责 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.IdentityPicker({ topList: [],//不传或者空列表，显示全部组织 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedIdentities:[],//已选身份列表 duty: [],//人员职责 onSuccess : function(result) { //返回结果样例 { identities:[{ 'id':'xxxx', 'name':'姓名', 'distinguishedName':'姓名@xxxx@I', 'person':'xxx', 'unique':'xxxx', 'unit':'xxx', 'unitName':'xxxx', 'unitLevel': 0, 'unitLevelName':'xxxx', 'personName':'xxxx', 'personUnique':'xxx', 'personDn':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1264 static GroupPicker(obj) 群组选择 Parameters obj Object GroupPicker需要传入对象 { multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedGroups:[],//Array[String] 已经选择的群组distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.GroupPicker({ multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedGroups:[],//已选群组列表 onSuccess : function(result) { //返回结果样例 { groups:[{ 'id':'xxxx', 'name':'群组名称', 'distinguishedName':'群组名称@xxxx@G' 'unique':'xxxx', }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1341 static PersonPicker(obj) 人员选择 Parameters obj Object PersonPicker需要传入对象 { multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedUsers:[],//Array[String] 已经选择的人员distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.PersonPicker({ multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedUsers:[],//已选人员列表 onSuccess : function(result) { //返回结果样例 { users:[{ 'id':'xxx', 'name':'姓名', 'unique':'xxx', 'distinguishedName':'姓名@xxxx@P' 'genderType':'xxx', 'employee':'xxx', 'mail':'xxx', 'weixin':'xxx', 'qq':'xxx', 'mobile':'xxx', 'officePhone':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1405 static ComplexPicker(obj) 复合选择器，可配置选择多种数据 Parameters obj Object ComplexPicker需要传入对象 { pickMode: ['departmentPicker', 'identityPicker'], //Array[String] 选择器类型，可传入值：departmentPicker、identityPicker、groupPicker、personPicker topList：Array[String] 可选的顶级组织列表，不传或列表为空的时候，显示全部组织 duty: Array[String] 可选择的人员职责 orgType：String 可选择的组织类别。为空就是全部组织类型都可以 multiple:true, //Boolean 是否多选 maxNumber: 0, //Int 当multiple为true的时候，最多可选择的身份数 pickedDepartments：Array[String] 已经选择的部门distinguishedName列表 pickedIdentities：Array[String] 已经选择的身份distinguishedName列表 pickedGroups： Array[String] 已经选择的群组distinguishedName列表 pickedUsers:[],//Array[String] 已经选择的人员distinguishedName列表 'onSuccess': function, //成功回调 'onFail': function, //失败回调 } Example 样例效果： o2m.biz.contact.ComplexPicker({ pickMode: ['departmentPicker', 'identityPicker'], //选择器类型 topList: [],//不传或者空列表，显示全部组织 orgType: '',//可传空 只显示某种类型的组织 duty: [],//人员职责 multiple:true, //是否多选 maxNumber: 0, //最大选择数量 pickedDepartments:[],//已选部门 pickedIdentities:[],//已选身份列表 pickedGroups:[],//已选群组列表 pickedUsers:[],//已选人员列表 onSuccess : function(result) { //返回结果样例 { departments:[{ 'id':'xxxx', 'name':'部门名称', 'unique':'xxxx', 'distinguishedName':'部门@xxxx@U', 'typeList':['xxxx'], 'shortName':'xxxx', 'level': 0, 'levelName':'xxxx', }], identities:[{ 'id':'xxxx', 'name':'姓名', 'distinguishedName':'姓名@xxxx@I', 'person':'xxx', 'unique':'xxxx', 'unit':'xxx', 'unitName':'xxxx', 'unitLevel': 0, 'unitLevelName':'xxxx', 'personName':'xxxx', 'personUnique':'xxx', 'personDn':'xxx' }], groups:[{ 'id':'xxxx', 'name':'群组名称', 'distinguishedName':'群组名称@xxxx@G' 'unique':'xxxx', }], users:[{ 'id':'xxx', 'name':'姓名', 'unique':'xxx', 'distinguishedName':'姓名@xxxx@P' 'genderType':'xxx', 'employee':'xxx', 'mail':'xxx', 'weixin':'xxx', 'qq':'xxx', 'mobile':'xxx', 'officePhone':'xxx' }] } }, onFail : function(err) {} }); Source x_desktop/js/o2m.api.js, line 1490 "},"MWF.xApplication.process.Xform.$Input.html":{"id":"MWF.xApplication.process.Xform.$Input.html","url":"MWF.xApplication.process.Xform.$Input.html","title":"$Input","kind":"Class","body":" Class $Input $Input --> Extends MWF.xApplication.process.Xform.$Module $Input 组件类，此类为所有输入组件的父类 Source x_component_process_Xform/$Input.js, line 8 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class $Input $Input --> Extends MWF.xApplication.process.Xform.$Module $Input 组件类，此类为所有输入组件的父类 Source x_component_process_Xform/$Input.js, line 8 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.$Module.html":{"id":"MWF.xApplication.process.Xform.$Module.html","url":"MWF.xApplication.process.Xform.$Module.html","title":"$Module","kind":"Class","body":" Class $Module $Module --> $Module 组件类，此类为所有组件的父类。 Source x_component_process_Xform/$Module.js, line 7 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 See 组件事件说明 load 组件加载时触发. See 组件事件说明 postLoad 组件加载后触发. See 组件事件说明 Class $Module $Module --> $Module 组件类，此类为所有组件的父类。 Source x_component_process_Xform/$Module.js, line 7 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 See 组件事件说明 load 组件加载时触发. See 组件事件说明 postLoad 组件加载后触发. See 组件事件说明 "},"MWF.xApplication.process.Xform.Actionbar.html":{"id":"MWF.xApplication.process.Xform.Actionbar.html","url":"MWF.xApplication.process.Xform.Actionbar.html","title":"Actionbar","kind":"Class","body":" Class Actionbar Actionbar --> Extends MWF.xApplication.process.Xform.$Module Actionbar 操作条组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var actionbar = this.form.get('name'); //获取操作条 //方法2 var actionbar = this.target; //在操作条和操作本身的事件脚本中获取 Source x_component_process_Xform/Actionbar.js, line 17 Members toolbarWidgeto2.widget.Toolbar Toolbar组件，平台使用该组件生成操作条。 Type o2.widget.Toolbar Example //可以在脚本中获取该组件 var toolbarWidget = this.form.get('fieldId').toolbarWidget; //获取组件对象 Source x_component_process_Xform/Actionbar.js, line 71 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载操作条. Example this.form.get('name').reload(); //显示操作条 Source x_component_process_Xform/Actionbar.js, line 49 getItem(id) &rarr; {o2.widget.ToolbarButton} Summary 根据操作id获取操作，该方法在操作条的afterLoad事件中有效，操作的操作脚本有效。 Parameters id String 必选，操作id. Returns o2.widget.ToolbarButton 操作 Example var actionbar = this.form.get('name'); //获取操作条 var item = actionbar.getItem( 'action_delete' ); //获取删除操作 item.node.hide(); //隐藏删除操作的节点 item.node.click(); //触发操作的click事件 Source x_component_process_Xform/Actionbar.js, line 264 getAllItem() &rarr; {Array} Summary 获取所有操作，该方法在操作条的afterLoad事件中有效，操作的操作脚本有效。 Returns Array 操作数组 Example var actionbar = this.form.get('name'); //获取操作条 var itemList = actionbar.getAllItem(); //获取操作数组 itemList[1].node.hide(); //隐藏第一个操作 Source x_component_process_Xform/Actionbar.js, line 277 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Overrides MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发。 Overrides MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后事件.由于加载过程中有异步处理，这个时候操作条有可能还未生成。 Overrides MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 afterLoad 组件加载后事件。这个时候操作条已生成 See 组件事件说明 Class Actionbar Actionbar --> Extends MWF.xApplication.process.Xform.$Module Actionbar 操作条组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var actionbar = this.form.get('name'); //获取操作条 //方法2 var actionbar = this.target; //在操作条和操作本身的事件脚本中获取 Source x_component_process_Xform/Actionbar.js, line 17 Members toolbarWidgeto2.widget.Toolbar Toolbar组件，平台使用该组件生成操作条。 Type o2.widget.Toolbar Example //可以在脚本中获取该组件 var toolbarWidget = this.form.get('fieldId').toolbarWidget; //获取组件对象 Source x_component_process_Xform/Actionbar.js, line 71 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载操作条. Example this.form.get('name').reload(); //显示操作条 Source x_component_process_Xform/Actionbar.js, line 49 getItem(id) &rarr; {o2.widget.ToolbarButton} Summary 根据操作id获取操作，该方法在操作条的afterLoad事件中有效，操作的操作脚本有效。 Parameters id String 必选，操作id. Returns o2.widget.ToolbarButton 操作 Example var actionbar = this.form.get('name'); //获取操作条 var item = actionbar.getItem( 'action_delete' ); //获取删除操作 item.node.hide(); //隐藏删除操作的节点 item.node.click(); //触发操作的click事件 Source x_component_process_Xform/Actionbar.js, line 264 getAllItem() &rarr; {Array} Summary 获取所有操作，该方法在操作条的afterLoad事件中有效，操作的操作脚本有效。 Returns Array 操作数组 Example var actionbar = this.form.get('name'); //获取操作条 var itemList = actionbar.getAllItem(); //获取操作数组 itemList[1].node.hide(); //隐藏第一个操作 Source x_component_process_Xform/Actionbar.js, line 277 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Overrides MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发。 Overrides MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后事件.由于加载过程中有异步处理，这个时候操作条有可能还未生成。 Overrides MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 afterLoad 组件加载后事件。这个时候操作条已生成 See 组件事件说明 "},"MWF.xApplication.process.Xform.Address.html":{"id":"MWF.xApplication.process.Xform.Address.html","url":"MWF.xApplication.process.Xform.Address.html","title":"Address","kind":"Class","body":" Class Address Address --> Extends MWF.xApplication.process.Xform.Combox Address 地址选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var address = this.form.get('name'); //获取组件 //方法2 var address = this.target; //组件本身的事件和脚本中获取 Source x_component_process_Xform/Address.js, line 15 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.Combox#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.Combox#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.Combox#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getOptions() &rarr; {Array} Summary 获取选择项数组. Inherited From MWF.xApplication.process.Xform.Combox#getOptions Returns Array 选择项数组，如果配置为脚本返回计算结果. Example var array = this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Combox.js, line 113 setData(value) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters value String . Inherited From MWF.xApplication.process.Xform.Combox#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Combox.js, line 173 resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Inherited From MWF.xApplication.process.Xform.Combox#resetOption Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Combox.js, line 221 addOption(text, value) Summary 添加下拉选项. Parameters text String 下拉选项文本 value String 下拉选项值 Inherited From MWF.xApplication.process.Xform.Combox#addOption Example this.form.get('fieldId').addOption('秘密','level1'); Source x_component_process_Xform/Combox.js, line 234 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Inherited From MWF.xApplication.process.Xform.Combox#getTextData Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Combox.js, line 262 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events commitInput 手工输入完成后触发。 Inherited From MWF.xApplication.process.Xform.Combox#event:commitInput See 组件事件说明 change 值改变时触发。 Inherited From MWF.xApplication.process.Xform.Combox#event:change See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Address Address --> Extends MWF.xApplication.process.Xform.Combox Address 地址选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var address = this.form.get('name'); //获取组件 //方法2 var address = this.target; //组件本身的事件和脚本中获取 Source x_component_process_Xform/Address.js, line 15 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.Combox#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.Combox#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.Combox#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getOptions() &rarr; {Array} Summary 获取选择项数组. Inherited From MWF.xApplication.process.Xform.Combox#getOptions Returns Array 选择项数组，如果配置为脚本返回计算结果. Example var array = this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Combox.js, line 113 setData(value) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters value String . Inherited From MWF.xApplication.process.Xform.Combox#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Combox.js, line 173 resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Inherited From MWF.xApplication.process.Xform.Combox#resetOption Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Combox.js, line 221 addOption(text, value) Summary 添加下拉选项. Parameters text String 下拉选项文本 value String 下拉选项值 Inherited From MWF.xApplication.process.Xform.Combox#addOption Example this.form.get('fieldId').addOption('秘密','level1'); Source x_component_process_Xform/Combox.js, line 234 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Inherited From MWF.xApplication.process.Xform.Combox#getTextData Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Combox.js, line 262 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events commitInput 手工输入完成后触发。 Inherited From MWF.xApplication.process.Xform.Combox#event:commitInput See 组件事件说明 change 值改变时触发。 Inherited From MWF.xApplication.process.Xform.Combox#event:change See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Attachment.html":{"id":"MWF.xApplication.process.Xform.Attachment.html","url":"MWF.xApplication.process.Xform.Attachment.html","title":"Attachment","kind":"Class","body":" Class Attachment Attachment --> Extends MWF.xApplication.process.Xform.$Module Attachment 附件组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Attachment.js, line 1089 Members attachmentControllerMWF.xApplication.process.Xform.AttachmentController 附件容器. Type MWF.xApplication.process.Xform.AttachmentController Example var attachmentController = this.form.get('fieldId').attachmentController; //获取附件容器 var attachmentList = attachmentController.attachments; //获取所有的附件 var attachmentData = attachmentList[0].data; //获取第一个附件的数据 Source x_component_process_Xform/Attachment.js, line 1215 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getData() &rarr; {StringArray|Null} Summary 获取当前组件所有附件的标题.如果没有附件返回null Returns StringArray Null 附件标题. Example var getAttachmentNames = this.form.get('name').getData(); Source x_component_process_Xform/Attachment.js, line 1273 setData(data) Summary 为组件重新设置附件，该附件必须已经上传。 Parameters data Array . [{ 'id': '56c4e86f-a4c8-4cc2-a150-1a0d2c5febcb', //附件ID 'name': '133203a2-92e6-4653-9954-161b72ddb7f9.png', //附件名称 'extension': 'png', //附件扩展名 'length': 43864, //附件大小 'person': 'xx@huqi@P', //附件上传人 'lastUpdateTime': '2018-09-27 15:50:34', //最后的修改时间 'lastUpdatePerson': 'xx@huqi@P', //最后的修改人 'activity': 'e31ad938-c495-45a6-8d77-b8a9b61a165b', //附件上传的活动ID 'activityName': '申请人', //附件上传的活动名称 'activityType': 'manual', //附件上传的活动类型 'site': '$mediaOpinion', //附件存储位置（一般用于区分附件在哪个表单元素中显示） 'type': 'image/png', //附件类型（contentType） 'control': {} }] Source x_component_process_Xform/Attachment.js, line 1786 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Attachment.js, line 1934 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 附件组件（this.target）加载前触发。 Overrides MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 queryLoadController 附件容器（this.target.attachmentController）初始化之前触发，可以通过this.event获取附件容器的选项。 See 组件事件说明 loadController 附件容器（this.target.attachmentController）初始化之后，加载之前触发。 See 组件事件说明 postLoadController 附件容器（this.target.attachmentController）加载之后触发，但这时还未加载具体的附件。 See 组件事件说明 load 附件组件（this.target）加载完成后触发。这时候附件容器和每个附件都已加载完成。 Overrides MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 upload 附件上传后触发。本事件中可以通过this.event获取上传附件的数据 See 组件事件说明 delete 删除附件前触发。本事件中可以通过this.event获取被删附件的数据 See 组件事件说明 afterDelete 删除附件后触发。本事件中可以通过this.event获取被删附件的数据 See 组件事件说明 change 附件有变化的时候会被触发，包括上传、删除、排序 See 组件事件说明 download 下载附件后触发。本事件中可以通过this.event获取被下载附件对象 See 组件事件说明 open 打开附件后触发。本事件中可以通过this.event获取被打开附件对象 See 组件事件说明 Class Attachment Attachment --> Extends MWF.xApplication.process.Xform.$Module Attachment 附件组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Attachment.js, line 1089 Members attachmentControllerMWF.xApplication.process.Xform.AttachmentController 附件容器. Type MWF.xApplication.process.Xform.AttachmentController Example var attachmentController = this.form.get('fieldId').attachmentController; //获取附件容器 var attachmentList = attachmentController.attachments; //获取所有的附件 var attachmentData = attachmentList[0].data; //获取第一个附件的数据 Source x_component_process_Xform/Attachment.js, line 1215 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getData() &rarr; {StringArray|Null} Summary 获取当前组件所有附件的标题.如果没有附件返回null Returns StringArray Null 附件标题. Example var getAttachmentNames = this.form.get('name').getData(); Source x_component_process_Xform/Attachment.js, line 1273 setData(data) Summary 为组件重新设置附件，该附件必须已经上传。 Parameters data Array . [{ 'id': '56c4e86f-a4c8-4cc2-a150-1a0d2c5febcb', //附件ID 'name': '133203a2-92e6-4653-9954-161b72ddb7f9.png', //附件名称 'extension': 'png', //附件扩展名 'length': 43864, //附件大小 'person': 'xx@huqi@P', //附件上传人 'lastUpdateTime': '2018-09-27 15:50:34', //最后的修改时间 'lastUpdatePerson': 'xx@huqi@P', //最后的修改人 'activity': 'e31ad938-c495-45a6-8d77-b8a9b61a165b', //附件上传的活动ID 'activityName': '申请人', //附件上传的活动名称 'activityType': 'manual', //附件上传的活动类型 'site': '$mediaOpinion', //附件存储位置（一般用于区分附件在哪个表单元素中显示） 'type': 'image/png', //附件类型（contentType） 'control': {} }] Source x_component_process_Xform/Attachment.js, line 1786 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Attachment.js, line 1934 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 附件组件（this.target）加载前触发。 Overrides MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 queryLoadController 附件容器（this.target.attachmentController）初始化之前触发，可以通过this.event获取附件容器的选项。 See 组件事件说明 loadController 附件容器（this.target.attachmentController）初始化之后，加载之前触发。 See 组件事件说明 postLoadController 附件容器（this.target.attachmentController）加载之后触发，但这时还未加载具体的附件。 See 组件事件说明 load 附件组件（this.target）加载完成后触发。这时候附件容器和每个附件都已加载完成。 Overrides MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 upload 附件上传后触发。本事件中可以通过this.event获取上传附件的数据 See 组件事件说明 delete 删除附件前触发。本事件中可以通过this.event获取被删附件的数据 See 组件事件说明 afterDelete 删除附件后触发。本事件中可以通过this.event获取被删附件的数据 See 组件事件说明 change 附件有变化的时候会被触发，包括上传、删除、排序 See 组件事件说明 download 下载附件后触发。本事件中可以通过this.event获取被下载附件对象 See 组件事件说明 open 打开附件后触发。本事件中可以通过this.event获取被打开附件对象 See 组件事件说明 "},"MWF.xApplication.process.Xform.Button.html":{"id":"MWF.xApplication.process.Xform.Button.html","url":"MWF.xApplication.process.Xform.Button.html","title":"Button","kind":"Class","body":" Class Button Button --> Extends MWF.xApplication.process.Xform.$Module Button 按钮组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var button = this.form.get('name'); //获取组件 //方法2 var button = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Button.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Button Button --> Extends MWF.xApplication.process.Xform.$Module Button 按钮组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var button = this.form.get('name'); //获取组件 //方法2 var button = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Button.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Calendar.html":{"id":"MWF.xApplication.process.Xform.Calendar.html","url":"MWF.xApplication.process.Xform.Calendar.html","title":"Calendar","kind":"Class","body":" Class Calendar Calendar --> Extends MWF.xApplication.process.Xform.$Input Calendar 日期组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Calendar.js, line 14 Members calendarMWF.widget.Calendar 日期弹出选择界面，只读情况下无此成员. Type MWF.widget.Calendar Example var calendar = this.form.get('fieldId').calendar; //获取组件 if(calendar)calendar.show(); //弹出选择组件 Source x_component_process_Xform/Calendar.js, line 203 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events complete 日期选择完成时触发. See 组件事件说明 clear 日期选择器上点清空时触发. See 组件事件说明 change 值改变时触发. See 组件事件说明 show 显示日期选择器时触发. See 组件事件说明 hide 隐藏日期选择器时触发. See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Calendar Calendar --> Extends MWF.xApplication.process.Xform.$Input Calendar 日期组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Calendar.js, line 14 Members calendarMWF.widget.Calendar 日期弹出选择界面，只读情况下无此成员. Type MWF.widget.Calendar Example var calendar = this.form.get('fieldId').calendar; //获取组件 if(calendar)calendar.show(); //弹出选择组件 Source x_component_process_Xform/Calendar.js, line 203 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events complete 日期选择完成时触发. See 组件事件说明 clear 日期选择器上点清空时触发. See 组件事件说明 change 值改变时触发. See 组件事件说明 show 显示日期选择器时触发. See 组件事件说明 hide 隐藏日期选择器时触发. See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Checkbox.html":{"id":"MWF.xApplication.process.Xform.Checkbox.html","url":"MWF.xApplication.process.Xform.Checkbox.html","title":"Checkbox","kind":"Class","body":" Class Checkbox Checkbox --> Extends MWF.xApplication.process.Xform.$Input Calendar 多选按钮组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Checkbox.js, line 15 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Checkbox.js, line 107 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Checkbox.js, line 120 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Checkbox.js, line 137 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Checkbox.js, line 278 setData(data) Summary 为字段赋值，并且使值对应的选项选中。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/Checkbox.js, line 347 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Checkbox Checkbox --> Extends MWF.xApplication.process.Xform.$Input Calendar 多选按钮组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Checkbox.js, line 15 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Checkbox.js, line 107 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Checkbox.js, line 120 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Checkbox.js, line 137 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Checkbox.js, line 278 setData(data) Summary 为字段赋值，并且使值对应的选项选中。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/Checkbox.js, line 347 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Combox.html":{"id":"MWF.xApplication.process.Xform.Combox.html","url":"MWF.xApplication.process.Xform.Combox.html","title":"Combox","kind":"Class","body":" Class Combox Combox --> Extends MWF.xApplication.process.Xform.$Input Combox 组合框组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Combox.js, line 14 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Input#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Input#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getOptions() &rarr; {Array} Summary 获取选择项数组. Returns Array 选择项数组，如果配置为脚本返回计算结果. Example var array = this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Combox.js, line 113 setData(value) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters value String . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Combox.js, line 173 resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Combox.js, line 221 addOption(text, value) Summary 添加下拉选项. Parameters text String 下拉选项文本 value String 下拉选项值 Example this.form.get('fieldId').addOption('秘密','level1'); Source x_component_process_Xform/Combox.js, line 234 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Combox.js, line 262 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events commitInput 手工输入完成后触发。 See 组件事件说明 change 值改变时触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Combox Combox --> Extends MWF.xApplication.process.Xform.$Input Combox 组合框组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 Source x_component_process_Xform/Combox.js, line 14 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Input#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Input#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getOptions() &rarr; {Array} Summary 获取选择项数组. Returns Array 选择项数组，如果配置为脚本返回计算结果. Example var array = this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Combox.js, line 113 setData(value) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters value String . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Combox.js, line 173 resetOption() Summary 重新计算下拉选项，该功能通常用在下拉选项为动态计算的情况. Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Combox.js, line 221 addOption(text, value) Summary 添加下拉选项. Parameters text String 下拉选项文本 value String 下拉选项值 Example this.form.get('fieldId').addOption('秘密','level1'); Source x_component_process_Xform/Combox.js, line 234 getTextData() &rarr; {Object} Summary 获取选中的值和文本. Returns Object 返回选中项值和文本，格式为 { 'value' : value, 'text' : text }. Example var array = this.form.get('fieldId').getTextData(); Source x_component_process_Xform/Combox.js, line 262 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events commitInput 手工输入完成后触发。 See 组件事件说明 change 值改变时触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Common.html":{"id":"MWF.xApplication.process.Xform.Common.html","url":"MWF.xApplication.process.Xform.Common.html","title":"Common","kind":"Class","body":" Class Common Common --> Extends MWF.xApplication.process.Xform.$Module Common 通用组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var el = this.form.get('name'); //获取组件 //方法2 var el = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Common.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Common Common --> Extends MWF.xApplication.process.Xform.$Module Common 通用组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var el = this.form.get('name'); //获取组件 //方法2 var el = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Common.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.DatagridMobile.html":{"id":"MWF.xApplication.process.Xform.DatagridMobile.html","url":"MWF.xApplication.process.Xform.DatagridMobile.html","title":"DatagridMobile","kind":"Class","body":" Class DatagridMobile DatagridMobile --> Extends MWF.xApplication.process.Xform.$Module DatagridMobile 数据网格组件（移动端）。从v6.2开始建议用数据表格(Datatable)代替。 Usable Range Process CMS Deprecated Yes Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatagridMobile.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据网格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatagridMobile.js, line 1409 setData(data) Summary 为数据网格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatagridData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridMobile.js, line 1441 getTotal() &rarr; {Object} Summary 获取总计数据. Returns Object 总计数据 Example var totalObject = this.form.get('fieldId').getTotal(); Source x_component_process_Xform/DatagridMobile.js, line 1572 isEmpty() &rarr; {Boolean} Summary 判断数据网格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatagridMobile.js, line 1584 getData() &rarr; {DatagridData} Summary 获取数据网格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatagridData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridMobile.js, line 1629 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatagridMobile.js, line 1795 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events completeLineEdit 当前条目编辑完成时触发。通过this.event可以获取对应的table。 See 组件事件说明 addLine 添加条目时触发。通过this.event可以获取对应的table。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的table。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 editLine 编辑条目时触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class DatagridMobile DatagridMobile --> Extends MWF.xApplication.process.Xform.$Module DatagridMobile 数据网格组件（移动端）。从v6.2开始建议用数据表格(Datatable)代替。 Usable Range Process CMS Deprecated Yes Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatagridMobile.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据网格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatagridMobile.js, line 1409 setData(data) Summary 为数据网格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatagridData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridMobile.js, line 1441 getTotal() &rarr; {Object} Summary 获取总计数据. Returns Object 总计数据 Example var totalObject = this.form.get('fieldId').getTotal(); Source x_component_process_Xform/DatagridMobile.js, line 1572 isEmpty() &rarr; {Boolean} Summary 判断数据网格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatagridMobile.js, line 1584 getData() &rarr; {DatagridData} Summary 获取数据网格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatagridData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridMobile.js, line 1629 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatagridMobile.js, line 1795 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events completeLineEdit 当前条目编辑完成时触发。通过this.event可以获取对应的table。 See 组件事件说明 addLine 添加条目时触发。通过this.event可以获取对应的table。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的table。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 editLine 编辑条目时触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.DatagridPC.html":{"id":"MWF.xApplication.process.Xform.DatagridPC.html","url":"MWF.xApplication.process.Xform.DatagridPC.html","title":"DatagridPC","kind":"Class","body":" Class DatagridPC DatagridPC --> Extends MWF.xApplication.process.Xform.$Module DatagridPC 数据网格组件（PC端）。从v6.2开始建议用数据表格(Datatable)代替。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatagridPC.js, line 81 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据网格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatagridPC.js, line 1417 setData(data) Summary 为数据网格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatagridData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridPC.js, line 1449 getTotal() &rarr; {Object} Summary 获取总计数据. Returns Object 总计数据 Example var totalObject = this.form.get('fieldId').getTotal(); Source x_component_process_Xform/DatagridPC.js, line 1536 isEmpty() &rarr; {Boolean} Summary 判断数据网格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatagridPC.js, line 1548 getData() &rarr; {DatagridData} Summary 获取数据网格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatagridData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridPC.js, line 1594 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatagridPC.js, line 1759 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events completeLineEdit 当前条目编辑完成时触发。通过this.event可以获取对应的tr。 See 组件事件说明 addLine 添加条目时触发。通过this.event可以获取对应的tr。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的tr。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 editLine 编辑条目时触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据网格的时候触发，this.event指向整理过的导入数据，格式见DatagridData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class DatagridPC DatagridPC --> Extends MWF.xApplication.process.Xform.$Module DatagridPC 数据网格组件（PC端）。从v6.2开始建议用数据表格(Datatable)代替。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatagridPC.js, line 81 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据网格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatagridPC.js, line 1417 setData(data) Summary 为数据网格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatagridData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridPC.js, line 1449 getTotal() &rarr; {Object} Summary 获取总计数据. Returns Object 总计数据 Example var totalObject = this.form.get('fieldId').getTotal(); Source x_component_process_Xform/DatagridPC.js, line 1536 isEmpty() &rarr; {Boolean} Summary 判断数据网格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatagridPC.js, line 1548 getData() &rarr; {DatagridData} Summary 获取数据网格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatagridData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatagridPC.js, line 1594 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatagridPC.js, line 1759 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events completeLineEdit 当前条目编辑完成时触发。通过this.event可以获取对应的tr。 See 组件事件说明 addLine 添加条目时触发。通过this.event可以获取对应的tr。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的tr。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 editLine 编辑条目时触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据网格的时候触发，this.event指向整理过的导入数据，格式见DatagridData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.DatatableMobile.html":{"id":"MWF.xApplication.process.Xform.DatatableMobile.html","url":"MWF.xApplication.process.Xform.DatatableMobile.html","title":"DatatableMobile","kind":"Class","body":" Class DatatableMobile DatatableMobile --> Extends MWF.xApplication.process.Xform.DatatablePC DatatableMobile 数据网格组件（移动端）。表格形式的多行数据编辑组件。 Usable Range Process CMS Portal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatable = this.form.get('name'); //获取组件 //方法2 var datatable = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatatableMobile.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据表格的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.DatatablePC#resetData Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatatablePC.js, line 772 setData(data) Summary 为数据表格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatableData | Promise | Array 必选，数组或Promise. Inherited From MWF.xApplication.process.Xform.DatatablePC#setData Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 804 isEmpty() &rarr; {Boolean} Summary 判断数据表格是否为空. Inherited From MWF.xApplication.process.Xform.DatatablePC#isEmpty Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatatablePC.js, line 854 getLine(index) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Inherited From MWF.xApplication.process.Xform.DatatablePC#getLine Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 对应的数据表格条目 Example //获取数据表格“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 879 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line} 在数据表格末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#addLine Returns MWF.xApplication.process.Xform.DatatablePC.Line 添加的数据表格条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/DatatablePC.js, line 890 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 在数据表格指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#insertLine Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 插入的数据表格条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/DatatablePC.js, line 901 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，删除失败。 Inherited From MWF.xApplication.process.Xform.DatatablePC#deleteLine Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/DatatablePC.js, line 911 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Inherited From MWF.xApplication.process.Xform.DatatablePC#getModule Returns FormComponent 对应表单组件 Example //获取数据表格“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 933 getData() &rarr; {DatatableData} Summary 获取数据表格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.DatatablePC#getData Returns DatatableData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 976 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.DatatablePC#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatatablePC.js, line 1138 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterLoad See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:beforeLoadLine See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterLoadLine See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:addLine See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:deleteLine See 组件事件说明 afterDeleteLine 删除条目后触发。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterDeleteLine See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:export See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:validImport See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据表格的时候触发，this.event指向整理过的导入数据，格式见DatatableData。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:import See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class DatatableMobile DatatableMobile --> Extends MWF.xApplication.process.Xform.DatatablePC DatatableMobile 数据网格组件（移动端）。表格形式的多行数据编辑组件。 Usable Range Process CMS Portal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatable = this.form.get('name'); //获取组件 //方法2 var datatable = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatatableMobile.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据表格的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.DatatablePC#resetData Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatatablePC.js, line 772 setData(data) Summary 为数据表格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatableData | Promise | Array 必选，数组或Promise. Inherited From MWF.xApplication.process.Xform.DatatablePC#setData Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 804 isEmpty() &rarr; {Boolean} Summary 判断数据表格是否为空. Inherited From MWF.xApplication.process.Xform.DatatablePC#isEmpty Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatatablePC.js, line 854 getLine(index) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Inherited From MWF.xApplication.process.Xform.DatatablePC#getLine Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 对应的数据表格条目 Example //获取数据表格“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 879 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line} 在数据表格末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#addLine Returns MWF.xApplication.process.Xform.DatatablePC.Line 添加的数据表格条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/DatatablePC.js, line 890 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 在数据表格指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#insertLine Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 插入的数据表格条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/DatatablePC.js, line 901 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，删除失败。 Inherited From MWF.xApplication.process.Xform.DatatablePC#deleteLine Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/DatatablePC.js, line 911 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Inherited From MWF.xApplication.process.Xform.DatatablePC#getModule Returns FormComponent 对应表单组件 Example //获取数据表格“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 933 getData() &rarr; {DatatableData} Summary 获取数据表格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.DatatablePC#getData Returns DatatableData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 976 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.DatatablePC#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatatablePC.js, line 1138 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterLoad See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:beforeLoadLine See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterLoadLine See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:addLine See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:deleteLine See 组件事件说明 afterDeleteLine 删除条目后触发。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:afterDeleteLine See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:export See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:validImport See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据表格的时候触发，this.event指向整理过的导入数据，格式见DatatableData。 Inherited From MWF.xApplication.process.Xform.DatatablePC#event:import See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.DatatablePC.html":{"id":"MWF.xApplication.process.Xform.DatatablePC.html","url":"MWF.xApplication.process.Xform.DatatablePC.html","title":"DatatablePC","kind":"Class","body":" Class DatatablePC DatatablePC --> Extends MWF.xApplication.process.Xform.$Module DatatablePC 数据表格组件。表格形式的多行数据编辑组件。 Usable Range Process CMS Protal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatable = this.form.get('name'); //获取组件 //方法2 var datatable = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatatablePC.js, line 70 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据表格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatatablePC.js, line 772 setData(data) Summary 为数据表格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatableData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 804 isEmpty() &rarr; {Boolean} Summary 判断数据表格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatatablePC.js, line 854 getLine(index) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 对应的数据表格条目 Example //获取数据表格“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 879 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line} 在数据表格末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.DatatablePC.Line 添加的数据表格条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/DatatablePC.js, line 890 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 在数据表格指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 插入的数据表格条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/DatatablePC.js, line 901 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，删除失败。 Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/DatatablePC.js, line 911 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Returns FormComponent 对应表单组件 Example //获取数据表格“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 933 getData() &rarr; {DatatableData} Summary 获取数据表格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatatableData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 976 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatatablePC.js, line 1138 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据表格的时候触发，this.event指向整理过的导入数据，格式见DatatableData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class DatatablePC DatatablePC --> Extends MWF.xApplication.process.Xform.$Module DatatablePC 数据表格组件。表格形式的多行数据编辑组件。 Usable Range Process CMS Protal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatable = this.form.get('name'); //获取组件 //方法2 var datatable = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/DatatablePC.js, line 70 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据表格的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/DatatablePC.js, line 772 setData(data) Summary 为数据表格赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatableData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 804 isEmpty() &rarr; {Boolean} Summary 判断数据表格是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/DatatablePC.js, line 854 getLine(index) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 对应的数据表格条目 Example //获取数据表格“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 879 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line} 在数据表格末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.DatatablePC.Line 添加的数据表格条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/DatatablePC.js, line 890 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.DatatablePC.Line|Null} 在数据表格指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.DatatablePC.Line Null 插入的数据表格条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/DatatablePC.js, line 901 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据表格条目数，删除失败。 Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/DatatablePC.js, line 911 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Returns FormComponent 对应表单组件 Example //获取数据表格“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/DatatablePC.js, line 933 getData() &rarr; {DatatableData} Summary 获取数据表格数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatatableData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/DatatablePC.js, line 976 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/DatatablePC.js, line 1138 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据表格的时候触发，this.event指向整理过的导入数据，格式见DatatableData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Datatemplate.html":{"id":"MWF.xApplication.process.Xform.Datatemplate.html","url":"MWF.xApplication.process.Xform.Datatemplate.html","title":"Datatemplate","kind":"Class","body":" Class Datatemplate Datatemplate --> Extends MWF.xApplication.process.Xform.$Module Datatemplate 数据模板组件。自定义结构和样式的多行数据编辑组件。 Usable Range Process CMS Protal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatemplate = this.form.get('name'); //获取组件 //方法2 var datatemplate = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Datatemplate.js, line 64 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据模板的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/Datatemplate.js, line 601 setData(data) Summary 为数据模板赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatemplateData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/Datatemplate.js, line 633 isEmpty() &rarr; {Boolean} Summary 判断数据模板是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/Datatemplate.js, line 689 getLine(index) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Returns MWF.xApplication.process.Xform.Datatemplate.Line Null 对应的数据模板条目 Example //获取数据模板“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/Datatemplate.js, line 713 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line} 在数据模板末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.Datatemplate.Line 添加的数据模板条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/Datatemplate.js, line 724 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line|Null} 在数据模板指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据模板条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.Datatemplate.Line Null 插入的数据模板条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/Datatemplate.js, line 735 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据模板条目数，删除失败。 Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/Datatemplate.js, line 745 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Returns FormComponent 对应表单组件 Example //获取数据模板“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/Datatemplate.js, line 767 getData() &rarr; {DatatemplateData} Summary 获取数据模板数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatatemplateData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/Datatemplate.js, line 810 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Datatemplate.js, line 974 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据模板的时候触发，this.event指向整理过的导入数据，格式见DatatemplateData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Datatemplate Datatemplate --> Extends MWF.xApplication.process.Xform.$Module Datatemplate 数据模板组件。自定义结构和样式的多行数据编辑组件。 Usable Range Process CMS Protal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var datatemplate = this.form.get('name'); //获取组件 //方法2 var datatemplate = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Datatemplate.js, line 64 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置数据模板的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/Datatemplate.js, line 601 setData(data) Summary 为数据模板赋值。 Description 当参数为Promise的时候，请查看文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data DatatemplateData | Promise | Array 必选，数组或Promise. Examples this.form.get('fieldId').setData([]); //赋空值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/Datatemplate.js, line 633 isEmpty() &rarr; {Boolean} Summary 判断数据模板是否为空. Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('至少需要添加一条数据', 'warn'); } Source x_component_process_Xform/Datatemplate.js, line 689 getLine(index) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line|Null} 获取对应的条目。 Parameters index Number 条目序号，从零开始 Returns MWF.xApplication.process.Xform.Datatemplate.Line Null 对应的数据模板条目 Example //获取数据模板“dt1”的第一个条目。 var line = this.form.get('dt1').getLine(0); //获取第一个条目subject字段的值 var data = line.getModule('subject').getData(); //设置subject字段的值 line.getModule('subject').setData('test1'); Source x_component_process_Xform/Datatemplate.js, line 713 addLine(dataopt) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line} 在数据模板末尾添加条目。 Parameters data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.Datatemplate.Line 添加的数据模板条目 Example var line = this.form.get('dt1').addLine(); Source x_component_process_Xform/Datatemplate.js, line 724 insertLine(index, dataopt) &rarr; {MWF.xApplication.process.Xform.Datatemplate.Line|Null} 在数据模板指定位置添加条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据模板条目数，插入失败并返回null。 data Object &lt;optional&gt; 添加条目的数据。 Returns MWF.xApplication.process.Xform.Datatemplate.Line Null 插入的数据模板条目 Example var line = this.form.get('dt1').insertLine(0); Source x_component_process_Xform/Datatemplate.js, line 735 deleteLine(index) 删除指定位置的条目。 Parameters index Number 条目序号，从零开始，如果下标超过当前数据模板条目数，删除失败。 Example //直接删除第一个条目 this.form.get('dt1').deleteLine(0); Source x_component_process_Xform/Datatemplate.js, line 745 getModule(index, id) &rarr; {FormComponent} 获取对应表单组件。 Parameters index Number 条目序号，从零开始 id String 组件标识 Returns FormComponent 对应表单组件 Example //获取数据模板“dt1”的第一个条目的subject字段。 var module = this.form.get('dt1').getModule(0, 'subject'); //获取subject字段的值 var data = module.getData(); //设置subject字段的值 module.setData('test1'); Source x_component_process_Xform/Datatemplate.js, line 767 getData() &rarr; {DatatemplateData} Summary 获取数据模板数据. Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns DatatemplateData Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise var field = this.form.get('fieldId'); var promise = new Promise(function(resolve, reject){ //发起异步请求 var oReq = new XMLHttpRequest(); oReq.addEventListener('load', function(){ //绑定load事件 resolve(oReq.responseText); }); oReq.open('GET', '/data.json'); //假设数据存放在data.json oReq.send(); }); promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获得data.json的值 }) field.setData( promise ); Source x_component_process_Xform/Datatemplate.js, line 810 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Datatemplate.js, line 974 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events afterLoad 所有内容加载后执行（包括异步加载）。 See 组件事件说明 beforeLoadLine 每初始化一个条目，但未加载的时候触发，通过this.event可以获取条目对象。 See 组件事件说明 afterLoadLine 每一个条目加载后时候触发，通过this.event可以获取条目对象。 See 组件事件说明 addLine 添加条目时触发。通过this.event.line可以获取对应的条目对象，this.event.ev可以获得事件触发的Event。 See 组件事件说明 deleteLine 删除条目前触发。通过this.event可以获取对应的条目对象。 See 组件事件说明 afterDeleteLine 删除条目后触发。 See 组件事件说明 export 导出excel的时候触发，this.event指向导出的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ ['姓名','性别','学历','专业','出生日期','毕业日期'], //标题 [ '张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], //导出的数据 colWidthArray : [100, 50, 100, 200, 150, 150], //每列宽度 title : 'xxxx' //导出的excel文件标题 } validImport 在导入excel，进行数据校验后触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { data : [ { '姓名' : '张三', '性别' : '男', '学历' ： '大学本科', '专业' : '计算机', '出生日期' : 'aa01-1-2', '毕业日期' : '2019-9-2', 'errorTextList' : [ '第5列：aa01-1-2不是正确的日期格式。' ] //校验出的错误信息，如果改行数据正确，则无该字段 } ... ], //导入的数据 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } import 在导入excel，数据校验成功将要设置回数据模板的时候触发，this.event指向整理过的导入数据，格式见DatatemplateData。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Div.html":{"id":"MWF.xApplication.process.Xform.Div.html","url":"MWF.xApplication.process.Xform.Div.html","title":"Div","kind":"Class","body":" Class Div Div --> Extends MWF.xApplication.process.Xform.$Module Div 容器组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var div = this.form.get('name'); //获取组件 //方法2 var div = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Div.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Div Div --> Extends MWF.xApplication.process.Xform.$Module Div 容器组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var div = this.form.get('name'); //获取组件 //方法2 var div = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Div.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Documenteditor.html":{"id":"MWF.xApplication.process.Xform.Documenteditor.html","url":"MWF.xApplication.process.Xform.Documenteditor.html","title":"Documenteditor","kind":"Class","body":" Class Documenteditor Documenteditor --> Extends MWF.xApplication.process.Xform.$Module Documenteditor 公文编辑器。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var documenteditor = this.form.get('fieldId'); //获取组件 //方法2 var documenteditor = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Documenteditor.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active() 激活公文编辑器编辑。设置了延迟加载的时候，可以通过这个方法来激活 Example this.form.get('fieldId').active(); Source x_component_process_Xform/Documenteditor.js, line 69 scaleTo(scale) 缩放文件内容 Parameters scale Number 缩放的比率 Example this.form.get('fieldId').scaleTo(0.5); Source x_component_process_Xform/Documenteditor.js, line 1872 reload() 重新计算公文编辑器的所有字段，当字段是脚本时可以使用该方法立即更新 Example this.form.get('fieldId').reload(); Source x_component_process_Xform/Documenteditor.js, line 2784 isEmpty() &rarr; {Boolean} Summary 判断公文编辑器的正文内容是否已经填写 Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('请填写正文内容') } Source x_component_process_Xform/Documenteditor.js, line 2814 getData() &rarr; {Object} Summary 获取公文编辑器数据 Returns Object 公文编辑器的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Documenteditor.js, line 2825 setData(data) 设置公文编辑器数据 Parameters data Object Example var data = this.form.get('fieldId').getData(); data.filetext = '测试内容'; this.form.get('fieldId').setData(data); Source x_component_process_Xform/Documenteditor.js, line 2914 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Documenteditor.js, line 3234 getDocumentHtml() &rarr; {String} 将公文编辑器内容以html形式输出 Returns String Example var html = this.form.get('fieldId').getDocumentHtml(); Source x_component_process_Xform/Documenteditor.js, line 3270 toWord(callbackopt, nameopt) Summary 将公文编辑器转换成附件，转换的文件名和格式等信息与配置有关 Parameters callback function &lt;optional&gt; 转换后的回调方法，参数是附件数据. name string &lt;optional&gt; 如果为空或者不传，转换的文件名和格式等信息与配置有关. Example this.form.get('fieldId').toWord( function(attachmentData){ //attachmentData 转换后的附件数据 }) Source x_component_process_Xform/Documenteditor.js, line 3335 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadPage 当公文编辑器内容每次被渲染的时候都会触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Documenteditor Documenteditor --> Extends MWF.xApplication.process.Xform.$Module Documenteditor 公文编辑器。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var documenteditor = this.form.get('fieldId'); //获取组件 //方法2 var documenteditor = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Documenteditor.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active() 激活公文编辑器编辑。设置了延迟加载的时候，可以通过这个方法来激活 Example this.form.get('fieldId').active(); Source x_component_process_Xform/Documenteditor.js, line 69 scaleTo(scale) 缩放文件内容 Parameters scale Number 缩放的比率 Example this.form.get('fieldId').scaleTo(0.5); Source x_component_process_Xform/Documenteditor.js, line 1872 reload() 重新计算公文编辑器的所有字段，当字段是脚本时可以使用该方法立即更新 Example this.form.get('fieldId').reload(); Source x_component_process_Xform/Documenteditor.js, line 2784 isEmpty() &rarr; {Boolean} Summary 判断公文编辑器的正文内容是否已经填写 Returns Boolean 是否为空 Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('请填写正文内容') } Source x_component_process_Xform/Documenteditor.js, line 2814 getData() &rarr; {Object} Summary 获取公文编辑器数据 Returns Object 公文编辑器的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Documenteditor.js, line 2825 setData(data) 设置公文编辑器数据 Parameters data Object Example var data = this.form.get('fieldId').getData(); data.filetext = '测试内容'; this.form.get('fieldId').setData(data); Source x_component_process_Xform/Documenteditor.js, line 2914 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Documenteditor.js, line 3234 getDocumentHtml() &rarr; {String} 将公文编辑器内容以html形式输出 Returns String Example var html = this.form.get('fieldId').getDocumentHtml(); Source x_component_process_Xform/Documenteditor.js, line 3270 toWord(callbackopt, nameopt) Summary 将公文编辑器转换成附件，转换的文件名和格式等信息与配置有关 Parameters callback function &lt;optional&gt; 转换后的回调方法，参数是附件数据. name string &lt;optional&gt; 如果为空或者不传，转换的文件名和格式等信息与配置有关. Example this.form.get('fieldId').toWord( function(attachmentData){ //attachmentData 转换后的附件数据 }) Source x_component_process_Xform/Documenteditor.js, line 3335 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadPage 当公文编辑器内容每次被渲染的时候都会触发。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Form.html":{"id":"MWF.xApplication.process.Xform.Form.html","url":"MWF.xApplication.process.Xform.Form.html","title":"Form","kind":"Class","body":" Class Form Form --> Form 流程表单。 Usable Range Process Example //可以在脚本中获取表单 //方法1： var form = this.form.getApp().appForm; //获取表单 //方法2 var form = this.target; //在表单本身的事件脚本中获取 Source x_component_process_Xform/Form.js, line 19 Members containerElement 表单容器 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_process_Xform/Form.js, line 176 jsonObject 表单的配置信息，比如表单名称，提交方式等等. Type Object Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_process_Xform/Form.js, line 191 modulesArray 表单中的所有组件数组. Type Array Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_process_Xform/Form.js, line 217 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_process_Xform/Form.js, line 229 Methods getData() &rarr; {Object} Summary 获取表单的所有数据. Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_process_Xform/Form.js, line 1273 getRouteDataList() &rarr; {Array.&lt;Object>} Summary 获取当前工作的路由配置数据. Returns Array.&lt;Object> Example this.form.getApp().appForm.getRouteDataList(); Source x_component_process_Xform/Form.js, line 1650 pressWork() Summary 给待办人发送提醒(催促办理). Description 需要判断权限 Example if( this.workContext.getControl().allowPress ){ //判断流程节点是否设置了催办并且当前人员是否有催办权限 this.form.getApp().appForm.pressWork(); } Source x_component_process_Xform/Form.js, line 3245 pauseTask() Summary 将待办设置为挂起状态，不计算工作时长. Example this.form.getApp().appForm.pauseTask(); Source x_component_process_Xform/Form.js, line 3273 resumeTask() Summary 将待办从挂起状态恢复为正常状态. Example this.form.getApp().appForm.resumeTask(); Source x_component_process_Xform/Form.js, line 3308 rerouteWork() Summary 弹出调度界面 Description 如果当前人员没有调度权限或者流程节点未配置调度，则提醒Permission Denied. Example this.form.getApp().appForm.rerouteWork(); Source x_component_process_Xform/Form.js, line 3788 readedWork(eopt) Summary 将当前处理人的待阅设置为已阅. Parameters e Event | Element &lt;optional&gt; Event 或者Mootools Element，指定提示框弹出的位置 Example if( this.workContext.getControl().allowReadProcessing ){ //是否有待阅 this.form.getApp().appForm.readedWork(); } Source x_component_process_Xform/Form.js, line 4323 uploadedAttachment(site, id) Summary 将新上传的附件在指定的附件组件中展现. Parameters site String 附件组件的标识 id String 新上传的附件id Example this.form.getApp().appForm.uploadedAttachment(site, id); Source x_component_process_Xform/Form.js, line 4484 getModuleType(module) &rarr; {String} Summary 获取组件的类型(小写). Parameters module Object | String 组件或组件Id Returns String 组件类型（小写） Examples //假设有一个文本输入组件id为subject var module = this.form.get('subject'); //moduleType 为 textfield; var moduleType = this.form.getApp().appForm.getModuleType(); //假设有一个附件组件id为att, var moduleType = this.form.getApp().appForm.getModuleType('att'); //moduleType 为 attachment; Source x_component_process_Xform/Form.js, line 4579 Events queryLoad 表单加载前触发。数据（businessData）、预加载脚本和表单html已经就位。 See 组件事件说明 beforeLoad 表单加载前触发。如果是流程表单，已提示抢办锁定。 See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 See 组件事件说明 postLoad 表单加载后触发。主表单的组件加载完成，但不保证子表单、子页面、部件加载完成。 See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 See 组件事件说明 afterLoad 表单加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 See 组件事件说明 beforeSave 保存前触发。如果是流程表单，流转前也会触发本事件。 See 组件事件说明 afterSave 保存后触发。如果是流程表单，流转后也会触发本事件。 See 组件事件说明 beforeClose 关闭前触发。 See 组件事件说明 beforeProcessWork 弹出提交界面前触发。 See 组件事件说明 beforeProcess 流转前触发。 See 组件事件说明 afterProcess 流转后触发。 See 组件事件说明 beforeReset 重置处理人前触发。 See 组件事件说明 afterReset 重置处理人后触发。 See 组件事件说明 beforeRetract 撤回前触发。 See 组件事件说明 afterRetract 撤回后触发。 See 组件事件说明 beforeReroute 调度前触发。 See 组件事件说明 afterReroute 调度后触发。 See 组件事件说明 beforeDelete 删除工作前触发。 See 组件事件说明 afterDelete 删除工作后触发。 See 组件事件说明 beforeReaded 已阅前触发。 See 组件事件说明 afterReaded 已阅后触发。 See 组件事件说明 Class Form Form --> Form 流程表单。 Usable Range Process Example //可以在脚本中获取表单 //方法1： var form = this.form.getApp().appForm; //获取表单 //方法2 var form = this.target; //在表单本身的事件脚本中获取 Source x_component_process_Xform/Form.js, line 19 Members containerElement 表单容器 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_process_Xform/Form.js, line 176 jsonObject 表单的配置信息，比如表单名称，提交方式等等. Type Object Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_process_Xform/Form.js, line 191 modulesArray 表单中的所有组件数组. Type Array Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_process_Xform/Form.js, line 217 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_process_Xform/Form.js, line 229 Methods getData() &rarr; {Object} Summary 获取表单的所有数据. Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_process_Xform/Form.js, line 1273 getRouteDataList() &rarr; {Array.&lt;Object>} Summary 获取当前工作的路由配置数据. Returns Array.&lt;Object> Example this.form.getApp().appForm.getRouteDataList(); Source x_component_process_Xform/Form.js, line 1650 pressWork() Summary 给待办人发送提醒(催促办理). Description 需要判断权限 Example if( this.workContext.getControl().allowPress ){ //判断流程节点是否设置了催办并且当前人员是否有催办权限 this.form.getApp().appForm.pressWork(); } Source x_component_process_Xform/Form.js, line 3245 pauseTask() Summary 将待办设置为挂起状态，不计算工作时长. Example this.form.getApp().appForm.pauseTask(); Source x_component_process_Xform/Form.js, line 3273 resumeTask() Summary 将待办从挂起状态恢复为正常状态. Example this.form.getApp().appForm.resumeTask(); Source x_component_process_Xform/Form.js, line 3308 rerouteWork() Summary 弹出调度界面 Description 如果当前人员没有调度权限或者流程节点未配置调度，则提醒Permission Denied. Example this.form.getApp().appForm.rerouteWork(); Source x_component_process_Xform/Form.js, line 3788 readedWork(eopt) Summary 将当前处理人的待阅设置为已阅. Parameters e Event | Element &lt;optional&gt; Event 或者Mootools Element，指定提示框弹出的位置 Example if( this.workContext.getControl().allowReadProcessing ){ //是否有待阅 this.form.getApp().appForm.readedWork(); } Source x_component_process_Xform/Form.js, line 4323 uploadedAttachment(site, id) Summary 将新上传的附件在指定的附件组件中展现. Parameters site String 附件组件的标识 id String 新上传的附件id Example this.form.getApp().appForm.uploadedAttachment(site, id); Source x_component_process_Xform/Form.js, line 4484 getModuleType(module) &rarr; {String} Summary 获取组件的类型(小写). Parameters module Object | String 组件或组件Id Returns String 组件类型（小写） Examples //假设有一个文本输入组件id为subject var module = this.form.get('subject'); //moduleType 为 textfield; var moduleType = this.form.getApp().appForm.getModuleType(); //假设有一个附件组件id为att, var moduleType = this.form.getApp().appForm.getModuleType('att'); //moduleType 为 attachment; Source x_component_process_Xform/Form.js, line 4579 Events queryLoad 表单加载前触发。数据（businessData）、预加载脚本和表单html已经就位。 See 组件事件说明 beforeLoad 表单加载前触发。如果是流程表单，已提示抢办锁定。 See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 See 组件事件说明 postLoad 表单加载后触发。主表单的组件加载完成，但不保证子表单、子页面、部件加载完成。 See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 See 组件事件说明 afterLoad 表单加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 See 组件事件说明 beforeSave 保存前触发。如果是流程表单，流转前也会触发本事件。 See 组件事件说明 afterSave 保存后触发。如果是流程表单，流转后也会触发本事件。 See 组件事件说明 beforeClose 关闭前触发。 See 组件事件说明 beforeProcessWork 弹出提交界面前触发。 See 组件事件说明 beforeProcess 流转前触发。 See 组件事件说明 afterProcess 流转后触发。 See 组件事件说明 beforeReset 重置处理人前触发。 See 组件事件说明 afterReset 重置处理人后触发。 See 组件事件说明 beforeRetract 撤回前触发。 See 组件事件说明 afterRetract 撤回后触发。 See 组件事件说明 beforeReroute 调度前触发。 See 组件事件说明 afterReroute 调度后触发。 See 组件事件说明 beforeDelete 删除工作前触发。 See 组件事件说明 afterDelete 删除工作后触发。 See 组件事件说明 beforeReaded 已阅前触发。 See 组件事件说明 afterReaded 已阅后触发。 See 组件事件说明 "},"PortalPage.html":{"id":"PortalPage.html","url":"PortalPage.html","title":"PortalPage","kind":"Class","body":" Class PortalPage PortalPage --> Extends MWF.xApplication.process.Xform.Form PortalPage 门户页面。 Usable Range Portal Example //可以在脚本中获取页面 //方法1： var page = this.form.getApp().appForm; //获取页面 //方法2 var page = this.target; //在页面本身的事件脚本中获取 Source x_component_process_Xform/Form.js, line 4609 Members containerElement 表单容器 Type Element Inherited From MWF.xApplication.process.Xform.Form#container See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_process_Xform/Form.js, line 176 jsonObject 表单的配置信息，比如表单名称，提交方式等等. Type Object Inherited From MWF.xApplication.process.Xform.Form#json Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_process_Xform/Form.js, line 191 modulesArray 表单中的所有组件数组. Type Array Inherited From MWF.xApplication.process.Xform.Form#modules Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_process_Xform/Form.js, line 217 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Inherited From MWF.xApplication.process.Xform.Form#all Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_process_Xform/Form.js, line 229 Methods getData() &rarr; {Object} Summary 获取表单的所有数据. Inherited From MWF.xApplication.process.Xform.Form#getData Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_process_Xform/Form.js, line 1273 getModuleType(module) &rarr; {String} Summary 获取组件的类型(小写). Parameters module Object | String 组件或组件Id Inherited From MWF.xApplication.process.Xform.Form#getModuleType Returns String 组件类型（小写） Examples //假设有一个文本输入组件id为subject var module = this.form.get('subject'); //moduleType 为 textfield; var moduleType = this.form.getApp().appForm.getModuleType(); //假设有一个附件组件id为att, var moduleType = this.form.getApp().appForm.getModuleType('att'); //moduleType 为 attachment; Source x_component_process_Xform/Form.js, line 4579 Events queryLoad 表单加载前触发。数据（businessData）、预加载脚本和表单html已经就位。 Inherited From MWF.xApplication.process.Xform.Form#event:queryLoad See 组件事件说明 beforeLoad 表单加载前触发。如果是流程表单，已提示抢办锁定。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeLoad See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeModulesLoad See 组件事件说明 postLoad 表单加载后触发。主表单的组件加载完成，但不保证子表单、子页面、部件加载完成。 Inherited From MWF.xApplication.process.Xform.Form#event:postLoad See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 Inherited From MWF.xApplication.process.Xform.Form#event:afterModulesLoad See 组件事件说明 afterLoad 表单加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 Inherited From MWF.xApplication.process.Xform.Form#event:afterLoad See 组件事件说明 beforeSave 保存前触发。如果是流程表单，流转前也会触发本事件。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeSave See 组件事件说明 afterSave 保存后触发。如果是流程表单，流转后也会触发本事件。 Inherited From MWF.xApplication.process.Xform.Form#event:afterSave See 组件事件说明 beforeClose 关闭前触发。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeClose See 组件事件说明 Class PortalPage PortalPage --> Extends MWF.xApplication.process.Xform.Form PortalPage 门户页面。 Usable Range Portal Example //可以在脚本中获取页面 //方法1： var page = this.form.getApp().appForm; //获取页面 //方法2 var page = this.target; //在页面本身的事件脚本中获取 Source x_component_process_Xform/Form.js, line 4609 Members containerElement 表单容器 Type Element Inherited From MWF.xApplication.process.Xform.Form#container See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_process_Xform/Form.js, line 176 jsonObject 表单的配置信息，比如表单名称，提交方式等等. Type Object Inherited From MWF.xApplication.process.Xform.Form#json Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_process_Xform/Form.js, line 191 modulesArray 表单中的所有组件数组. Type Array Inherited From MWF.xApplication.process.Xform.Form#modules Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_process_Xform/Form.js, line 217 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Inherited From MWF.xApplication.process.Xform.Form#all Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_process_Xform/Form.js, line 229 Methods getData() &rarr; {Object} Summary 获取表单的所有数据. Inherited From MWF.xApplication.process.Xform.Form#getData Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_process_Xform/Form.js, line 1273 getModuleType(module) &rarr; {String} Summary 获取组件的类型(小写). Parameters module Object | String 组件或组件Id Inherited From MWF.xApplication.process.Xform.Form#getModuleType Returns String 组件类型（小写） Examples //假设有一个文本输入组件id为subject var module = this.form.get('subject'); //moduleType 为 textfield; var moduleType = this.form.getApp().appForm.getModuleType(); //假设有一个附件组件id为att, var moduleType = this.form.getApp().appForm.getModuleType('att'); //moduleType 为 attachment; Source x_component_process_Xform/Form.js, line 4579 Events queryLoad 表单加载前触发。数据（businessData）、预加载脚本和表单html已经就位。 Inherited From MWF.xApplication.process.Xform.Form#event:queryLoad See 组件事件说明 beforeLoad 表单加载前触发。如果是流程表单，已提示抢办锁定。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeLoad See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeModulesLoad See 组件事件说明 postLoad 表单加载后触发。主表单的组件加载完成，但不保证子表单、子页面、部件加载完成。 Inherited From MWF.xApplication.process.Xform.Form#event:postLoad See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 Inherited From MWF.xApplication.process.Xform.Form#event:afterModulesLoad See 组件事件说明 afterLoad 表单加载后触发。表单包含有子表单、子页面、部件时，此事件会在这些组件加载后触发。 Inherited From MWF.xApplication.process.Xform.Form#event:afterLoad See 组件事件说明 beforeSave 保存前触发。如果是流程表单，流转前也会触发本事件。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeSave See 组件事件说明 afterSave 保存后触发。如果是流程表单，流转后也会触发本事件。 Inherited From MWF.xApplication.process.Xform.Form#event:afterSave See 组件事件说明 beforeClose 关闭前触发。 Inherited From MWF.xApplication.process.Xform.Form#event:beforeClose See 组件事件说明 "},"MWF.xApplication.process.Xform.Htmleditor.html":{"id":"MWF.xApplication.process.Xform.Htmleditor.html","url":"MWF.xApplication.process.Xform.Htmleditor.html","title":"Htmleditor","kind":"Class","body":" Class Htmleditor Htmleditor --> Extends MWF.xApplication.process.Xform.$Module Htmleditor HTML编辑器。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var htmlEditor = this.form.get('name'); //获取组件 //方法2 var htmlEditor = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Htmleditor.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置组件的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/Htmleditor.js, line 410 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('HTML编辑器不能为空', 'warn'); } Source x_component_process_Xform/Htmleditor.js, line 421 getData() Summary 获取组件值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } Source x_component_process_Xform/Htmleditor.js, line 439 setData(data) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String . Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Htmleditor.js, line 457 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Htmleditor.js, line 599 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Htmleditor Htmleditor --> Extends MWF.xApplication.process.Xform.$Module Htmleditor HTML编辑器。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var htmlEditor = this.form.get('name'); //获取组件 //方法2 var htmlEditor = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Htmleditor.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetData() Summary 重置组件的值为默认值或置空。 Example this.form.get('fieldId').resetData(); Source x_component_process_Xform/Htmleditor.js, line 410 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('HTML编辑器不能为空', 'warn'); } Source x_component_process_Xform/Htmleditor.js, line 421 getData() Summary 获取组件值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } Source x_component_process_Xform/Htmleditor.js, line 439 setData(data) Summary 为组件赋值。 Description 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String . Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } Source x_component_process_Xform/Htmleditor.js, line 457 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/Htmleditor.js, line 599 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Iframe.html":{"id":"MWF.xApplication.process.Xform.Iframe.html","url":"MWF.xApplication.process.Xform.Iframe.html","title":"Iframe","kind":"Class","body":" Class Iframe Iframe --> Extends MWF.xApplication.process.Xform.$Module Iframe HTML iframe。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var iframe = this.form.get('name'); //获取组件 //方法2 var iframe = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Iframe.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Iframe Iframe --> Extends MWF.xApplication.process.Xform.$Module Iframe HTML iframe。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var iframe = this.form.get('name'); //获取组件 //方法2 var iframe = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Iframe.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Image.html":{"id":"MWF.xApplication.process.Xform.Image.html","url":"MWF.xApplication.process.Xform.Image.html","title":"Image","kind":"Class","body":" Class Image Image --> Extends MWF.xApplication.process.Xform.$Module Image 图片。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var img = this.form.get('name'); //获取组件 //方法2 var img = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Image.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Image Image --> Extends MWF.xApplication.process.Xform.$Module Image 图片。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var img = this.form.get('name'); //获取组件 //方法2 var img = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Image.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.ImageClipper.html":{"id":"MWF.xApplication.process.Xform.ImageClipper.html","url":"MWF.xApplication.process.Xform.ImageClipper.html","title":"ImageClipper","kind":"Class","body":" Class ImageClipper ImageClipper --> Extends MWF.xApplication.process.Xform.$Module ImageClipper 图片编辑组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var imageClipper = this.form.get('name'); //获取组件 //方法2 var imageClipper = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/ImageClipper.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('请上传图片', 'warn'); } Source x_component_process_Xform/ImageClipper.js, line 112 getData() 获取上传的图片ID。 Example var id = this.form.get('fieldId').getData(); //获取上传的图片id var url = MWF.xDesktop.getImageSrc( id ); //获取图片的url Source x_component_process_Xform/ImageClipper.js, line 122 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/ImageClipper.js, line 321 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class ImageClipper ImageClipper --> Extends MWF.xApplication.process.Xform.$Module ImageClipper 图片编辑组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var imageClipper = this.form.get('name'); //获取组件 //方法2 var imageClipper = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/ImageClipper.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Returns Boolean 值是否为空. Example if( this.form.get('fieldId').isEmpty() ){ this.form.notice('请上传图片', 'warn'); } Source x_component_process_Xform/ImageClipper.js, line 112 getData() 获取上传的图片ID。 Example var id = this.form.get('fieldId').getData(); //获取上传的图片id var url = MWF.xDesktop.getImageSrc( id ); //获取图片的url Source x_component_process_Xform/ImageClipper.js, line 122 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/ImageClipper.js, line 321 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Importer.html":{"id":"MWF.xApplication.process.Xform.Importer.html","url":"MWF.xApplication.process.Xform.Importer.html","title":"Importer","kind":"Class","body":" Class Importer Importer --> Extends MWF.xApplication.process.Xform.Button Importer 导入数据组件，本组件通过导入模型来执行数据的导入，支持内容管理文档，流程管理work，自建表数据的导入。 Usable Range Process CMS Portal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var importer = this.form.get('fieldId'); //获取组件 //方法2 var importer = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Importer.js, line 16 Members importerMWF.xApplication.query.Query.Importer 导入模型对象. Type MWF.xApplication.query.Query.Importer Example var importer = this.form.get('fieldId').importer; //获取组件 if(importer)importer.importFromExcel(); //执行导入 Source x_component_process_Xform/Importer.js, line 139 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.Button#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadImporter 加载importer（导入模型对象）的时候执行，可以通过this.target.importer获取导入模型对象。 See 组件事件说明 beforeImport 导入前触发，this.event指向导入的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： [ [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '标题二','李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ] validImport 数据已经生成，前台进行数据校验时触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { 'data' : [ [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '标题二','李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], 'rowList': [], //导入的行对象，数据格式常见本章API的afterCreateRowData说明。 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } afterImport 前台校验成功，并且后台执行完导入后触发，this.event指向后台返回的导入结果。 See 组件事件说明 Example this.event格式如下： { 'status': '导入成功', //导入结果：状态有 '导入成功','部分成功','导入失败' 'count' : 10, //导入总数量 'failCount': 0, //失败数量 'distribution': '' //导入时候时的错误信息 } beforeCreateRowData 创建每行需要导入的数据前触发，this.event指向当前行对象，您可以通过修改this.event.importData来修改数据。 See 组件事件说明 afterCreateRowData 创建每行需要导入的数据后触发，this.event指向当前行对象。 See 组件事件说明 Example this.event格式如下： { 'importData': [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //导入的数据 'data' : {//根据导入模型生成的业务数据 { 'subject', '标题一', //subject为导入模型列配置的路径 'name' : '张三', ... }, 'document': { //如果导入目标是内容管理，则包含document对象 'title': '标题一' 'identity': 'xxx@xxx@I' ... }, 'work': { //如果导入目标是流程管理，则包含work对象 'title': '标题一' 'identity': 'xxx@xxx@I' ... }, 'errorTextList' : [], //错误信息 'errorTextListExcel': [] //在出错界面导出Excel时的错误信息 } queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Importer Importer --> Extends MWF.xApplication.process.Xform.Button Importer 导入数据组件，本组件通过导入模型来执行数据的导入，支持内容管理文档，流程管理work，自建表数据的导入。 Usable Range Process CMS Portal Since v6.2 Example //可以在脚本中获取该组件 //方法1： var importer = this.form.get('fieldId'); //获取组件 //方法2 var importer = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Importer.js, line 16 Members importerMWF.xApplication.query.Query.Importer 导入模型对象. Type MWF.xApplication.query.Query.Importer Example var importer = this.form.get('fieldId').importer; //获取组件 if(importer)importer.importFromExcel(); //执行导入 Source x_component_process_Xform/Importer.js, line 139 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.Button#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadImporter 加载importer（导入模型对象）的时候执行，可以通过this.target.importer获取导入模型对象。 See 组件事件说明 beforeImport 导入前触发，this.event指向导入的数据，您可以通过修改this.event来修改数据。 See 组件事件说明 Example this.event数据格式如下： [ [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '标题二','李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ] validImport 数据已经生成，前台进行数据校验时触发，this.event指向导入的数据。 See 组件事件说明 Example this.event数据格式如下： { 'data' : [ [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //第一行数据 [ '标题二','李四','男','大学专科','数学','1998-1-2','2018-9-2' ] //第二行数据 ], 'rowList': [], //导入的行对象，数据格式常见本章API的afterCreateRowData说明。 'validted' : true //是否校验通过，可以在本事件中修改该参数，确定是否强制导入 } afterImport 前台校验成功，并且后台执行完导入后触发，this.event指向后台返回的导入结果。 See 组件事件说明 Example this.event格式如下： { 'status': '导入成功', //导入结果：状态有 '导入成功','部分成功','导入失败' 'count' : 10, //导入总数量 'failCount': 0, //失败数量 'distribution': '' //导入时候时的错误信息 } beforeCreateRowData 创建每行需要导入的数据前触发，this.event指向当前行对象，您可以通过修改this.event.importData来修改数据。 See 组件事件说明 afterCreateRowData 创建每行需要导入的数据后触发，this.event指向当前行对象。 See 组件事件说明 Example this.event格式如下： { 'importData': [ '标题一','张三','男','大学本科','计算机','2001-1-2','2019-9-2' ], //导入的数据 'data' : {//根据导入模型生成的业务数据 { 'subject', '标题一', //subject为导入模型列配置的路径 'name' : '张三', ... }, 'document': { //如果导入目标是内容管理，则包含document对象 'title': '标题一' 'identity': 'xxx@xxx@I' ... }, 'work': { //如果导入目标是流程管理，则包含work对象 'title': '标题一' 'identity': 'xxx@xxx@I' ... }, 'errorTextList' : [], //错误信息 'errorTextListExcel': [] //在出错界面导出Excel时的错误信息 } queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Label.html":{"id":"MWF.xApplication.process.Xform.Label.html","url":"MWF.xApplication.process.Xform.Label.html","title":"Label","kind":"Class","body":" Class Label Label --> Extends MWF.xApplication.process.Xform.$Module Label 文本组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var label = this.form.get('name'); //获取组件 //方法2 var label = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Label.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods setText(text) Summary 为组件设置文本，该文本不会被保存到后台。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 Parameters text String | Promise . Examples this.form.get('fieldId').setText('test'); //赋文本值 //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setText( promise ); Source x_component_process_Xform/Label.js, line 84 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Label Label --> Extends MWF.xApplication.process.Xform.$Module Label 文本组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var label = this.form.get('name'); //获取组件 //方法2 var label = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Label.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods setText(text) Summary 为组件设置文本，该文本不会被保存到后台。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 Parameters text String | Promise . Examples this.form.get('fieldId').setText('test'); //赋文本值 //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setText( promise ); Source x_component_process_Xform/Label.js, line 84 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Log.html":{"id":"MWF.xApplication.process.Xform.Log.html","url":"MWF.xApplication.process.Xform.Log.html","title":"Log","kind":"Class","body":" Class Log Log --> Extends MWF.xApplication.process.Xform.$Module Log 流程记录组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Log.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后事件。 See 组件事件说明 Example //触发该事件的时候可以获取到流程数据workLog var workLog = this.target.workLog; //可以修改workLog达到定制化流程记录的效果 do something postLoadLine 加载每行流程信息以后触发，可以通过this.event获得下列信息： { 'data' : {}, //当前行流程信息 'node' : logTaskNode, //当前节点 'log' : object, //指向流程记录 'type' : 'task' //'task'表示待办，'taskCompleted'表示已办 } See 组件事件说明 postLoadData 加载数据后事件。 See 组件事件说明 Example //触发该事件的时候可以获取到流程数据workLog var workLog = this.target.workLog; //可以修改workLog达到定制化流程记录的效果 do something postLoadLine 加载每行流程信息以后触发，可以通过this.event获得下列信息： { 'data' : {}, //当前行流程信息 'node' : logTaskNode, //当前节点 'log' : object, //指向流程记录 'type' : 'task' //'task'表示待办，'taskCompleted'表示已办 } See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Log Log --> Extends MWF.xApplication.process.Xform.$Module Log 流程记录组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Log.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后事件。 See 组件事件说明 Example //触发该事件的时候可以获取到流程数据workLog var workLog = this.target.workLog; //可以修改workLog达到定制化流程记录的效果 do something postLoadLine 加载每行流程信息以后触发，可以通过this.event获得下列信息： { 'data' : {}, //当前行流程信息 'node' : logTaskNode, //当前节点 'log' : object, //指向流程记录 'type' : 'task' //'task'表示待办，'taskCompleted'表示已办 } See 组件事件说明 postLoadData 加载数据后事件。 See 组件事件说明 Example //触发该事件的时候可以获取到流程数据workLog var workLog = this.target.workLog; //可以修改workLog达到定制化流程记录的效果 do something postLoadLine 加载每行流程信息以后触发，可以通过this.event获得下列信息： { 'data' : {}, //当前行流程信息 'node' : logTaskNode, //当前节点 'log' : object, //指向流程记录 'type' : 'task' //'task'表示待办，'taskCompleted'表示已办 } See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Monitor.html":{"id":"MWF.xApplication.process.Xform.Monitor.html","url":"MWF.xApplication.process.Xform.Monitor.html","title":"Monitor","kind":"Class","body":" Class Monitor Monitor --> Extends MWF.xApplication.process.Xform.$Module Monitor 流程图组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Monitor.js, line 15 Members monitor 流程图对象，是一个 MWF.xApplication.process.Xform.widget.Monitor 类实例 Source x_component_process_Xform/Monitor.js, line 29 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Monitor Monitor --> Extends MWF.xApplication.process.Xform.$Module Monitor 流程图组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Monitor.js, line 15 Members monitor 流程图对象，是一个 MWF.xApplication.process.Xform.widget.Monitor 类实例 Source x_component_process_Xform/Monitor.js, line 29 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Number.html":{"id":"MWF.xApplication.process.Xform.Number.html","url":"MWF.xApplication.process.Xform.Number.html","title":"Number","kind":"Class","body":" Class Number Number --> Extends MWF.xApplication.process.Xform.Textfield Number 数字输入组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('name'); //获取组件 //方法2 var field = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Number.js, line 14 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Number Number --> Extends MWF.xApplication.process.Xform.Textfield Number 数字输入组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('name'); //获取组件 //方法2 var field = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Number.js, line 14 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Office.html":{"id":"MWF.xApplication.process.Xform.Office.html","url":"MWF.xApplication.process.Xform.Office.html","title":"Office","kind":"Class","body":" Class Office Office --> Extends MWF.xApplication.process.Xform.$Module Office Office控件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Office.js, line 14 Members officeOCX Ntko Office 控件对象, 第三方控件 See NTKO官网 Example var officeOCX = this.form.get('fieldId').officeOCX; var activeDocument = officeOCX.ActiveDocument //返回一个Office Document 对象，该对象代表活动文档。 Source x_component_process_Xform/Office.js, line 1346 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods editEnabled() Summary 允许编辑Office文档 Example this.form.get('fieldId').editEnabled(); Source x_component_process_Xform/Office.js, line 340 docReadonly() Summary 设置Office文档为只读 Example this.form.get('fieldId').docReadonly(); Source x_component_process_Xform/Office.js, line 350 protect(type) Summary 设置Office文档状态 Parameters type Number 1(批注),2(填写窗体),3(只读),0(修订),-1(限制编辑样式) Example this.form.get('fieldId').protect(1); Source x_component_process_Xform/Office.js, line 359 startRevisions() Summary 设置Office文档保留痕迹 Source x_component_process_Xform/Office.js, line 372 stopRevisions() Summary 设置Office文档取消保留痕迹 Source x_component_process_Xform/Office.js, line 398 seal() Summary 盖章 Source x_component_process_Xform/Office.js, line 703 redFile() Summary 套红 Source x_component_process_Xform/Office.js, line 709 showRevisions() Summary 显示痕迹 Source x_component_process_Xform/Office.js, line 738 hideRevisions() Summary 隐藏痕迹 Source x_component_process_Xform/Office.js, line 750 save(history) Summary 保存Office文档到后台 Parameters history Boolean 是否生产保留痕迹文件 Source x_component_process_Xform/Office.js, line 1389 hide() Summary 隐藏组件. Overrides MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Overrides MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events redFile 点击套红按钮触发。 See 组件事件说明 seal 点击盖章按钮触发。 See 组件事件说明 afterOpen Ntko控件执行AfterOpenFromURL事件（BeginOpenFromURL方法执行完毕之后被触发）时执行。 本事件可以通过this.event获取当前打开的文档对象。比如，对于一个Word文档，第二个参数是一个Word.Document对象。 See 组件事件说明 afterOpenOffice Ntko控件执行OnDocumentOpened事件（Office文档打开完毕）时触发。 本事件可以通过this.event获取以下内容 { url : url, //Office文档路径或者URL doc : doc //Office文档的自动化接口，比如，对于一个Word文档，第二个参数是一个Word.Document对象。 } See 组件事件说明 afterCreate 在新建Office文档后触发。 See 组件事件说明 beforeSave 在保存Office文档前触发。 See 组件事件说明 afterSave 在保存Office文档后触发。 See 组件事件说明 afterCloseOffice 在关闭Office文档时执行。 See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 Class Office Office --> Extends MWF.xApplication.process.Xform.$Module Office Office控件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var attachment = this.form.get('name'); //获取组件 //方法2 var attachment = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Office.js, line 14 Members officeOCX Ntko Office 控件对象, 第三方控件 See NTKO官网 Example var officeOCX = this.form.get('fieldId').officeOCX; var activeDocument = officeOCX.ActiveDocument //返回一个Office Document 对象，该对象代表活动文档。 Source x_component_process_Xform/Office.js, line 1346 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods editEnabled() Summary 允许编辑Office文档 Example this.form.get('fieldId').editEnabled(); Source x_component_process_Xform/Office.js, line 340 docReadonly() Summary 设置Office文档为只读 Example this.form.get('fieldId').docReadonly(); Source x_component_process_Xform/Office.js, line 350 protect(type) Summary 设置Office文档状态 Parameters type Number 1(批注),2(填写窗体),3(只读),0(修订),-1(限制编辑样式) Example this.form.get('fieldId').protect(1); Source x_component_process_Xform/Office.js, line 359 startRevisions() Summary 设置Office文档保留痕迹 Source x_component_process_Xform/Office.js, line 372 stopRevisions() Summary 设置Office文档取消保留痕迹 Source x_component_process_Xform/Office.js, line 398 seal() Summary 盖章 Source x_component_process_Xform/Office.js, line 703 redFile() Summary 套红 Source x_component_process_Xform/Office.js, line 709 showRevisions() Summary 显示痕迹 Source x_component_process_Xform/Office.js, line 738 hideRevisions() Summary 隐藏痕迹 Source x_component_process_Xform/Office.js, line 750 save(history) Summary 保存Office文档到后台 Parameters history Boolean 是否生产保留痕迹文件 Source x_component_process_Xform/Office.js, line 1389 hide() Summary 隐藏组件. Overrides MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Overrides MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events redFile 点击套红按钮触发。 See 组件事件说明 seal 点击盖章按钮触发。 See 组件事件说明 afterOpen Ntko控件执行AfterOpenFromURL事件（BeginOpenFromURL方法执行完毕之后被触发）时执行。 本事件可以通过this.event获取当前打开的文档对象。比如，对于一个Word文档，第二个参数是一个Word.Document对象。 See 组件事件说明 afterOpenOffice Ntko控件执行OnDocumentOpened事件（Office文档打开完毕）时触发。 本事件可以通过this.event获取以下内容 { url : url, //Office文档路径或者URL doc : doc //Office文档的自动化接口，比如，对于一个Word文档，第二个参数是一个Word.Document对象。 } See 组件事件说明 afterCreate 在新建Office文档后触发。 See 组件事件说明 beforeSave 在保存Office文档前触发。 See 组件事件说明 afterSave 在保存Office文档后触发。 See 组件事件说明 afterCloseOffice 在关闭Office文档时执行。 See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 "},"MWF.xApplication.process.Xform.Opinion.html":{"id":"MWF.xApplication.process.Xform.Opinion.html","url":"MWF.xApplication.process.Xform.Opinion.html","title":"Opinion","kind":"Class","body":" Class Opinion Opinion --> Extends MWF.xApplication.process.Xform.$Input Opinion 意见输入框。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Opinion.js, line 22 Members handwritingActionElement 手写意见按钮按钮。 Type Element Source x_component_process_Xform/Opinion.js, line 147 audioRecordActionElement 音频按钮.在浏览器支持HTML5的getUserMedia才可用。 Type Element Source x_component_process_Xform/Opinion.js, line 159 audioRecordero2.widget.AudioRecorder 音频意见组件. Type o2.widget.AudioRecorder Source x_component_process_Xform/Opinion.js, line 254 handwritingNodeElement 手写板容器. Type Element Source x_component_process_Xform/Opinion.js, line 322 tableto2.widget.Tablet 手写板组件. Type o2.widget.Tablet Source x_component_process_Xform/Opinion.js, line 353 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Overrides MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Opinion Opinion --> Extends MWF.xApplication.process.Xform.$Input Opinion 意见输入框。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Opinion.js, line 22 Members handwritingActionElement 手写意见按钮按钮。 Type Element Source x_component_process_Xform/Opinion.js, line 147 audioRecordActionElement 音频按钮.在浏览器支持HTML5的getUserMedia才可用。 Type Element Source x_component_process_Xform/Opinion.js, line 159 audioRecordero2.widget.AudioRecorder 音频意见组件. Type o2.widget.AudioRecorder Source x_component_process_Xform/Opinion.js, line 254 handwritingNodeElement 手写板容器. Type Element Source x_component_process_Xform/Opinion.js, line 322 tableto2.widget.Tablet 手写板组件. Type o2.widget.Tablet Source x_component_process_Xform/Opinion.js, line 353 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Overrides MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Org.html":{"id":"MWF.xApplication.process.Xform.Org.html","url":"MWF.xApplication.process.Xform.Org.html","title":"Org","kind":"Class","body":" Class Org Org --> Extends MWF.xApplication.process.Xform.$Input Org 人员组织组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Org.js, line 23 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Overrides MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Overrides MWF.xApplication.process.Xform.$Input#event:queryLoad See 组件事件说明 load 组件加载时触发. Overrides MWF.xApplication.process.Xform.$Input#event:load See 组件事件说明 postLoad 组件加载后触发. Overrides MWF.xApplication.process.Xform.$Input#event:postLoad See 组件事件说明 change 当组件值改变时触发。 See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 See 组件事件说明 queryLoadCategory 人员选择框事件：加载分类前执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 Class Org Org --> Extends MWF.xApplication.process.Xform.$Input Org 人员组织组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Org.js, line 23 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Overrides MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Overrides MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Overrides MWF.xApplication.process.Xform.$Input#event:queryLoad See 组件事件说明 load 组件加载时触发. Overrides MWF.xApplication.process.Xform.$Input#event:load See 组件事件说明 postLoad 组件加载后触发. Overrides MWF.xApplication.process.Xform.$Input#event:postLoad See 组件事件说明 change 当组件值改变时触发。 See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 See 组件事件说明 queryLoadCategory 人员选择框事件：加载分类前执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 See 组件事件说明 "},"MWF.xApplication.process.Xform.Radio.html":{"id":"MWF.xApplication.process.Xform.Radio.html","url":"MWF.xApplication.process.Xform.Radio.html","title":"Radio","kind":"Class","body":" Class Radio Radio --> Extends MWF.xApplication.process.Xform.$Input Radio 单选按钮。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Radio.js, line 22 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 刷新选择项，如果选择项是脚本，重新计算。 Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Radio.js, line 125 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Radio.js, line 138 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Radio.js, line 155 getTextData() &rarr; {Object} Summary 获取选中项的value和text。 Returns Object 返回选中项的value和text，如： {'value': ['male'], 'text': ['男']} {'value': [''], 'text': ['']} Example var data = this.form.get('fieldId').getTextData(); var text = data.text[0] //获取选中项的文本 Source x_component_process_Xform/Radio.js, line 358 getSelectedInput() &rarr; {Element} Summary 获取选中的Dom对象。 Returns Element 返回选中的Dom对象 Example var input = this.form.get('fieldId').getSelectedInput(); Source x_component_process_Xform/Radio.js, line 402 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Radio Radio --> Extends MWF.xApplication.process.Xform.$Input Radio 单选按钮。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Radio.js, line 22 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 刷新选择项，如果选择项是脚本，重新计算。 Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Radio.js, line 125 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Radio.js, line 138 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Radio.js, line 155 getTextData() &rarr; {Object} Summary 获取选中项的value和text。 Returns Object 返回选中项的value和text，如： {'value': ['male'], 'text': ['男']} {'value': [''], 'text': ['']} Example var data = this.form.get('fieldId').getTextData(); var text = data.text[0] //获取选中项的文本 Source x_component_process_Xform/Radio.js, line 358 getSelectedInput() &rarr; {Element} Summary 获取选中的Dom对象。 Returns Element 返回选中的Dom对象 Example var input = this.form.get('fieldId').getSelectedInput(); Source x_component_process_Xform/Radio.js, line 402 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.ReadLog.html":{"id":"MWF.xApplication.process.Xform.ReadLog.html","url":"MWF.xApplication.process.Xform.ReadLog.html","title":"ReadLog","kind":"Class","body":" Class ReadLog ReadLog --> Extends MWF.xApplication.process.Xform.$Module ReadLog 阅读记录组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/ReadLog.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active() 激活阅读记录。设置了延迟加载的时候，可以通过这个方法来激活 Example this.form.get('fieldId').active(); Source x_component_process_Xform/ReadLog.js, line 56 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class ReadLog ReadLog --> Extends MWF.xApplication.process.Xform.$Module ReadLog 阅读记录组件。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/ReadLog.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active() 激活阅读记录。设置了延迟加载的时候，可以通过这个方法来激活 Example this.form.get('fieldId').active(); Source x_component_process_Xform/ReadLog.js, line 56 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Select.html":{"id":"MWF.xApplication.process.Xform.Select.html","url":"MWF.xApplication.process.Xform.Select.html","title":"Select","kind":"Class","body":" Class Select Select --> Extends MWF.xApplication.process.Xform.$Input Select 下拉选择组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Select.js, line 21 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Input#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Input#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 刷新选择项，如果选择项是脚本，重新计算。 Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Select.js, line 157 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Select.js, line 171 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Select.js, line 188 getTextData() &rarr; {Object} Summary 获取选中项的value和text。 Returns Object 返回选中项的value和text，如： {'value': ['male'], 'text': ['男']} {'value': [''], 'text': ['']} Example var data = this.form.get('fieldId').getTextData(); var text = data.text[0] //获取选中项的文本 Source x_component_process_Xform/Select.js, line 377 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Select Select --> Extends MWF.xApplication.process.Xform.$Input Select 下拉选择组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Select.js, line 21 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Overrides MWF.xApplication.process.Xform.$Input#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Overrides MWF.xApplication.process.Xform.$Input#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Overrides MWF.xApplication.process.Xform.$Input#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods resetOption() Summary 刷新选择项，如果选择项是脚本，重新计算。 Example this.form.get('fieldId').resetOption(); Source x_component_process_Xform/Select.js, line 157 getOptions() &rarr; {Array} Summary 获取选择项。 Returns Array 返回选择项数组，如果使用选择项脚本，根据脚本返回决定，如：[ &quot;女|female&quot;, &quot;男|male&quot; ] Example this.form.get('fieldId').getOptions(); Source x_component_process_Xform/Select.js, line 171 getOptionsObj() &rarr; {Object} Summary 获取整理后的选择项。 Returns Object 返回整理后的选择项，如： {'valueList': ['','female','male'], 'textList': ['','女','男']} Example var optionData = this.form.get('fieldId').getOptionsObj(); Source x_component_process_Xform/Select.js, line 188 getTextData() &rarr; {Object} Summary 获取选中项的value和text。 Returns Object 返回选中项的value和text，如： {'value': ['male'], 'text': ['男']} {'value': [''], 'text': ['']} Example var data = this.form.get('fieldId').getTextData(); var text = data.text[0] //获取选中项的文本 Source x_component_process_Xform/Select.js, line 377 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Overrides MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Overrides MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Sidebar.html":{"id":"MWF.xApplication.process.Xform.Sidebar.html","url":"MWF.xApplication.process.Xform.Sidebar.html","title":"Sidebar","kind":"Class","body":" Class Sidebar Sidebar --> Extends MWF.xApplication.process.Xform.$Module Sidebar 侧边操作条。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var sidebar = this.form.get('fieldId'); //获取侧边操作条 //方法2 var sidebar = this.target; //在侧边操作条和操作本身的事件脚本中获取 Source x_component_process_Xform/Sidebar.js, line 15 Members toolbarWidgeto2.widget.Toolbar Toolbar组件，平台使用该组件生成操作条。 Type o2.widget.Toolbar Example //可以在脚本中获取该组件 var toolbarWidget = this.form.get('fieldId').toolbarWidget; //获取组件对象 Source x_component_process_Xform/Sidebar.js, line 68 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Sidebar Sidebar --> Extends MWF.xApplication.process.Xform.$Module Sidebar 侧边操作条。 Usable Range Process Example //可以在脚本中获取该组件 //方法1： var sidebar = this.form.get('fieldId'); //获取侧边操作条 //方法2 var sidebar = this.target; //在侧边操作条和操作本身的事件脚本中获取 Source x_component_process_Xform/Sidebar.js, line 15 Members toolbarWidgeto2.widget.Toolbar Toolbar组件，平台使用该组件生成操作条。 Type o2.widget.Toolbar Example //可以在脚本中获取该组件 var toolbarWidget = this.form.get('fieldId').toolbarWidget; //获取组件对象 Source x_component_process_Xform/Sidebar.js, line 68 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Source.html":{"id":"MWF.xApplication.process.Xform.Source.html","url":"MWF.xApplication.process.Xform.Source.html","title":"Source","kind":"Class","body":" Class Source Source --> Extends MWF.xApplication.process.Xform.Div Source 数据源组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var source = this.form.get('fieldId'); //获取数据源组件 //方法2 var source = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Source.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods setParameters(url参数) Summary 替换全部的url参数，但不刷新组件 Parameters url参数 Object Example //如，原来的组件url参数为： { 'page' : 1, 'count' : 10 } this.form.get('fieldId').setParameters({'id':'662ede34-4e21-428a-9c3b-f1bf14d15650'}); //执行后变为 {'id':'662ede34-4e21-428a-9c3b-f1bf14d15650'} Source x_component_process_Xform/Source.js, line 132 addParameters(url参数) Summary 新增url参数，但不刷新组件。如果该参数key已经存在，则覆盖 Parameters url参数 Object Example * //如，原来的组件url参数为： { 'page' : 1, 'count' : 10 } this.form.get('fieldId').addParameters({ 'page' : 2, 'id':'662ede34-4e21-428a-9c3b-f1bf14d15650' }); //执行后变为 { 'page' : 2, 'count' : 10 'id':'662ede34-4e21-428a-9c3b-f1bf14d15650' } Source x_component_process_Xform/Source.js, line 156 reload(notInit, callback) Summary 重新加载组件。会触发loadData事件 Parameters notInit Boolean false表示不重新初始化子数据源和数据文本，true表示重新初始化，默认为false callback function 加载完成后的回调 Example this.form.get('fieldId').reload(); //重新加载组件 Source x_component_process_Xform/Source.js, line 171 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后执行，但这时还未加载下属组件，可以可以使用this.target.data获取数据进行修改。 See 组件事件说明 loadData 加载数据、下属组件后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Source Source --> Extends MWF.xApplication.process.Xform.Div Source 数据源组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var source = this.form.get('fieldId'); //获取数据源组件 //方法2 var source = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Source.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods setParameters(url参数) Summary 替换全部的url参数，但不刷新组件 Parameters url参数 Object Example //如，原来的组件url参数为： { 'page' : 1, 'count' : 10 } this.form.get('fieldId').setParameters({'id':'662ede34-4e21-428a-9c3b-f1bf14d15650'}); //执行后变为 {'id':'662ede34-4e21-428a-9c3b-f1bf14d15650'} Source x_component_process_Xform/Source.js, line 132 addParameters(url参数) Summary 新增url参数，但不刷新组件。如果该参数key已经存在，则覆盖 Parameters url参数 Object Example * //如，原来的组件url参数为： { 'page' : 1, 'count' : 10 } this.form.get('fieldId').addParameters({ 'page' : 2, 'id':'662ede34-4e21-428a-9c3b-f1bf14d15650' }); //执行后变为 { 'page' : 2, 'count' : 10 'id':'662ede34-4e21-428a-9c3b-f1bf14d15650' } Source x_component_process_Xform/Source.js, line 156 reload(notInit, callback) Summary 重新加载组件。会触发loadData事件 Parameters notInit Boolean false表示不重新初始化子数据源和数据文本，true表示重新初始化，默认为false callback function 加载完成后的回调 Example this.form.get('fieldId').reload(); //重新加载组件 Source x_component_process_Xform/Source.js, line 171 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后执行，但这时还未加载下属组件，可以可以使用this.target.data获取数据进行修改。 See 组件事件说明 loadData 加载数据、下属组件后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.SourceText.html":{"id":"MWF.xApplication.process.Xform.SourceText.html","url":"MWF.xApplication.process.Xform.SourceText.html","title":"SourceText","kind":"Class","body":" Class SourceText SourceText --> Extends MWF.xApplication.process.Xform.$Module SourceText 数据文本组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var sourceText = this.form.get('fieldId'); //获取组件 //方法2 var sourceText = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/SourceText.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class SourceText SourceText --> Extends MWF.xApplication.process.Xform.$Module SourceText 数据文本组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var sourceText = this.form.get('fieldId'); //获取组件 //方法2 var sourceText = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/SourceText.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Stat.html":{"id":"MWF.xApplication.process.Xform.Stat.html","url":"MWF.xApplication.process.Xform.Stat.html","title":"Stat","kind":"Class","body":" Class Stat Stat --> Extends MWF.xApplication.process.Xform.$Module Stat 统计组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var stat = this.form.get('fieldId'); //获取组件 //方法2 var stat = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Stat.js, line 16 Members statMWF.xApplication.query.Query.Statistician Statistician组件，平台使用该组件执行统计的逻辑 Type MWF.xApplication.query.Query.Statistician Example //可以在脚本中获取该组件 var field = this.form.get('fieldId').stat; //获取组件对象 Source x_component_process_Xform/Stat.js, line 60 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getData() &rarr; {Ojbect|Boolean} Summary 获取统计数据。 Returns Ojbect 统计数据. Boolean 是否通过校验 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Stat.js, line 76 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadStat 组件异步加载完成触发. See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Stat Stat --> Extends MWF.xApplication.process.Xform.$Module Stat 统计组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var stat = this.form.get('fieldId'); //获取组件 //方法2 var stat = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Stat.js, line 16 Members statMWF.xApplication.query.Query.Statistician Statistician组件，平台使用该组件执行统计的逻辑 Type MWF.xApplication.query.Query.Statistician Example //可以在脚本中获取该组件 var field = this.form.get('fieldId').stat; //获取组件对象 Source x_component_process_Xform/Stat.js, line 60 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods getData() &rarr; {Ojbect|Boolean} Summary 获取统计数据。 Returns Ojbect 统计数据. Boolean 是否通过校验 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Stat.js, line 76 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadStat 组件异步加载完成触发. See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Statement.html":{"id":"MWF.xApplication.process.Xform.Statement.html","url":"MWF.xApplication.process.Xform.Statement.html","title":"Statement","kind":"Class","body":" Class Statement Statement --> Extends MWF.xApplication.process.Xform.$Module Statement 查询视图组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var statement = this.form.get('fieldId'); //获取组件 //方法2 var statement = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Statement.js, line 15 Members viewMWF.xApplication.query.Query.Statement Statement组件，平台使用该组件实现查询视图的功能 Type MWF.xApplication.query.Query.Statement Example //可以在脚本中获取该组件 var view = this.form.get('fieldId').view; //获取组件对象 Source x_component_process_Xform/Statement.js, line 117 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载查询视图 Example this.form.get('fieldId').reload() Source x_component_process_Xform/Statement.js, line 57 active() Summary 当查询视图被设置为延迟加载（未立即载入），通过active方法激活 Example this.form.get('fieldId').active() Source x_component_process_Xform/Statement.js, line 70 getData() &rarr; {Array.&lt;Object>} Summary 获取查询视图被选中行的数据 Returns Array.&lt;Object> 被选中行的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Statement.js, line 143 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadView 异步加载查询视图后完成。 See 组件事件说明 select 选中查询视图中的一条记录后执行。 See 组件事件说明 openDocument 打开查询视图中的一条记录后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Statement Statement --> Extends MWF.xApplication.process.Xform.$Module Statement 查询视图组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var statement = this.form.get('fieldId'); //获取组件 //方法2 var statement = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Statement.js, line 15 Members viewMWF.xApplication.query.Query.Statement Statement组件，平台使用该组件实现查询视图的功能 Type MWF.xApplication.query.Query.Statement Example //可以在脚本中获取该组件 var view = this.form.get('fieldId').view; //获取组件对象 Source x_component_process_Xform/Statement.js, line 117 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载查询视图 Example this.form.get('fieldId').reload() Source x_component_process_Xform/Statement.js, line 57 active() Summary 当查询视图被设置为延迟加载（未立即载入），通过active方法激活 Example this.form.get('fieldId').active() Source x_component_process_Xform/Statement.js, line 70 getData() &rarr; {Array.&lt;Object>} Summary 获取查询视图被选中行的数据 Returns Array.&lt;Object> 被选中行的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/Statement.js, line 143 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events loadView 异步加载查询视图后完成。 See 组件事件说明 select 选中查询视图中的一条记录后执行。 See 组件事件说明 openDocument 打开查询视图中的一条记录后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.View.html":{"id":"MWF.xApplication.process.Xform.View.html","url":"MWF.xApplication.process.Xform.View.html","title":"View","kind":"Class","body":" Class View View --> Extends MWF.xApplication.process.Xform.$Module View 视图组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var view = this.form.get('fieldId'); //获取组件 //方法2 var view = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/View.js, line 15 Members viewMWF.xApplication.process.Application.Viewer view组件，平台使用该组件实现视图的功能 Type MWF.xApplication.process.Application.Viewer Example //可以在脚本中获取该组件 var view = this.form.get('fieldId').view; //获取组件对象 Source x_component_process_Xform/View.js, line 196 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载视图 Example this.form.get('fieldId').reload() Source x_component_process_Xform/View.js, line 65 active() Summary 当视图被设置为延迟加载（未立即载入），通过active方法激活 Example this.form.get('fieldId').active() Source x_component_process_Xform/View.js, line 78 getData() &rarr; {Array.&lt;Object>} Summary 获取视图被选中行的数据 Returns Array.&lt;Object> 被选中行的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/View.js, line 215 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events beforeLoadView 视图参数（options）已经准备好，还未加载视图时执行。可以通过this.event得到视图参数，并可修改this.event修改视图的加载。 See 组件事件说明 beforeLoadView 视图参数（options）已经准备好，还未加载视图时执行。可以通过this.event得到视图参数，并可修改this.event修改视图的加载。 See 组件事件说明 loadView 异步加载视图后完成。 See 组件事件说明 select 选中视图中的一条记录后执行。 See 组件事件说明 openDocument 打开视图中的一条记录后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class View View --> Extends MWF.xApplication.process.Xform.$Module View 视图组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var view = this.form.get('fieldId'); //获取组件 //方法2 var view = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/View.js, line 15 Members viewMWF.xApplication.process.Application.Viewer view组件，平台使用该组件实现视图的功能 Type MWF.xApplication.process.Application.Viewer Example //可以在脚本中获取该组件 var view = this.form.get('fieldId').view; //获取组件对象 Source x_component_process_Xform/View.js, line 196 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载视图 Example this.form.get('fieldId').reload() Source x_component_process_Xform/View.js, line 65 active() Summary 当视图被设置为延迟加载（未立即载入），通过active方法激活 Example this.form.get('fieldId').active() Source x_component_process_Xform/View.js, line 78 getData() &rarr; {Array.&lt;Object>} Summary 获取视图被选中行的数据 Returns Array.&lt;Object> 被选中行的数据 Example var data = this.form.get('fieldId').getData(); Source x_component_process_Xform/View.js, line 215 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events beforeLoadView 视图参数（options）已经准备好，还未加载视图时执行。可以通过this.event得到视图参数，并可修改this.event修改视图的加载。 See 组件事件说明 beforeLoadView 视图参数（options）已经准备好，还未加载视图时执行。可以通过this.event得到视图参数，并可修改this.event修改视图的加载。 See 组件事件说明 loadView 异步加载视图后完成。 See 组件事件说明 select 选中视图中的一条记录后执行。 See 组件事件说明 openDocument 打开视图中的一条记录后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.StatementSelector.html":{"id":"MWF.xApplication.process.Xform.StatementSelector.html","url":"MWF.xApplication.process.Xform.StatementSelector.html","title":"StatementSelector","kind":"Class","body":" Class StatementSelector StatementSelector --> Extends MWF.xApplication.process.Xform.ViewSelector StatementSelector 查询视图选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var statementSelector = this.form.get('fieldId'); //获取组件 //方法2 var statementSelector = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/StatementSelector.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class StatementSelector StatementSelector --> Extends MWF.xApplication.process.Xform.ViewSelector StatementSelector 查询视图选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var statementSelector = this.form.get('fieldId'); //获取组件 //方法2 var statementSelector = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/StatementSelector.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.SubSource.html":{"id":"MWF.xApplication.process.Xform.SubSource.html","url":"MWF.xApplication.process.Xform.SubSource.html","title":"SubSource","kind":"Class","body":" Class SubSource SubSource --> Extends MWF.xApplication.process.Xform.$Module SubSource 子数据源。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var subSource = this.form.get('fieldId'); //获取组件 //方法2 var subSource = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/SubSource.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后执行，但这时还未加载下属组件，可以可以使用this.target.data获取数据进行修改。 See 组件事件说明 loadData 加载数据、下属组件后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class SubSource SubSource --> Extends MWF.xApplication.process.Xform.$Module SubSource 子数据源。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var subSource = this.form.get('fieldId'); //获取组件 //方法2 var subSource = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/SubSource.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events postLoadData 加载数据后执行，但这时还未加载下属组件，可以可以使用this.target.data获取数据进行修改。 See 组件事件说明 loadData 加载数据、下属组件后执行。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Subform.html":{"id":"MWF.xApplication.process.Xform.Subform.html","url":"MWF.xApplication.process.Xform.Subform.html","title":"Subform","kind":"Class","body":" Class Subform Subform --> Extends MWF.xApplication.process.Xform.$Module Subform 子表单组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var subform = this.form.get('fieldId'); //获取组件 //方法2 var subform = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Subform.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active(callback) Summary 当子表单被设置为延迟加载，通过active方法激活 Parameters callback function Example var subform = this.form.get('fieldId'); subform.active(function(){ //do someting }) Source x_component_process_Xform/Subform.js, line 49 reload(callback) Summary 重新加载子表单 Parameters callback function Example this.form.get('fieldId').reload(function(){ //do someting }) Source x_component_process_Xform/Subform.js, line 64 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Subform Subform --> Extends MWF.xApplication.process.Xform.$Module Subform 子表单组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var subform = this.form.get('fieldId'); //获取组件 //方法2 var subform = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Subform.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods active(callback) Summary 当子表单被设置为延迟加载，通过active方法激活 Parameters callback function Example var subform = this.form.get('fieldId'); subform.active(function(){ //do someting }) Source x_component_process_Xform/Subform.js, line 49 reload(callback) Summary 重新加载子表单 Parameters callback function Example this.form.get('fieldId').reload(function(){ //do someting }) Source x_component_process_Xform/Subform.js, line 64 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Tab.html":{"id":"MWF.xApplication.process.Xform.Tab.html","url":"MWF.xApplication.process.Xform.Tab.html","title":"Tab","kind":"Class","body":" Class Tab Tab --> Extends MWF.xApplication.process.Xform.$Module Tab 分页组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var tab = this.form.get('fieldId'); //获取组件 //方法2 var tab = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Tab.js, line 15 Members tabMWF.widget.Tab tab组件，平台使用该组件实现分页组件的功能 Type MWF.widget.Tab Example //可以在脚本中获取该组件 var tab = this.form.get('fieldId').tab; //获取组件对象 var pages = tab.pages //获取每个分页 pages[1].addEvent('queryShow', function(){ //添加显示分页前事件 }) pages[1].addEvent('postShow', function(){ //添加显示分页后事件 }) pages[1]._showTab(); //显示第2个分页 Source x_component_process_Xform/Tab.js, line 42 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Tab Tab --> Extends MWF.xApplication.process.Xform.$Module Tab 分页组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var tab = this.form.get('fieldId'); //获取组件 //方法2 var tab = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Tab.js, line 15 Members tabMWF.widget.Tab tab组件，平台使用该组件实现分页组件的功能 Type MWF.widget.Tab Example //可以在脚本中获取该组件 var tab = this.form.get('fieldId').tab; //获取组件对象 var pages = tab.pages //获取每个分页 pages[1].addEvent('queryShow', function(){ //添加显示分页前事件 }) pages[1].addEvent('postShow', function(){ //添加显示分页后事件 }) pages[1]._showTab(); //显示第2个分页 Source x_component_process_Xform/Tab.js, line 42 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Table.html":{"id":"MWF.xApplication.process.Xform.Table.html","url":"MWF.xApplication.process.Xform.Table.html","title":"Table","kind":"Class","body":" Class Table Table --> Extends MWF.xApplication.process.Xform.$Module Table 表格组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var table = this.form.get('fieldId'); //获取组件 //方法2 var table = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Table.js, line 14 Members tableElement table，DOM对象 Type Element Example //可以在脚本中获取该组件 var table = this.form.get('fieldId').table; //获取组件对象 Source x_component_process_Xform/Table.js, line 19 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Table Table --> Extends MWF.xApplication.process.Xform.$Module Table 表格组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var table = this.form.get('fieldId'); //获取组件 //方法2 var table = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Table.js, line 14 Members tableElement table，DOM对象 Type Element Example //可以在脚本中获取该组件 var table = this.form.get('fieldId').table; //获取组件对象 Source x_component_process_Xform/Table.js, line 19 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Table$Td.html":{"id":"MWF.xApplication.process.Xform.Table$Td.html","url":"MWF.xApplication.process.Xform.Table$Td.html","title":"Table$Td","kind":"Class","body":" Class Table$Td Table$Td --> Extends MWF.xApplication.process.Xform.$Module Table$Td 单元格组件。 Example //可以在脚本中获取该组件 //方法1： var td = this.form.get('fieldId'); //获取组件 //方法2 var td = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Table.js, line 116 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Table$Td Table$Td --> Extends MWF.xApplication.process.Xform.$Module Table$Td 单元格组件。 Example //可以在脚本中获取该组件 //方法1： var td = this.form.get('fieldId'); //获取组件 //方法2 var td = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Table.js, line 116 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Textarea.html":{"id":"MWF.xApplication.process.Xform.Textarea.html","url":"MWF.xApplication.process.Xform.Textarea.html","title":"Textarea","kind":"Class","body":" Class Textarea Textarea --> Extends MWF.xApplication.process.Xform.$Input Textarea 多行文本组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Textarea.js, line 21 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Textarea Textarea --> Extends MWF.xApplication.process.Xform.$Input Textarea 多行文本组件。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Textarea.js, line 21 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Textfield.html":{"id":"MWF.xApplication.process.Xform.Textfield.html","url":"MWF.xApplication.process.Xform.Textfield.html","title":"Textfield","kind":"Class","body":" Class Textfield Textfield --> Extends MWF.xApplication.process.Xform.$Input Textfield 文本输入框。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Textfield.js, line 21 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Textfield Textfield --> Extends MWF.xApplication.process.Xform.$Input Textfield 文本输入框。 Usable Range Process CMS Portal Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_process_Xform/Textfield.js, line 21 Members descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Tree.html":{"id":"MWF.xApplication.process.Xform.Tree.html","url":"MWF.xApplication.process.Xform.Tree.html","title":"Tree","kind":"Class","body":" Class Tree Tree --> Extends MWF.xApplication.process.Xform.$Module Tree 树组件。 Usable Range Process CMS Portal See 树组件数据结构 Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Tree.js, line 42 Members treeo2.widget.Tree 树组件，平台使用该组件实现树的功能，该组件为异步加载 Type o2.widget.Tree Example //可以在脚本中获取该组件 var tree = this.form.get('fieldId').tree; //获取组件对象 var children = tree.children[]; //获取第一层树叶 tree.reLoad( json ); //给整颗树重新赋数据，并重新加载 Source x_component_process_Xform/Tree.js, line 125 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events beforeLoadTree 异步加载树前执行。this.target指向当前组件。 See 组件事件说明 afterLoadTree 异步加载树后执行。this.target指向当前组件。 See 组件事件说明 beforeLoadTreeNode 加载树的叶子前执行。this.target指向加载的叶子。 See 组件事件说明 afterLoadTreeNode 加载树的叶子后执行。this.target指向加载的叶子。 See 组件事件说明 expand 加载树的叶子后执行。this.target指向加载的叶子。 See 组件事件说明 collapse 折叠节点的时候执行。this.target指向被折叠的节点。 See 组件事件说明 beforeSelect 选中节点前执行。此时原来被选中的节点还未取消。this.target指向选中的节点。 See 组件事件说明 afterSelect 选中节点后执行。this.target指向选中的节点。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Tree Tree --> Extends MWF.xApplication.process.Xform.$Module Tree 树组件。 Usable Range Process CMS Portal See 树组件数据结构 Example //可以在脚本中获取该组件 //方法1： var datagrid = this.form.get('name'); //获取组件 //方法2 var datagrid = this.target; //在组件事件脚本中获取 Source x_component_process_Xform/Tree.js, line 42 Members treeo2.widget.Tree 树组件，平台使用该组件实现树的功能，该组件为异步加载 Type o2.widget.Tree Example //可以在脚本中获取该组件 var tree = this.form.get('fieldId').tree; //获取组件对象 var children = tree.children[]; //获取第一层树叶 tree.reLoad( json ); //给整颗树重新赋数据，并重新加载 Source x_component_process_Xform/Tree.js, line 125 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events beforeLoadTree 异步加载树前执行。this.target指向当前组件。 See 组件事件说明 afterLoadTree 异步加载树后执行。this.target指向当前组件。 See 组件事件说明 beforeLoadTreeNode 加载树的叶子前执行。this.target指向加载的叶子。 See 组件事件说明 afterLoadTreeNode 加载树的叶子后执行。this.target指向加载的叶子。 See 组件事件说明 expand 加载树的叶子后执行。this.target指向加载的叶子。 See 组件事件说明 collapse 折叠节点的时候执行。this.target指向被折叠的节点。 See 组件事件说明 beforeSelect 选中节点前执行。此时原来被选中的节点还未取消。this.target指向选中的节点。 See 组件事件说明 afterSelect 选中节点后执行。this.target指向选中的节点。 See 组件事件说明 queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.ViewSelector.html":{"id":"MWF.xApplication.process.Xform.ViewSelector.html","url":"MWF.xApplication.process.Xform.ViewSelector.html","title":"ViewSelector","kind":"Class","body":" Class ViewSelector ViewSelector --> Extends MWF.xApplication.process.Xform.Button ViewSelector 视图选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var sourceText = this.form.get('fieldId'); //获取组件 //方法2 var sourceText = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/ViewSelector.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class ViewSelector ViewSelector --> Extends MWF.xApplication.process.Xform.Button ViewSelector 视图选择组件。 Usable Range Process CMS Example //可以在脚本中获取该组件 //方法1： var sourceText = this.form.get('fieldId'); //获取组件 //方法2 var sourceText = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/ViewSelector.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.process.Xform.Widget.html":{"id":"MWF.xApplication.process.Xform.Widget.html","url":"MWF.xApplication.process.Xform.Widget.html","title":"Widget","kind":"Class","body":" Class Widget Widget --> Extends MWF.xApplication.process.Xform.$Module Widget 门户的部件组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var widget = this.form.get('fieldId'); //获取组件 //方法2 var widget = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Widget.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载部件 Example this.form.get('fieldId').reload() Source x_component_process_Xform/Widget.js, line 34 getPageParamenters() Summary 获取设计部件时设置的参数 Returns 设置的参数 Example var param = this.form.get('fieldId').getPageParamenters() Source x_component_process_Xform/Widget.js, line 239 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Widget Widget --> Extends MWF.xApplication.process.Xform.$Module Widget 门户的部件组件。 Usable Range Portal Example //可以在脚本中获取该组件 //方法1： var widget = this.form.get('fieldId'); //获取组件 //方法2 var widget = this.target; //在组件本身的脚本中获取 Source x_component_process_Xform/Widget.js, line 14 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods reload() Summary 重新加载部件 Example this.form.get('fieldId').reload() Source x_component_process_Xform/Widget.js, line 34 getPageParamenters() Summary 获取设计部件时设置的参数 Returns 设置的参数 Example var param = this.form.get('fieldId').getPageParamenters() Source x_component_process_Xform/Widget.js, line 239 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.cms.Xform.Author.html":{"id":"MWF.xApplication.cms.Xform.Author.html","url":"MWF.xApplication.cms.Xform.Author.html","title":"Author","kind":"Class","body":" Class Author Author --> Extends MWF.xApplication.process.Xform.Org Author 作者组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_cms_Xform/Author.js, line 21 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Inherited From MWF.xApplication.process.Xform.Org#selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Inherited From MWF.xApplication.process.Xform.Org#clickSelect Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.Org#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.Org#event:postLoad See 组件事件说明 change 当组件值改变时触发。 Inherited From MWF.xApplication.process.Xform.Org#event:change See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 Inherited From MWF.xApplication.process.Xform.Org#event:select See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadSelector See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadSelector See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 Overrides MWF.xApplication.process.Xform.Org#event:queryLoadCategory See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadContent See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadCategory See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectCategory See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectCategory See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:expand See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:collapse See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadItem See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadItem See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectItem See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectItem See 组件事件说明 Class Author Author --> Extends MWF.xApplication.process.Xform.Org Author 作者组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_cms_Xform/Author.js, line 21 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Inherited From MWF.xApplication.process.Xform.Org#selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Inherited From MWF.xApplication.process.Xform.Org#clickSelect Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.Org#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.Org#event:postLoad See 组件事件说明 change 当组件值改变时触发。 Inherited From MWF.xApplication.process.Xform.Org#event:change See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 Inherited From MWF.xApplication.process.Xform.Org#event:select See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadSelector See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadSelector See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 Overrides MWF.xApplication.process.Xform.Org#event:queryLoadCategory See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadContent See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadCategory See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectCategory See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectCategory See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:expand See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:collapse See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadItem See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadItem See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectItem See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectItem See 组件事件说明 "},"MWF.xApplication.cms.Xform.Comment.html":{"id":"MWF.xApplication.cms.Xform.Comment.html","url":"MWF.xApplication.cms.Xform.Comment.html","title":"Comment","kind":"Class","body":" Class Comment Comment --> Extends MWF.xApplication.process.Xform.$Module Comment 评论组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var comment = this.form.get('name'); //获取组件 //方法2 var comment = this.target; //在组件事件脚本中获取 Source x_component_cms_Xform/Comment.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class Comment Comment --> Extends MWF.xApplication.process.Xform.$Module Comment 评论组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var comment = this.form.get('name'); //获取组件 //方法2 var comment = this.target; //在组件事件脚本中获取 Source x_component_cms_Xform/Comment.js, line 15 Members nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"CMSForm.html":{"id":"CMSForm.html","url":"CMSForm.html","title":"CMSForm","kind":"Class","body":" Class CMSForm CMSForm --> CMSForm 内容管理表单。 Usable Range CMS Example //可以在脚本中获取表单 //方法1： var form = this.form.getApp().appForm; //获取表单 //方法2 var form = this.target; //在表单本身的事件脚本中获取 Source x_component_cms_Xform/Form.js, line 24 Members containerElement 表单容器 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_cms_Xform/Form.js, line 149 jsonObject 表单的配置信息，比如表单名称等等. Type Object Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_cms_Xform/Form.js, line 161 modulesArray 表单中的所有组件数组. Type Array Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_cms_Xform/Form.js, line 185 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_cms_Xform/Form.js, line 197 Methods static getData() &rarr; {Object} Summary 获取表单的所有数据. Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_cms_Xform/Form.js, line 130 static deleteDocument() Summary 弹出删除文档确认框. Example this.form.getApp().appForm.deleteDocument(); Source x_component_cms_Xform/Form.js, line 778 static editDocument() Summary 编辑文档. Example this.form.getApp().appForm.editDocument(); Source x_component_cms_Xform/Form.js, line 823 static editDocumentForMobile() Summary 移动端开启编辑模式. Example this.form.getApp().appForm.editDocumentForMobile(); Source x_component_cms_Xform/Form.js, line 855 static setPopularDocument() Summary 弹出设置热点的界面. Example this.form.getApp().appForm.setPopularDocument(); Source x_component_cms_Xform/Form.js, line 869 static uploadedAttachment(site, id) Summary 将新上传的附件在指定的附件组件中展现. Parameters site String 附件组件的标识 id String 新上传的附件id Example this.form.getApp().appForm.uploadedAttachment(site, id); Source x_component_cms_Xform/Form.js, line 900 Events queryLoad 表单加载前触发。表单html已经就位。 See 组件事件说明 beforeLoad 表单加载前触发。数据(businessData)已经就绪。 See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 See 组件事件说明 postLoad 表单加载后触发。 See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。 See 组件事件说明 afterLoad 表单加载后触发。 See 组件事件说明 beforeSave 保存前触发。 See 组件事件说明 afterSave 数据已经整理完成，但还未保存到后台时触发。this.event指向整理完成的数据 See 组件事件说明 afterSave 数据保存到后台后触发。 See 组件事件说明 beforeClose 关闭前触发。 See 组件事件说明 beforePublish 发布前触发。 See 组件事件说明 postPublish 数据已经整理完成，但还未调用服务发布触发。this.event指向整理完成的数据 See 组件事件说明 afterPublish 执行后台服务发布后触发。 See 组件事件说明 beforeDelete 删除前触发。 See 组件事件说明 afterDelete 删除后触发。 See 组件事件说明 Class CMSForm CMSForm --> CMSForm 内容管理表单。 Usable Range CMS Example //可以在脚本中获取表单 //方法1： var form = this.form.getApp().appForm; //获取表单 //方法2 var form = this.target; //在表单本身的事件脚本中获取 Source x_component_cms_Xform/Form.js, line 24 Members containerElement 表单容器 Type Element See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取表单容器 var formContainer = this.form.getApp().appForm.container; Source x_component_cms_Xform/Form.js, line 149 jsonObject 表单的配置信息，比如表单名称等等. Type Object Example //可以在脚本中获取表单配置信息 var json = this.form.getApp().appForm.json; //表单配置信息 var name = json.name; //表单名称 Source x_component_cms_Xform/Form.js, line 161 modulesArray 表单中的所有组件数组. Type Array Example //下面的样例对表单组件进行循环，并且判断是输入类型的组件 var modules = this.form.getApp().appForm.modules; //获取所有表单组件 for( var i=0; i&lt;modules.length; i++ ){ //循环处理组件 //获取组件的类型 var moduleName = module.json.moduleName; if( !moduleName ){ moduleName = typeOf(module.json.type) === 'string' ? module.json.type.toLowerCase() : ''; } if( ['calendar','combox','number','textfield'].contains( moduleName )){ //输入类型框 //do something } } Source x_component_cms_Xform/Form.js, line 185 allObject 表单中的所有组件对象. 该对象的key是组件标识，value是组件对象，可以使用该对象根据组件标识获取组件。 需要注意的是，在子表单中嵌入不绑定数据的组件（比如div,common,button等等），系统允许重名。 在打开表单的时候，系统会根据重名情况，自动在组件的标识后跟上 &quot;_1&quot;, &quot;_2&quot;。 Type Object Example var moduleAll = this.form.getApp().appForm.all; //获取组件对象 var subjectField = moduleAll['subject'] //获取名称为subject的组件 Source x_component_cms_Xform/Form.js, line 197 Methods static getData() &rarr; {Object} Summary 获取表单的所有数据. Returns Object Example var data = this.form.getApp().appForm.getData(); Source x_component_cms_Xform/Form.js, line 130 static deleteDocument() Summary 弹出删除文档确认框. Example this.form.getApp().appForm.deleteDocument(); Source x_component_cms_Xform/Form.js, line 778 static editDocument() Summary 编辑文档. Example this.form.getApp().appForm.editDocument(); Source x_component_cms_Xform/Form.js, line 823 static editDocumentForMobile() Summary 移动端开启编辑模式. Example this.form.getApp().appForm.editDocumentForMobile(); Source x_component_cms_Xform/Form.js, line 855 static setPopularDocument() Summary 弹出设置热点的界面. Example this.form.getApp().appForm.setPopularDocument(); Source x_component_cms_Xform/Form.js, line 869 static uploadedAttachment(site, id) Summary 将新上传的附件在指定的附件组件中展现. Parameters site String 附件组件的标识 id String 新上传的附件id Example this.form.getApp().appForm.uploadedAttachment(site, id); Source x_component_cms_Xform/Form.js, line 900 Events queryLoad 表单加载前触发。表单html已经就位。 See 组件事件说明 beforeLoad 表单加载前触发。数据(businessData)已经就绪。 See 组件事件说明 beforeModulesLoad 表单的所有组件加载前触发，此时表单的样式和js head已经加载。 See 组件事件说明 postLoad 表单加载后触发。 See 组件事件说明 afterModulesLoad 表单的所有组件加载后触发。 See 组件事件说明 afterLoad 表单加载后触发。 See 组件事件说明 beforeSave 保存前触发。 See 组件事件说明 afterSave 数据已经整理完成，但还未保存到后台时触发。this.event指向整理完成的数据 See 组件事件说明 afterSave 数据保存到后台后触发。 See 组件事件说明 beforeClose 关闭前触发。 See 组件事件说明 beforePublish 发布前触发。 See 组件事件说明 postPublish 数据已经整理完成，但还未调用服务发布触发。this.event指向整理完成的数据 See 组件事件说明 afterPublish 执行后台服务发布后触发。 See 组件事件说明 beforeDelete 删除前触发。 See 组件事件说明 afterDelete 删除后触发。 See 组件事件说明 "},"CMSLog.html":{"id":"CMSLog.html","url":"CMSLog.html","title":"CMSLog","kind":"Class","body":" Class CMSLog CMSLog --> Extends MWF.xApplication.process.Xform.$Module CMSLog 文档查看日志组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_cms_Xform/Log.js, line 16 Members logMWF.xApplication.cms.Xform.widget.Log log组件使用this.log实现功能 Type MWF.xApplication.cms.Xform.widget.Log Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 var items = field.log.items; //获取日志的行对象 Source x_component_cms_Xform/Log.js, line 31 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 Class CMSLog CMSLog --> Extends MWF.xApplication.process.Xform.$Module CMSLog 文档查看日志组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var log = this.form.get('name'); //获取组件 //方法2 var log = this.target; //在组件事件脚本中获取 Source x_component_cms_Xform/Log.js, line 16 Members logMWF.xApplication.cms.Xform.widget.Log log组件使用this.log实现功能 Type MWF.xApplication.cms.Xform.widget.Log Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 var items = field.log.items; //获取日志的行对象 Source x_component_cms_Xform/Log.js, line 31 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.$Module#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.$Module#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.$Module#event:postLoad See 组件事件说明 "},"MWF.xApplication.cms.Xform.Reader.html":{"id":"MWF.xApplication.cms.Xform.Reader.html","url":"MWF.xApplication.cms.Xform.Reader.html","title":"Reader","kind":"Class","body":" Class Reader Reader --> Extends MWF.xApplication.process.Xform.Org Reader 读者组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_cms_Xform/Reader.js, line 21 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Inherited From MWF.xApplication.process.Xform.Org#selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Inherited From MWF.xApplication.process.Xform.Org#clickSelect Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.Org#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.Org#event:postLoad See 组件事件说明 change 当组件值改变时触发。 Inherited From MWF.xApplication.process.Xform.Org#event:change See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 Inherited From MWF.xApplication.process.Xform.Org#event:select See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadSelector See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadSelector See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 Overrides MWF.xApplication.process.Xform.Org#event:queryLoadCategory See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadContent See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadCategory See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectCategory See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectCategory See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:expand See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:collapse See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadItem See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadItem See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectItem See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectItem See 组件事件说明 Class Reader Reader --> Extends MWF.xApplication.process.Xform.Org Reader 读者组件。 Usable Range CMS Example //可以在脚本中获取该组件 //方法1： var field = this.form.get('fieldId'); //获取组件对象 //方法2 var field = this.target; //在组件本身的脚本中获取，比如事件脚本、默认值脚本、校验脚本等等 var data = field.getData(); //获取值 field.setData('字符串值'); //设置值 field.hide(); //隐藏字段 var id = field.json.id; //获取字段标识 var flag = field.isEmpty(); //字段是否为空 field.resetData(); //重置字段的值为默认值或置空 Source x_component_cms_Xform/Reader.js, line 21 Members selectoro2.O2Selector 人员选择框package的对象 Type o2.O2Selector Inherited From MWF.xApplication.process.Xform.Org#selector Example //可以在脚本中获取该组件 var selector = this.form.get('fieldId').selector.selector; //获取人员选择框对象 var options = selector.options; //获取人员选择框的选项 Source x_component_process_Xform/Org.js, line 626 descriptionNodeElement 描述信息节点，允许用户手工输入的组件才有此节点，只读情况下无此节点. Type Element Inherited From MWF.xApplication.process.Xform.$Input#descriptionNode Source x_component_process_Xform/$Input.js, line 97 nodeElement 组件的节点，mootools封装过的Dom对象，可以直接使用原生的js和moootools方法访问和操作该对象。 Type Element Inherited From MWF.xApplication.process.Xform.$Module#node See https://mootools.net/core/docs/1.6.0/Element/Element Example //可以在脚本中获取该组件 var field = this.form.get('fieldId'); //获取组件对象 field.node.setStyle('font-size','12px'); //给节点设置样式 Source x_component_process_Xform/$Module.js, line 39 jsonJsonObject 组件的配置信息，比如id,类型,是否只读等等。可以在组件的queryLoad事件里修改该配置来对组件做一些改变。 Type JsonObject Inherited From MWF.xApplication.process.Xform.$Module#json Example //可以在脚本中获取该组件 var json = this.form.get('fieldId').json; //获取组件对象 var id = json.id; //获取组件的id var type = json.type; //获取组件的类型，如Textfield 为文本输入组件，Select为下拉组件 json.isReadonly = true; //设置组件为只读。 Source x_component_process_Xform/$Module.js, line 52 formMWF.xApplication.process.Xform.Form 组件的所在表单对象. Type MWF.xApplication.process.Xform.Form Inherited From MWF.xApplication.process.Xform.$Module#form Example var form = this.form.get('fieldId').form; //获取组件所在表单对象 var container = form.container; //获取表单容器 Source x_component_process_Xform/$Module.js, line 61 Methods clickSelect() Summary 弹出选择界面. Inherited From MWF.xApplication.process.Xform.Org#clickSelect Example this.form.get('org').clickSelect(); Source x_component_process_Xform/Org.js, line 609 isReadonly() &rarr; {Boolean} Summary 判断组件是否只读. Inherited From MWF.xApplication.process.Xform.$Input#isReadonly Returns Boolean 是否只读. Example var readonly = this.form.get('subject').isReadonly(); Source x_component_process_Xform/$Input.js, line 276 isEmpty() &rarr; {Boolean} Summary 判断组件值是否为空. Inherited From MWF.xApplication.process.Xform.$Input#isEmpty Returns Boolean 值是否为空. Example if( this.form.get('subject').isEmpty() ){ this.form.notice('标题不能为空', 'warn'); } Source x_component_process_Xform/$Input.js, line 294 getData() Summary 获取组件值。 Description 在脚本中使用 this.data[fieldId] 也可以获取组件值。 区别如下： 1、当使用Promise的时候 使用异步函数生成器（Promise）为组件赋值的时候，用getData方法立即获取数据，可能返回修改前的值，当Promise执行完成以后，会返回修改后的值。 this.data[fieldId] 立即获取数据，可能获取到异步函数生成器，当Promise执行完成以后，会返回修改后的值。 具体差异请查看链接 2、当表单上没有对应组件的时候，可以使用this.data[fieldId]获取值，但是this.form.get('fieldId')无法获取到组件。 Inherited From MWF.xApplication.process.Xform.$Input#getData Returns 组件的数据. Examples var data = this.form.get('fieldId').getData(); //没有使用promise的情况、 //如果无法确定表单上是否有组件，需要判断 var data; if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 data = this.form.get('fieldId').getData(); }else{ data = this.data['fieldId']; //直接从数据中获取字段值 } //使用Promise的情况 var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 promise.then( function(){ var data = field.getData(); //此时由于异步请求已经执行完毕，getData方法获取到了数据字典的值 }) field.setData( promise ); Source x_component_process_Xform/$Input.js, line 328 resetData() Summary 重置组件的值为默认值或置空。 Inherited From MWF.xApplication.process.Xform.$Input#resetData Example this.form.get('subject').resetData(); Source x_component_process_Xform/$Input.js, line 344 setData(data) Summary 为组件赋值。 Description 当参数为Promise的时候，请参考文档: 使用Promise处理表单异步 当表单上没有对应组件的时候，可以使用this.data[fieldId] = data赋值。 Parameters data String | Promise . Inherited From MWF.xApplication.process.Xform.$Input#setData Examples this.form.get('fieldId').setData('test'); //赋文本值 //如果无法确定表单上是否有组件，需要判断 if( this.form.get('fieldId') ){ //判断表单是否有无对应组件 this.form.get('fieldId').setData( data ); }else{ this.data['fieldId'] = data; } //使用Promise var field = this.form.get('fieldId'); var dict = new this.Dict('test'); //test为数据字典名称 var promise = dict.get('tools', true); //异步使用数据字典的get方法时返回Promise，参数true表示异步 field.setData( promise ); Source x_component_process_Xform/$Input.js, line 367 validation(routeNameopt) &rarr; {Boolean} Summary 根据组件的校验设置进行校验。 Parameters routeName String &lt;optional&gt; 可选，路由名称. Inherited From MWF.xApplication.process.Xform.$Input#validation Returns Boolean 是否通过校验 Example if( !this.form.get('fieldId').validation() ){ return false; } Source x_component_process_Xform/$Input.js, line 606 hide() Summary 隐藏组件. Inherited From MWF.xApplication.process.Xform.$Module#hide Example this.form.get('fieldId').hide(); //隐藏组件 Source x_component_process_Xform/$Module.js, line 77 show() Summary 显示组件. Inherited From MWF.xApplication.process.Xform.$Module#show Example this.form.get('fieldId').show(); //显示组件 Source x_component_process_Xform/$Module.js, line 88 Events queryLoad 组件加载前触发。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoad See 组件事件说明 load 组件加载时触发. Inherited From MWF.xApplication.process.Xform.Org#event:load See 组件事件说明 postLoad 组件加载后触发. Inherited From MWF.xApplication.process.Xform.Org#event:postLoad See 组件事件说明 change 当组件值改变时触发。 Inherited From MWF.xApplication.process.Xform.Org#event:change See 组件事件说明 select 当组件不允许输入（使用人员选择框）时，完成选择人员，并且给组件赋值后执行。 Inherited From MWF.xApplication.process.Xform.Org#event:select See 组件事件说明 queryLoadSelector 人员选择框事件：加载前执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadSelector See 组件事件说明 postLoadSelector 人员选择框事件：加载后执行，由于选择项为异步加载，此时选择项并未加载完成。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadSelector See 组件事件说明 queryLoadCategory 人员选择框事件：加载选择框容器节点前执行。this.target指向人员选择框。 Overrides MWF.xApplication.process.Xform.Org#event:queryLoadCategory See 组件事件说明 postLoadContent 人员选择框事件：加载选择框容器节点后执行。this.target指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadContent See 组件事件说明 postLoadCategory 人员选择框事件：加载分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadCategory See 组件事件说明 selectCategory 人员选择框事件：选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectCategory See 组件事件说明 unselectCategory 人员选择框事件：取消选择分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectCategory See 组件事件说明 expand 人员选择框事件：展开分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:expand See 组件事件说明 collapse 人员选择框事件：折叠分类后执行。this.target指向分类，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:collapse See 组件事件说明 queryLoadItem 人员选择框事件：加载选择项前执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:queryLoadItem See 组件事件说明 postLoadItem 人员选择框事件：加载选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:postLoadItem See 组件事件说明 selectItem 人员选择框事件：选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:selectItem See 组件事件说明 unselectItem 人员选择框事件：取消选择选择项后执行。this.target指向选择项，this.target.selector指向人员选择框。 Inherited From MWF.xApplication.process.Xform.Org#event:unselectItem See 组件事件说明 "}}